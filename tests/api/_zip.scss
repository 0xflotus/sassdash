@include test-module('Sassdash') {
  @include test('_zip methods') {
    @each $method-name in 'unzip', 'zip' {
      $func: unquote('_#{$method-name}');
      $is-zip: $method-name == 'zip';

      $map: (
        'an empty array': (
          (),
          ()
        ),
        '0-tuples': (
          ((), ()),
          ()
        ),
        '2-tuples': (
          (('barney', 'fred'), (36, 40)),
          (('barney', 36), ('fred', 40))
        ),
        '3-tuples': (
          (('barney', 'fred'), (36, 40), (true, false)),
          (('barney', 36, true), ('fred', 40, false))
        )
      );

      @each $key, $pair in $map {
        $lists: if($is-zip, nth($pair, 1), nth($pair, 2));
        $actual: if($is-zip, _call($func, null, $lists...), _call($func, null, $lists));
        $expected: if($is-zip, nth($pair, 2), if(length($actual) == 0, (), nth($pair, 1)));

        @include assert-true(test-lists-equal($actual, $expected),
          '#{$func} should work with #{$key}');
      }
    }
  }
}

@function test-zip-map-1($value, $args...) {
  @return __parse-float($value) > 1;
}

@include test-module('Sassdash') {
  @include test('_zip-map') {
    $map: ('barney': 36, 'fred': 40);
    $list: (('barney', 36), ('fred', 40));

    $actual: _zip-map('barney' 'fred', 36 40);
    @include assert-equal($actual, $map,
      'should zip together key/value lists into a map');

    @include assert-equal(_zip-map(('a',), 1 2), ('a': 1),
      'should ignore extra values');

    @include assert-equal(_zip-map($list), $map,
      'should accept a two dimensional list');

    @include assert-equal(_zip-map('barney' 'fred'), ('barney': null, 'fred': null),
      'should not assume keys is two dimensional if values argument is not provided');

    @each $value in $test-falsey {
      @include assert-equal(_zip-map($value), (),
        'should accept a falsey list argument');
    }

    @include assert-equal(_zip-map(_pairs($map)), $map,
      'should support consuming the return value of _pairs');

    $list: ('a' 1, 'b' 2);
    $predicate: test-zip-map-1;
    $actual: _($list, zip-map, map _to-string, filter $predicate, take);

    @include assert-true(test-lists-equal($actual, ('2',)),
      'should work in a lazy chain sequence');

    @include assert-equal(_object($list), _zip-map($list),
      'should be aliased');
  }
}