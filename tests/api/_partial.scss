
@function test-partial-1($a, $b) {
  @return ($a, $b);
}
@function test-partial-2($args...) {
  @return length($args);
}
@include test-module('Sassdash') {
  @include test('_partial methods') {
    @each $method-name in 'partial', 'partial-right' {
      $func: unquote('_#{$method-name}');
      $is-partial: $method-name == 'partial';

      $par: _call($func, null, _identity, 'a');

      @include assert-equal(_call($par), 'a',
        '#{$func} partially applies arguments');

      $expected: ('a', 'b');
      $par: _call($func, null, test-partial-1, 'a');

      @include assert-true(test-lists-equal(_call($par, null, 'b'), if($is-partial, $expected, __list-reverse($expected))),
        '#{$func} creates a function that can be invoked with additional arguments');

      $par: _call($func, null, test-partial-2);

      @include assert-equal(_call($par), 0,
        '#{$func} works when there are no partially applied arguments and the created function is invoked without additional arguments');

      $par: _call($func, null, _identity);

      @include assert-equal(_call($par, null, 'a'), 'a',
        '#{$func} works when there are no partially applied arguments and the created function is invoked with additional arguments');
    }
  }
}