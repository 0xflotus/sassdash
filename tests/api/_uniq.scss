
@function test-uniq-1($map, $args...) {
  @return __get($map, 'a');
}
@include test-module('Sassdash') {
  @include test('_uniq') {
    $maps: (
      ( 'a': 2 ),
      ( 'a': 3 ),
      ( 'a': 1 ),
      ( 'a': 2 ),
      ( 'a': 3 ),
      ( 'a': 1 )
    );

    @include assert-true(test-lists-equal(_uniq(2 3 1 2 3 1), 2 3 1),
      'should return unique values of an unsorted list');

    @include assert-true(test-lists-equal(_uniq(1 1 2 2 3), 1 2 3),
      'should return unique values of a sorted list');

    @include assert-true(test-lists-equal(_uniq($maps, test-uniq-1), _slice($maps, 0, 3)),
      'should work with an iteratee argument without specifying is-sorted');

    @include assert-true(test-lists-equal(_uniq($maps, 'a'), _slice($maps, 0, 3)),
      'should work with a _pluck style iteratee');

    $lists: (2 1, 3 1, 1 1, 2 1, 3 1, 1 1);

    @include assert-true(test-lists-equal(_uniq($lists, 1), _slice($lists, 0, 3)),
      'should work with a _pluck style iteratee');

    $list: (2 1 2, 1 2 1);

    @include assert-true(test-lists-equal(_map($list, _uniq), (2 1, 1 2)),
      'should perform an unsorted uniq when used as an iteratee for _map');

    @include assert-true(test-lists-equal(_uniq('2' 2 3 '2' 3 2), '2' 2 3),
      'should distinguish between numbers and numeric strings');

    @include assert-equal(_unique(2 3 1 2), _uniq(2 3 1 2),
      'should be aliased');
  }
}