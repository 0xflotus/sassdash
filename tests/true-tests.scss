@import '../bower_components/true/sass/_true';
@import '../scss/_sassdash';

$true-terminal-output: true;

$test-falsey: ('', 0, false, null);
$test-empty-list: ();

@function test-add($x, $y) {
    @return $x + $y;
}

@function test-square($n, $args...) {
    @return $n * $n;
}

@function test-fixed($n) {
    @return __number-to-fixed($n);
}

@function test-is-even($n, $args...) {
    @return $n % 2 == 0;
}

@mixin test-group() { @content; }

@function test-take-right-1($value, $args...) {
  @return $value < 9;
}
@include test-module('Sassdash') {
  @include test('_take-right') {
    $list: 1 2 3;

    $actual: _take-right($list, 2);
    $expected: 2 3;

    @include assert-equal($actual, $expected,
      'should take the last two elements');

    @each $value in $test-falsey {
      $actual: _take-right($list, $value);
      $expected: if($value == null, (3,), $test-empty-list);

      @include assert-equal($actual, $expected,
        'should treat falsey n value, except nullish, as 0');
    }

    @each $value in 0, -1, -9999 {
      @include assert-equal(_take-right($list, $value), $test-empty-list,
        'should return an empty list when n < 1');
    }

    @each $value in 3, 4, pow(2, 32), 9999 {
      @include assert-equal(_take-right($list, $value), $list,
        'should return all elements when n >= list length');
    }

    @include test-group() {
      $list: 1 2 3, 4 5 6, 7 8 9;
      $actual: _map($list, _take-right);
      $expected: (3,), (6,), (9,);

      @include assert-equal($actual, $expected,
        'should work as iteratee for map');
    }

    @include test-group() {
      $list: 1 2 3 4 5 6 7 8 9 10;
      $predicate: test-take-right-1;
      $actual: _($list, take-right 2, take-right, value);

      @include assert-equal($actual, (10,),
        'should work in a lazy chain sequence');

      $actual: _($list, filter $predicate, take-right 2, take-right, value);

      @include assert-equal($actual, (8,),
        'should work in a lazy chain sequence');

      $actual: _($list, take-right 6, take 4, take-right 2, take, value);

      @include assert-equal($actual, (7,),
        'should work in a lazy chain sequence');

      $actual: _($list, filter $predicate, take-right 6, take 4, take-right 2, take, value);

      @include assert-equal($actual, (5,),
        'should work in a lazy chain sequence');
    }
  }
}

@function test-take-right-while-1($num, $args...) {
  @return $num > 1;
}
@include test-module('Sassdash') {
  @include test('_take-right-while') {  
    $list: 1 2 3;
    $maps: (
      ('a': 0, 'b': 0),
      ('a': 1, 'b': 1),
      ('a': 2, 'b': 2),
    );

    $actual: _take-right-while($list, test-take-right-while-1);

    @include assert-equal($actual, 2 3,
      'should take elements while predicate returns truthy');

    @include assert-true(true, 'should provide the correct predicate arguments'); // not implemented

    @include assert-true(true, 'should support the this-arg argument'); // todo

    @include assert-equal(_take-right-while($maps, 'b'), _slice($maps, 1),
      'should work with a _pluck style predicate');

    @include assert-equal(_take-right-while($maps, ('b': 2)), _slice($maps, 2),
      'should work with a _where style predicate');

    @include assert-equal(_($list, take-right-while test-take-right-while-1, value), 2 3,
      'should return expected value when chaining');
  }
}

@function test-take-while-1($num, $args...) {
  @return $num < 3;
}
@include test-module('Sassdash') {
  @include test('_take-while') {  
    $list: 1 2 3;
    $maps: (
      ('a': 2, 'b': 2),
      ('a': 1, 'b': 1),
      ('a': 0, 'b': 0),
    );

    $actual: _take-while($list, test-take-while-1);

    @include assert-equal($actual, 1 2,
      'should take elements while predicate returns truthy');

    @include assert-true(true, 'should provide the correct predicate arguments'); // not implemented

    @include assert-true(true, 'should support the this-arg argument'); // todo

    @include assert-equal(_take-while($maps, 'b'), _slice($maps, 0, 2),
      'should work with a _pluck style predicate');

    @include assert-equal(_take-while($maps, ('b': 2)), _slice($maps, 0, 1),
      'should work with a _where style predicate');

    @include assert-equal(_($list, take-while test-take-while-1, value), 1 2,
      'should return expected value when chaining');
  }
}

@function test-flatten-1($args...) {
  @return $args;
}
@include test-module('Sassdash') {
  $args: test-flatten-1(1, 2, 3);

  @include test('flatten methods') {
    $list: ((('a',),), (('b',),));

    @include assert-equal(_flatten($list), (('a',), ('b',)),
      'should perform a shallow flatten');

    $expected: ('a', 'b');

    @include assert-equal(_flatten($list, true), $expected,
      'should work with isDeep');

    @include assert-equal(_flatten-deep($list), $expected,
      'should work with isDeep');

    $list: ($args, ($args,));
    $expected: (1, 2, 3, $args);

    @include assert-equal(_flatten($list), $expected,
      'should flatten arglists');

    $expected: (1, 2, 3, 1, 2, 3);

    @include assert-equal(_flatten($list, true), $expected,
      'should flatten arglists');

    @include assert-equal(_flatten-deep($list), $expected,
      'should flatten arglists');

    $list: (((('a',),),), ((('b',),),));

    @include assert-equal(_map($list, _flatten), ((('a',),), (('b',),)),
      'should work as an iteratee for _map');

    @include assert-equal(_map($list, _flatten-deep), (('a',), ('b',)),
      'should work as an iteratee for _map');
    
    $list: ((), ((),), ((), (((),),),));
    $expected: ((), (), (((),),));

    @include assert-equal(_flatten($list), $expected,
      'should work with empty lists');

    @include assert-equal(_flatten($list, true), $test-empty-list,
      'should work with empty lists');

    @include assert-equal(_flatten-deep($list), $test-empty-list,
      'should work with empty lists');

    $list: (1, (2,), (3, (4,)));
    $expected: (1, 2, 3, (4,));

    @include assert-equal(_flatten($list), $expected,
      'should support flattening of nested lists');

    $expected: (1, 2, 3, 4);

    @include assert-equal(_flatten($list, true), $expected,
      'should support flattening of nested lists');

    @include assert-equal(_flatten-deep($list), $expected,
      'should support flattening of nested lists');

    $expected: ();

    @include assert-equal(_flatten(('a': 1)), $expected,
      'should return empty list for non list-like objects');

    @include assert-equal(_flatten(('a': 1), true), $expected,
      'should return empty list for non list-like objects');

    @include assert-equal(_flatten-deep(('a': 1)), $expected,
      'should return empty list for non list-like objects');
  }
}

@include test-module('Sassdash') {
  @include test('_for-each') {
    @include assert-equal(_each(1 2 3, test-square), _for-each(1 2 3, test-square),
      'should be aliased');
  }

  @include test('_for-each-right') {
    @include assert-equal(_each-right(1 2 3, test-square), _for-each-right(1 2 3, test-square),
      'should be aliased');
  }
}

// @include test-module('Sassdash iteration methods') {
//   $methods: (
//     'count-by',
//     'every',
//     'filter',
//     'find',
//     'find-index',
//     'find-key',
//     'find-last',
//     'find-last-index',
//     'find-last-key',
//     'for-each-right',
//     'for-in',
//     'for-in-right',
//     'for-own',
//     'for-own-right',
//     'group-by',
//     'index-by',
//     'map',
//     'max',
//     'min',
//     'partition',
//     'reject',
//     'some'
//   );

//   $array-methods: (
//     'find-index',
//     'find-last-index'
//   );

//   $collection-methods: (
//     'count-by',
//     'every',
//     'filter',
//     'find',
//     'find-last',
//     'for-each',
//     'for-each-right',
//     'group-by',
//     'index-by',
//     'map',
//     'max',
//     'min',
//     'partition',
//     'reduce',
//     'reduce-right',
//     'reject',
//     'some'
//   );

//   $for-in-methods: (
//     'for-in',
//     'for-in-right'
//   );

//   $iteration-methods: (
//     'for-each',
//     'for-each-right',
//     'for-in',
//     'for-in-right',
//     'for-own',
//     'for-own-right'
//   );

//   $map-methods: (
//     'find-key',
//     'find-last-key',
//     'for-in',
//     'for-in-right',
//     'for-own',
//     'for-own-right'
//   );

//   $right-methods: (
//     'find-last',
//     'find-last-index',
//     'find-last-key',
//     'for-each-right',
//     'for-in-right',
//     'for-own-right'
//   );

//   $unwrapped-methods: (
//     'every',
//     'find',
//     'find-index',
//     'find-key',
//     'find-last',
//     'find-last-index',
//     'find-last-key',
//     'max',
//     'min',
//     'some'
//   );
// }

@include test-module('Sassdash') {
  @include test('map assignments') {  
    // TODO: add 'merge'
    @each $method-name in 'assign', 'defaults' {
      $func: unquote('_#{$method-name}');

      @each $value in $test-falsey {
        $actual: _call($func, null, $value);
        $expected: $value;

        @include assert-equal($actual, $expected,
          '#{$func} should pass thru falsey map values');
      }

      $list: (('b': 2), ('c': 3));
      $actual: _reduce($list, $func, ('a': 1));
      $expected: ('a': 1, 'b': 2, 'c': 3);

      @include assert-equal($actual, $expected,
        '#{$func} should work as an iteratee for _reduce');
    }
  }
}

// @include test-module('Sassdash') {
//   @include test('_merge') {
//     $names: (
//       'characters': (
//         ('name': 'barney'),
//         ('name': 'fred')
//       )
//     );

//     $ages: (
//       'characters': (
//         ('age': 36),
//         ('age': 40)
//       )
//     );

//     $heights: (
//       'characters': (
//         ('height': '5ft4'),
//         ('height': '5ft5')
//       )
//     );

//     $expected: (
//       'characters': (
//         ('name': 'barney', 'age': 36, 'height': '5ft4'),
//         ('name': 'fred', 'age': 40, 'height': '5ft5')
//       )
//     );

//     @include assert-equal(_merge($names, $ages, $heights), $expected
//       'should merge source into the destination object');
//   }
// }

@include test-module('Sassdash') {
  @include test('_min') {
    @include assert-equal(_min(1 2 3), 1,
      'should return the smallest value from a collection');

    @include assert-equal(_min(()), const-get('POSITIVE_INFINITY'),
      'should return Infinity for empty collections');

    @include assert-equal(_min('a' 'b' 'c'), const-get('POSITIVE_INFINITY'),
      'should return Infinity for non-numeric collection items');
  }
}



@include report;