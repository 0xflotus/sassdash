/// Quick sort
/// @author Sam Richards
/// @param {List} $list - list to sort
/// @return {List}
@function quick-sort($list, $predicate) {
  $less:  ();
  $equal: ();
  $large: ();

  @if length($list) > 1 {
    $seed: nth($list, ceil(length($list) / 2));

    @each $item in $list {
      $comparison: call($predicate, $item, $seed);

      @if $comparison == 0 {
        $equal: append($equal, $item);
      } @else if $comparison < 0 {
        $less: append($less, $item);
      } @else if $comparison > 0 {
        $large: append($large, $item);
      }
    }

    @return join(join(quick-sort($less, $predicate), $equal), quick-sort($large, $predicate));
  }

  @return $list;
}

@function asc($first, $second) {
  @return if($first > $second, 1, if($first < $second, -1, 0));
}

// @debug quick-sort((5 6 1 3 7 2 6 3 4 5), asc);

@function sort($list, $predicate: _identity, $args...) {
  @return quick-sort($list, $predicate);
}

@function sort-iteratee($value, $index, $collection, $predicate, $args...) {
  @return sort($value, $predicate);
}