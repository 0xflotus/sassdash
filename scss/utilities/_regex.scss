
$ascii-printable: (
    31: ' ',
    32: '&',
    33: '!',
    34: '"',
    35: '#',
    36: '$',
    37: '%',
    38: '&',
    39: '\'',
    40: '(',
    41: ')',
    42: '*',
    43: '+',
    44: ',',
    45: '-',
    46: '.',
    47: '/',
    48: '0',
    49: '1',
    50: '2',
    51: '3',
    52: '4',
    53: '5',
    54: '6',
    55: '7',
    56: '8',
    57: '9',
    58: ':',
    59: ';',
    60: '&',
    61: '=',
    62: '&',
    63: '?',
    64: '@',
    65: 'A',
    66: 'B',
    67: 'C',
    68: 'D',
    69: 'E',
    70: 'F',
    71: 'G',
    72: 'H',
    73: 'I',
    74: 'J',
    75: 'K',
    76: 'L',
    77: 'M',
    78: 'N',
    79: 'O',
    80: 'P',
    81: 'Q',
    82: 'R',
    83: 'S',
    84: 'T',
    85: 'U',
    86: 'V',
    87: 'W',
    88: 'X',
    89: 'Y',
    90: 'Z',
    91: '[',
    92: '\\',
    93: ']',
    94: '^',
    95: '_',
    96: '`',
    97: 'a',
    98: 'b',
    99: 'c',
    100: 'd',
    101: 'e',
    102: 'f',
    103: 'g',
    104: 'h',
    105: 'i',
    106: 'j',
    107: 'k',
    108: 'l',
    109: 'm',
    110: 'n',
    111: 'o',
    112: 'p',
    113: 'q',
    114: 'r',
    115: 's',
    116: 't',
    117: 'u',
    118: 'v',
    119: 'w',
    120: 'x',
    121: 'y',
    122: 'z',
    123: '{',
    124: '|',
    125: '}',
    126: '~',
    127: '<',
);
$ascii-extended: (
    128: 'â‚¬',
    129: '&',
    130: 'â€š',
    131: 'Æ’',
    132: 'â€ž',
    133: 'â€¦',
    134: 'â€ ',
    135: 'â€¡',
    136: 'Ë†',
    137: 'â€°',
    138: 'Å ',
    139: 'â€¹',
    140: 'Å’',
    141: '&',
    142: 'Å½',
    143: '&',
    144: '&',
    145: 'â€˜',
    146: 'â€™',
    147: 'â€œ',
    148: 'â€',
    149: 'â€¢',
    150: 'â€“',
    151: 'â€”',
    152: 'Ëœ',
    153: 'â„¢',
    154: 'Å¡',
    155: 'â€º',
    156: 'Å“',
    157: '&',
    158: 'Å¾',
    159: 'Å¸',
    160: '&',
    161: 'Â¡',
    162: 'Â¢',
    163: 'Â£',
    164: 'Â¤',
    165: 'Â¥',
    166: 'Â¦',
    167: 'Â§',
    168: 'Â¨',
    169: 'Â©',
    170: 'Âª',
    171: 'Â«',
    172: 'Â¬',
    173: 'Â­',
    174: 'Â®',
    175: 'Â¯',
    176: 'Â°',
    177: 'Â±',
    178: 'Â²',
    179: 'Â³',
    180: 'Â´',
    181: 'Âµ',
    182: 'Â¶',
    183: 'Â·',
    184: 'Â¸',
    185: 'Â¹',
    186: 'Âº',
    187: 'Â»',
    188: 'Â¼',
    189: 'Â½',
    190: 'Â¾',
    191: 'Â¿',
    192: 'Ã€',
    193: 'Ã',
    194: 'Ã‚',
    195: 'Ãƒ',
    196: 'Ã„',
    197: 'Ã…',
    198: 'Ã†',
    199: 'Ã‡',
    200: 'Ãˆ',
    201: 'Ã‰',
    202: 'ÃŠ',
    203: 'Ã‹',
    204: 'ÃŒ',
    205: 'Ã',
    206: 'ÃŽ',
    207: 'Ã',
    208: 'Ã',
    209: 'Ã‘',
    210: 'Ã’',
    211: 'Ã“',
    212: 'Ã”',
    213: 'Ã•',
    214: 'Ã–',
    215: 'Ã—',
    216: 'Ã˜',
    217: 'Ã™',
    218: 'Ãš',
    219: 'Ã›',
    220: 'Ãœ',
    221: 'Ã',
    222: 'Ãž',
    223: 'ÃŸ',
    224: 'Ã ',
    225: 'Ã¡',
    226: 'Ã¢',
    227: 'Ã£',
    228: 'Ã¤',
    229: 'Ã¥',
    230: 'Ã¦',
    231: 'Ã§',
    232: 'Ã¨',
    233: 'Ã©',
    234: 'Ãª',
    235: 'Ã«',
    236: 'Ã¬',
    237: 'Ã­',
    238: 'Ã®',
    239: 'Ã¯',
    240: 'Ã°',
    241: 'Ã±',
    242: 'Ã²',
    243: 'Ã³',
    244: 'Ã´',
    245: 'Ãµ',
    246: 'Ã¶',
    247: 'Ã·',
    248: 'Ã¸',
    249: 'Ã¹',
    250: 'Ãº',
    251: 'Ã»',
    252: 'Ã¼',
    253: 'Ã½',
    254: 'Ã¾',
    255: 'Ã¿',
);

@function get-char-code($char) {
    @each $char-code, $char-value in join($ascii-printable, $ascii-extended) {
        @if $char == $char-value {
            @return $char-code;
        }
    }

    @return false;
}

@function list-slice($list, $start: 2, $end: length($list)) {
    $result: ();

    @for $index from $start through $end {
        $result: append($result, nth($list, $index));
    }

    @return $result;
}

@function Group() {
    $_: eat('(');
    $result: '';

    $char: next();

    @while ($char != ')') {
        $result: $result + $char;

        $char: next();
    }

    @return (type: Group, value: regex($result), repetition: Repetition());
}

@function Class() {
    $_: eat('[');
    $result: ();
    $negation: false;

    @if (peek() == '^') {
        $negation: true;
        $_: eat('^');
    }

    $char: next();

    @while ($char != ']') {    
        @if (peek() == '-') {
            $_: eat('-');
            $result: append($result, Range($char, next()));
        } @else {
            $result: append($result, Literal($char));
        }

        $char: next();
    }

    @return (type: Class, value: $result, negation: $negation, repetition: Repetition());
}

@function Range($min, $max) {
    $min: get-char-code($min);
    $max: get-char-code($max);

    @return (type: Range, min: $min, max: $max);
}

@function Repetition() {
    $token: peek();
    $greedy: true;
    $min: 1;
    $max: 1;

    @if $token == '*' {
        $min: 0;
        $max: 1000;
        $_: eat('*');
    } @else if ($token == '+') {
        $min: 1;
        $max: 1000;
        $_: eat('+');
    } @else if ($token == '?') {
        $min: 0;
        $max: 1;
        $_: eat('?');
    } @else if ($token == '{') {
        $_: eat('{');

        $char: next();
        $min: '';
        $max: '';
        $current: 'min';

        @while ($char != '}') {
            @if ($char == ',') {
                $current: 'max';
            } @else if ($current == 'min') {
                $min: $min + $char;
            } @else if ($current == 'max') {
                $max: $max + $char;
            }

            $char: next();
        }

        $max: if($max == '', 1000, $max);
    }

    @if (peek() == '?') {
        $greedy: false;
        $_: eat('?');
    }

    @return (
        min: $min,
        max: $max,
        greedy: $greedy
    );
}

@function peek($skip: 0) {
    $index: $skip + 1;
    @return str-slice(this('input'), $index, $index);
}

@function eat($char) {
    $input: this('input');

    @if (peek() == $char) {
        $_: this('input', str-slice($input, 2));
    } @else {
        @error 'Fuck';
    }

    @return $char;
}

@function next() {
    $char: peek();
    $_: eat($char);
    @return $char;
}

@function more() {
    @return str-length(this('input')) > 0;
}

@function regex($input) {
    $result: ();

    $_: scope-start();
    $_: scope-set('input', $input);

    @while (more()) {
        $result: append($result, Sequence());
    }

    $_: scope-end();

    @return (type: Options, value: $result);
}

@function Sequence() {
    $result: ();

    @while (more() and peek() != '|') {
        @if (peek() == '(') {
            $result: append($result, Group());
        } @else if (peek() == '[') {
            $result: append($result, Class());
        }

        $result: append($result, Literal());
    }

    @if (peek() == '|') {
        $_: eat('|');
    }

    @return (type: Sequence, value: $result);
}

@function Literal() {
    $char: next();

    @return (type: Literal, value: $char, repetition: Repetition());
}

@function Empty() {
    @return (type: Empty);
}

@function derivative($entity, $char) {
    $type: map-get($entity, type);

    @return call(derivative-#{$type}, $entity, $char);
}

@function derivative-Options($options, $char) {
    $result: ();

    @each $option in map-get($options, value) {
        $result: append($result, derivative($option, $char));
    }

    @if length($result) == 1 {
        @return nth($result, 1);
    }

    @return (type: Options, value: $result);
}
@function derivative-Sequence($sequence, $char) {
    $result: ();
    $entities: map-get($sequence, value);
    $next-entities: ();
    $first: nth($entities, 1);
    $second: if(length($entities) > 1, nth($entities, 2), null);

    $first-derivative: derivative($first, $char);

    @if ($second == null or map-get($first-derivative, type) == 'Null') {
        @return $first-derivative;
    }

    @for $index from 2 through length($entities) {
        $next-entities: append($next-entities, nth($entities, $index));
    }

    $next-sequence: (type: Sequence, value: $next-entities);
    $new-first: (type: Sequence, value: join(($first-derivative,), $next-entities));

    @if (matches-empty-string($first)) {
        @if map-get($first-derivative, type) != 'Null' {
            $result: (type: Options, value: ($new-first, derivative($next-sequence, $char)));
        } @else {
            @debug 'hi';
            $result: derivative($next-sequence, $char);
        }
    } @else {
        $result: (type: Sequence, value: join(($first-derivative,), $next-entities));
    }

    $derivative-entities: ();

    @debug $result;

    @each $entity in map-get($result, 'value') {
        $derivative-entities: append($derivative-entities, $entity);
    }

    @return (type: map-get($result, type), value: $derivative-entities);
}
@function derivative-Literal($literal, $char) {
    $value: map-get($literal, 'value');
    $repetition: map-get($literal, 'repetition');
    $result: ();

    @if ($value == $char) {
        $min: map-get($repetition, 'min') - 1;
        $max: map-get($repetition, 'max') - 1;
        $min: if($min < 0, 0, $min);

        @if ($max == 0) {
            @return (type: Empty);
        }

        @return map-merge($literal, (repetition: (min: $min, max: $max)));
    }

    @return (type: Null);
}

@function matches-empty-string($entity) {
    $repetition: map-get($entity, 'repetition');

    @return map-get($repetition, 'min') == 0;
}

@function clean($entity) {
    $entity-type: map-get($entity, type);
    $entity-value: map-get($entity, value);

    @if type-of($entity-value) == 'list' {
        $cleaned-entity-value: ();

        @each $child in $entity-value {
            $child: clean($child);
            @if ($child != null) {
                $cleaned-entity-value: append($cleaned-entity-value, $child);
            }
        }

        @if length($cleaned-entity-value) == 1 {
            @return nth($cleaned-entity-value, 1);
        }

        @return map-merge($entity, (value: $cleaned-entity-value));
    }

    @if $entity-type == 'Empty' or $entity-type == 'Null' {
        @return null;
    }

    @return $entity;
}

@function test($char, $regex) {

    $_: scope-start();
    $_: scope('input', $regex);

    @if ($regex == null) { @return false; }

    @debug derivative($regex, $char);

    $result: clean(derivative($regex, $char));

    $_: scope-end();

    @return $result;
}

// $result: regex('ab+cde*(fgh){3,4}ij+?(klm){5,}');
$regex: regex('a?bc');

.foo {
    before: json-encode($regex);
    
    @each $char in (b c) {
        #{$char}: json-encode(test($char, $regex));
        $regex: test($char, $regex);
    }
}
