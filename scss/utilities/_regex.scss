@function list-slice($list, $start: 2, $end: length($list)) {
    $result: ();

    @for $index from $start through $end {
        $result: append($result, nth($list, $index));
    }

    @return $result;
}


@function Group() {
    $_: eat('(');
    $result: '';
    $char: next();

    @while $char != ')' {
        $result: $result + $char;
        $char: next();
    }

    @return (
        'type': 'Group',
        'value': regex($result),
        'repetition': Repetition(),
    );
}


@function Class() {
    $_: eat('[');
    $result: ();
    $negation: false;

    @if peek() == '^' {
        $negation: true;
        $_: eat('^');
    }

    $char: next();

    @while $char != ']' {
        @if peek() == '-' {
            $_: eat('-');
            $result: append($result, Range($char, next()));
        } @else {
            $result: append($result, Literal($char));
        }

        $char: next();
    }

    @return (
        'type': 'Class',
        'value': $result,
        'negation': $negation,
        'repetition': Repetition(),
    );
}


@function Range($min, $max) {
    @return (
        'type': 'Range',
        'min': get-char-code($min),
        'max': get-char-code($max),
    );
}


@function Repetition() {
    $token: peek();
    $greedy: true;
    $min: 1;
    $max: 1;

    @if $token == '*' {
        $min: 0;
        $max: 1000;
        $_: eat('*');
    } @else if $token == '+' {
        $min: 1;
        $max: 1000;
        $_: eat('+');
    } @else if $token == '?' {
        $min: 0;
        $max: 1;
        $_: eat('?');
    } @else if $token == '{' {
        $_: eat('{');
        $char: next();
        $min: '';
        $max: '';
        $current: 'min';

        @while $char != '}' {
            @if $char == ',' {
                $current: 'max';
            } @else if $current == 'min' {
                $min: $min + $char;
            } @else if $current == 'max' {
                $max: $max + $char;
            }

            $char: next();
        }

        $max: if($max == '', 1000, $max);
    }

    @if peek() == '?' {
        $greedy: false;
        $_: eat('?');
    }

    @return (
        'min': $min,
        'max': $max,
        'greedy': $greedy,
    );
}


@function peek($skip: 0) {
    @return str-slice(__this('input'), $skip + 1, $skip + 1);
}


@function eat($char) {
    $input: __this('input');

    @if peek() == $char {
        $_: __this('input', str-slice($input, 2));
    } @else {
        // @TODO
        @error 'Fuck';
    }

    @return $char;
}


@function next() {
    $char: peek();
    $_: eat($char);

    @return $char;
}


@function more() {
    @return str-length(__this('input')) > 0;
}


@function regex($input) {
    $result: ();
    $_: scope-start();
    $_: scope-set('input', $input);

    @while more() {
        $result: append($result, Sequence());
    }

    $_: scope-end();

    @return (
        'type': 'Options',
        'value': $result,
    );
}


@function Sequence() {
    $result: ();

    @while (more() and peek() != '|') {
        @if peek() == '(' {
            $result: append($result, Group());
        } @else if peek() == '[' {
            $result: append($result, Class());
        }

        $result: append($result, Literal());
    }

    @if peek() == '|' {
        $_: eat('|');
    }

    @return (
        'type': 'Sequence',
        'value': $result,
    );
}


@function Literal() {
    $char: next();

    @return (
        'type': Literal,
        'value': $char,
        'repetition': Repetition(),
    );
}


@function Empty() {
    @return (
        'type': 'Empty',
    );
}


@function derivative($entity, $char) {
    $type: map-get($entity, type);

    @return call('derivative-#{$type}', $entity, $char);
}


@function derivative-Options($options, $char) {
    $result: ();

    @each $option in map-get($options, 'value') {
        $result: append($result, derivative($option, $char));
    }

    @if length($result) == 1 {
        @return nth($result, 1);
    }

    @return (
        'type': 'Options',
        'value': $result,
    );
}


@function derivative-Sequence($sequence, $char) {
    $result: ();
    $entities: map-get($sequence, 'value');
    $next-entities: ();
    $first: nth($entities, 1);
    $second: if(length($entities) > 1, nth($entities, 2), null);

    $first-derivative: derivative($first, $char);

    @if ($second == null or map-get($first-derivative, 'type') == 'Null') {
        @return $first-derivative;
    }

    @for $index from 2 through length($entities) {
        $next-entities: append($next-entities, nth($entities, $index));
    }

    $next-sequence: (
        'type': 'Sequence',
        'value': $next-entities,
    );
    $new-first: (
        'type': 'Sequence',
        'value': join(($first-derivative,), $next-entities),
    );

    @if matches-empty-string($first) {
        @if map-get($first-derivative, 'type') != 'Null' {
            $result: (
                'type': 'Options',
                'value': ($new-first, derivative($next-sequence, $char)),
            );
        } @else {
            $result: derivative($next-sequence, $char);
        }
    } @else {
        $result: (
            'type': 'Sequence',
            'value': join(($first-derivative,), $next-entities),
        );
    }

    $derivative-entities: ();

    @each $entity in map-get($result, 'value') {
        $derivative-entities: append($derivative-entities, $entity);
    }

    @return (
        'type': map-get($result, 'type'),
        'value': $derivative-entities,
    );
}


@function derivative-Literal($literal, $char) {
    $value: map-get($literal, 'value');
    $repetition: map-get($literal, 'repetition');
    $result: ();

    @if $value == $char {
        $min: map-get($repetition, 'min') - 1;
        $max: map-get($repetition, 'max') - 1;
        $min: min(0, $min);

        @if $max == 0 {
            @return (
                'type': 'Empty',
            );
        }

        @return map-merge($literal, (
            'repetition': (
                'min': $min,
                'max': $max,
            )
        ));
    }

    @return (
        'type': 'Null'
    );
}


@function matches-empty-string($entity) {
    @return map-get(map-get($entity, 'repetition'), 'min') == 0;
}


@function clean($entity) {
    $entity-type: map-get($entity, 'type');
    $entity-value: map-get($entity, 'value');

    @if type-of($entity-value) == 'list' {
        $cleaned-entity-value: ();

        @each $child in $entity-value {
            $child: clean($child);

            @if $child != null {
                $cleaned-entity-value: append($cleaned-entity-value, $child);
            }
        }

        @if length($cleaned-entity-value) == 1 {
            @return nth($cleaned-entity-value, 1);
        }

        @return map-merge($entity, (
            'value': $cleaned-entity-value,
        ));
    }

    @if $entity-type == 'Empty' or $entity-type == 'Null' {
        @return null;
    }

    @return $entity;
}


@function test($char, $regex) {
    $_: scope-start();
    $_: scope('input', $regex);

    @if $regex == null {
        @return false;
    }

    $result: clean(derivative($regex, $char));
    $_: scope-end();

    @return $result;
}


// $result: regex('ab+cde*(fgh){3,4}ij+?(klm){5,}');
$regex: regex('a?bc');

.foo {
    before: json-encode($regex);

    @each $char in b, c {
        #{$char}: json-encode(test($char, $regex));
        $regex: test($char, $regex);
    }
}
