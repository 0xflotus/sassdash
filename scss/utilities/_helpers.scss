
@function __char-at($string, $index) {
    @return str-slice($string, $index, $index);
}

@function __list-reverse($list) {
    $length: length($list);
    $result-list: ();

    @for $index from $length through 1 {
        $result-list: append($result-list, nth($list, $index));
    }

    @return $result-list;
}

@function pow($number, $exp) {
    $value: 1;
    
    @if $exp > 0 {
        // If the exponent is positive, multiply.
        @for $i from 1 through $exp {
           $value: $value * $number;
        }
    }
    @else if $exp < 0 {
        // If the exponent is negative, divide.
        @for $i from 1 through -$exp {
            $value: $value / $number;
        }
    }

    @return $value;
}

@function __parse-float($value) {
    @if type-of($value) == number {
        @return $value;
    }

    @return __to-number($value);
}

@function __is-length($value) {
    @return type-of($value) == number
        and $value > -1
        and $value % 1 == 0
        and $value < (pow(2, 53) - 1);
}

@function __is-index($value, $length: null) {
    $value: __parse-float($value);

    @debug $value, $length, $value <= $length;
    
    @return $value > 0
        and $value % 1 == 0
        and ($length == null or $value <= $length);
}

@function __create-cache($values) {
    @return new(SetCache, $values);
}

@function __to-map($value) {
    @if (type-of($value) == string) {
        $index: 1;
        $length: str-length($value);
        $result: ();

        @while ($index <= $length) {
            $result: set($result, $index, __char-at($string, $index));
        }

        @return $result;
    } @else if (type-of($value) == list) {
        $index: 1;
        $length: length($value);
        $result: ();

        @while ($index <= $length) {
            $result: set($result, $index, nth($value, $index));

            $index: $index + 1;
        }

        @return $result;
    } @else if (type-of($value) == map) {
        @return $value;
    }
}

@function __to-list($value) {
    // TODO
    @if type-of($value) == map {
        $length: length($value);
        $index: 1;
        $result: ();

        @while ($index <= $length) {
            $result: append(get($value, $index));
        }

        @return if($result == map-values($value), $result, map-values($value));
    }

    @return $value;
}

@function __is-list($value) {
    @return type-of($value) == list;
}

@function __is-arguments($value) {
    @return __is-list($value);
}

@function __keys-in($map) {
    $map: __to-map($map);

    @return map-keys($map);
}

@function __keys($map) {
    // currently the same as __keys-in
    @return __keys-in($map);
}

@function __base-for($map, $iteratee, $keys-function) {
    $index: 1;
    $iterable: __to-map($map);
    $props: call($keys-function, $iterable);
    $length: length($props);
    $result-map: ();

    $break: false;

    @while ($index <= $length and not $break) {
        $key: nth($props, $index);
        $iteration: call($iteratee, get($iterable, $key), $key, $iterable);

        @if ($iteration == false) {
            $break: true;
        } @else {
            $result-map: set($result-map, $key, $iteration);
        }

        $index: $index + 1;
    }

    @return $result-map;
}

@function __base-for-own($map, $iteratee) {
    @return __base-for($map, $iteratee, __keys);
}

@function __is-strict-comparable($value) {
    @return true;
}

@function __is-list-like($value) {
    // TODO
    @return __is-list($value);
}

@function __is-plain-map($value) {
    // TODO
    @return type-of($value) == map;
}
