@function __char-at($string, $index) {
    @return str-slice($string, $index, $index);
}


@function __list-reverse($list) {
    $length: length($list);
    $result-list: ();
    $index: $length;

    @while $index > 0 {
        $result-list: append($result-list, nth($list, $index));
        $index: $index - 1;
    }

    @return $result-list;
}


@function pow($number, $exp) {
    $value: 1;

    @if $exp > 0 {
        @for $i from 1 through $exp {
            $value: $value * $number;
        }
    } @else if $exp < 0 {
        @for $i from 1 through -$exp {
            $value: $value / $number;
        }
    }

    @return $value;
}


@function __parse-float($value) {
    @return __to-number($value);
}


@function __is-list-like($value, $args...) {
    @return __is-list($value) or __is-arguments($value);
}


@function __is-length($value) {
    @return type-of($value) == 'number'
        and $value > -1
        and $value % 1 == 0
        and $value < (pow(2, 53) - 1);
}


@function __is-index($value, $length: null) {
    $value: __parse-float($value);

    @return $value > 0
        and $value % 1 == 0
        and ($length == null or $value <= $length);
}


@function __create-cache($values) {
    @return new('SetCache', $values);
}


@function __base-for($map, $iteratee, $keys-function) {
    $index: 1;
    $iterable: __to-map($map);
    $props: call($keys-function, $iterable);
    $result-map: ();
    $break: false;

    @while $index <= length($props) and not $break {
        $key: nth($props, $index);
        $iteration: __call($iteratee, null, get($iterable, $key), $key, $iterable);

        @if $iteration == false {
            $break: true;
        } @else {
            $result-map: set($result-map, $key, $iteration);
        }

        $index: $index + 1;
    }

    @return $result-map;
}


@function __base-for-own($map, $iteratee) {
    @return __base-for($map, $iteratee, '__keys');
}


@function __is-strict-comparable($value) {
    @return true;
}


@function __get-index-of() {
    @return '__base-index-of';
}


@function __native-min($args...) {
    @return min($args...);
}


@function __native-max($args...) {
    @return max($args...);
}


@function __native-is-finite($value) {
    // @TODO
    @return true;
}


@function __repeat($string, $value: 1) {
    $result: '';

    @for $iteration from 1 through $value {
        $result: $result + $string;
    }

    @return $result;
}


@function __is-ctor($ctor) {
    // @TODO
    @return function-exists($ctor);
}


@function __string-split($string, $delimiter: '') {
    @if not $delimiter
    or length($delimiter) == 0
    or $delimiter == '' {
        @return __to-list($string);
    }

    $delimiter-index: str-index($string, $delimiter);

    @if not $delimiter-index {
        @return $string;
    }

    @return join(
        str-slice($string, 1, $delimiter-index - 1),
        __string-split(
            str-slice($string, $delimiter-index + length($delimiter-index)),
            $delimiter
        )
    );
}


@function __is-falsey($value) {
    @if $value == null
    or $value == ''
    or $value == ""
    or $value == $__undefined__
    or $value == 0
    or not $value {
        @return true;
    }

    @return false;
}


@function __is-truthy($value) {
    @return $value and not __is-falsey($value);
}


@function either($this, $that) {
    @if __is-truthy($this) {
        @return $this;
    }

    @return $that;
}


@function __splice($list, $start, $delete-count: 1, $items...) {
    $result: ();
    $index: 1;

    @while $index < $start {
        $result: append($result, nth($list, $index));
        $index: $index + 1;
    }

    $index: $start + $delete-count;

    @while $index <= length($list) {
        $result: append($result, nth($list, $index));
        $index: $index + 1;
    }

    @return $result;
}


@function __get-length($list, $args...) {
    @return length($list);
}


@function __native-random() {
    @return random();
}


@function __string-index-of($string, $target, $position: 0) {
    $string: str-slice($string, $position);
    $string-index: str-index($string, $target);

    @if not $string-index {
        @return -1;
    }

    @return $string-index + $position - 1;
}


@function __string-last-index-of($string, $target, $position: 0) {
    $current-index: __string-index-of($string, $target, $position);
    $last-index: -1;

    @while $current-index != -1 {
        $last-index: $current-index;
        $current-index: __string-index-of($string, $target, $last-index + 1);
    }

    @return $last-index;
}


@function __string-replace($string, $target, $replacement: '') {
    $found-index: str-index($string, $target);
    $result: '';

    @if not $found-index {
        @return $string;
    }

    @if __function-exists($replacement) {
        $replacement: __call($replacement, null, $target);
    }

    @return $result
        + str-slice($string, 1, $found-index - 1)
        + $replacement
        + __string-replace(
            str-slice($string, str-length($target) + $found-index),
            $target,
            $replacement
        );
}


@function __number-to-fixed($value, $digits: null) {
    @if $digits == null {
        @return round($value);
    }

    @return round($value * pow(10, $digits)) / pow(10, $digits);
}
