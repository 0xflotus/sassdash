
@function __char-at($string, $index) {
    @return str-slice($string, $index, $index);
}

@function __list-reverse($list) {
    $length: length($list);
    $result-list: ();

    @for $index from $length through 1 {
        $result-list: append($result-list, nth($list, $index));
    }

    @return $result-list;
}

@function pow($number, $exp) {
    $value: 1;
    
    @if $exp > 0 {
        // If the exponent is positive, multiply.
        @for $i from 1 through $exp {
           $value: $value * $number;
        }
    }
    @else if $exp < 0 {
        // If the exponent is negative, divide.
        @for $i from 1 through -$exp {
            $value: $value / $number;
        }
    }

    @return $value;
}

@function __parse-float($value) {
    @if type-of($value) == number {
        @return $value;
    }

    @return __to-number($value);
}

@function __is-length($value) {
    @return type-of($value) == number
        and $value > -1
        and $value % 1 == 0
        and $value < (pow(2, 53) - 1);
}

@function __is-index($value, $length: null) {
    $value: __parse-float($value);

    @debug $value, $length, $value <= $length;
    
    @return $value > 0
        and $value % 1 == 0
        and ($length == null or $value <= $length);
}

@function __create-cache($values) {
    @return new(SetCache, $values);
}

@function __to-map($value) {
    @if (type-of($value) == string) {
        $index: 1;
        $length: str-length($value);
        $result: ();

        @while ($index <= $length) {
            $result: set($result, $index, __char-at($string, $index));
        }

        @return $result;
    } @else if (type-of($value) == list) {
        $index: 1;
        $length: length($value);
        $result: ();

        @while ($index <= $length) {
            $result: set($result, $index, nth($value, $index));

            $index: $index + 1;
        }

        @return $result;
    } @else if (type-of($value) == map) {
        @return $value;
    }
}




@function __keys-in($map) {
    $map: __to-map($map);
    $skip-keys: ('_type', '_constructor', '_extends');

    @return __without(map-keys($map), $skip-keys...);
}

@function __keys($map) {
    // currently the same as __keys-in
    @return __keys-in($map);
}

@function __base-for($map, $iteratee, $keys-function) {
    $index: 1;
    $iterable: __to-map($map);
    $props: call($keys-function, $iterable);
    $length: length($props);
    $result-map: ();

    $break: false;

    @while ($index <= $length and not $break) {
        $key: nth($props, $index);

        $iteration: __call($iteratee, null, get($iterable, $key), $key, $iterable);

        @if ($iteration == false) {
            $break: true;
        } @else {
            $result-map: set($result-map, $key, $iteration);
        }

        $index: $index + 1;
    }

    @return $result-map;
}

@function __base-for-own($map, $iteratee) {
    @return __base-for($map, $iteratee, __keys);
}

@function __is-strict-comparable($value) {
    @return true;
}

@function __is-list-like($value) {
    // TODO
    @return __is-list($value);
}

@function __get-index-of() {
    @return '__base-index-of';
}

@function __identity($value, $args...) {
    @return $value;
}

@function __native-min($args...) {
    @return min($args...);
}

@function __native-max($args...) {
    @return max($args...);
}

@function __native-is-finite($value) {
    // todo
    @return true;
}

@function __repeat($string, $value: 1) {
    $result: '';

    @for $iteration from 1 through $value {
        $result: $result + $string;
    }

    @return $result;
}

// @debug __repeat('abc', 4);

@function __noop($args...) {
    @return null;
}

@function __is-ctor($ctor) {
    // todo
    @return function-exists($ctor);
}

@function __string-split($string, $delimiter: '') {
    @if (not $delimiter)
        or (length($delimiter) == 0)
        or ($delimiter == '')
    {
        @return __to-list($string);
    }

    $delimiter-index: str-index($string, $delimiter);

    @if not ($delimiter-index) {
        @return $string;
    }

    @return join(
        str-slice($string, 1, $delimiter-index - 1),
        __string-split(
            str-slice($string, $delimiter-index + length($delimiter-index)),
            $delimiter));
} 

// @debug __string-split('asd,qwe,zxc,rty,fgh,234', ',');
// @debug __string-split('abcde');

@function __is-falsey($value) {
    @if ($value == null)
        or ($value == '')
        or ($value == "")
        or ($value == $__undefined__)
        or ($value == 0)
        or not ($value)
    {
        @return true;
    }

    @return if($value, false, true);
}

@function __is-truthy($value) {
    @return $value and not __is-falsey($value);
}

@function either($this, $that) {
    $this-bool: if(__is-truthy($this), true, false);

    @return if($this-bool, $this, $that);
}

@function __splice($list, $start, $delete-count: 1, $items...) {
    $result: ();
    $index: 1;

    @while ($index < $start) {
        $result: append($result, nth($list, $index));

        $index: $index + 1;
    }

    $index: $start + $delete-count;

    @while ($index <= length($list)) {
        $result: append($result, nth($list, $index));

        $index: $index + 1;
    }

    @return $result;
}

// @debug __splice((10 20 30 40 50 60), 3, 2);

@function __get-length($list, $args...) {
    @return length($list);
}

