

@function pow($number, $exp) {
    $value: 1;

    @if $exp > 0 {
        @for $i from 1 through $exp {
            $value: $value * $number;
        }
    } @else if $exp < 0 {
        @for $i from 1 through -$exp {
            $value: $value / $number;
        }
    }

    @return $value;
}

@function __unit($value) {
    $result: false;
    $units: 'px' 'cm' 'mm' '%' 'ch' 'pica' 'in' 'em' 'rem' 'pt' 'pc' 'ex' 'vw' 'vh' 'vmin' 'vmax';
    $index: 1;
    $length: length($units);

    @if __is-number($value) {
        $result: unit($value);
    } @else if __is-string($value) {
        @while $index <= $length and not $result {
            $unit: nth($units, $index);

            $result: if(__ends-with($value, $unit), $unit, false);

            $index: $index + 1;
        }
    }

    @return $result;
}

@function __parse-float($string) {
    @if not __is-string($string) {
        @return $string;
    }

    @if __is-falsey($string) {
        @return 0;
    }

    $string: __trim($string);
    $result: 0;
    $exponent: 0;
    $radix: false;
    $multiplier: if(__starts-with($string, '-'), -1, 1);

    $char-min: __get-char-code(0);
    $char-max: __get-char-code(9);
    $char-radix: __get-char-code('.');

    @each $char-code in __map($string, __get-char-code) {
        @if $char-code >= $char-min and $char-code <= $char-max {
            $result: (10 * $result) + ($char-code - $char-min);

            @if $radix {
                $exponent: $exponent + 1;
            }
        } @else if $char-code == $char-radix {
            $radix: true;
        }
    }

    @return $multiplier * $result / pow(10, $exponent);
}

