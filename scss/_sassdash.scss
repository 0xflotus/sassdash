
@import 'static/module';
@import 'constants/module';
@import 'helpers/module';
@import 'api/module';
@import 'utilities/module';


// SASSDASH
// ========

@function __args-to-map($args) {
    // todo
}




@function __base-bind-all() {
    // todo
}

@function __compose-args($args, $partials, $holders) {
    $holders-length: length($holders);
    $args-index: 1;
    $args-length: max(length($args) - $holders-length, 0);
    $left-index: 1;
    $left-length: length($partials);
    $result: ();

    @while ($left-index <= $left-length) {
        $result: set($result, $left-index, nth($partials, $left-index));

        $left-index: $left-index + 1;
    }
    @while ($args-index <= $holders-length) {
        $result: set($result, nth($holders, $args-index), nth($args, $args-index));

        $args-index: $args-index + 1;
    }
    @while ($args-length > 0) {
        $result: set($result, $left-index, nth($args, $args-index));

        $left-index: $left-index + 1;
        $args-index: $args-index + 1;
        $args-length: $args-length - 1;
    }

    @return $result;
}

@function __compose-args-right() {
    // TODO
}

@function __merge-data() {}

@function __bind-all() {} // todo

@function __bind-key() {} // todo

@function __curry() {} // todo

@function __curry-right() {} // todo

@function __memoize() {} // todo

@function __rearg() {} // todo

@function debug($value, $args...) { @debug $value; @return true; }

@function __value($value) {
    @if instanceof($value, SassdashWrapper) {
        @return get($value, '__wrapped__');
    }

    @return $value;
}

@function __deburr($string) {
    // todo
    @return $string;
}

// Aliases
// =======

// // Add functions that return wrapped values when chaining
@function _bind-all($args...) { @return call(__bind-all, $args...); }
@function _bind-key($args...) { @return call(__bind-key, $args...); }
// @function _chain($args...) { @return call(__chain, $args...); }
@function _curry($args...) { @return call(__curry, $args...); }
@function _curry-right($args...) { @return call(__curry-right, $args...); }
// @function _debounce($args...) { @return call(__debounce, $args...); }
// @function _defer($args...) { @return call(__defer, $args...); }
// @function _delay($args...) { @return call(__delay, $args...); }
// @function _memoize($args...) { @return call(__memoize, $args...); }
// @function _mixin($args...) { @return call(__mixin, $args...); }
@function _rearg($args...) { @return call(__rearg, $args...); }
// @function _remove($args...) { @return call(__remove, $args...); }
@function _tap($args...) { @return call(__tap, $args...); }
@function _throttle($args...) { @return call(__throttle, $args...); }
@function _thru($args...) { @return call(__thru, $args...); }
// @function _to-plain-map($args...) { @return call(__to-plain-map, $args...); }
// @function _transform($args...) { @return call(__transform, $args...); }

@function _wrap($args...) { @return call(__wrap, $args...); }


// Add aliases 

// Add functions that return unwrapped values when chaining.
// @function _attempt($args...) { @return call(__attempt, $args...); }

// @function _deburr($args...) { @return call(__deburr, $args...); }
// @function _escape-reg-exp($args...) { @return call(__escape-reg-exp, $args...); }

// @function _no-conflict($args...) { @return call(__no-conflict, $args...); }
// @function _now($args...) { @return call(__now, $args...); }



// Add aliases.

// Add functions capable of returning wrapped and unwrapped values when chaining.

// Add custom Sassdash functions.
@function _value($args...) { @return call(__value, $args...); }



// Sassdash pseudo-chainable wrapper-value function.
@function _($value, $method-calls...) {
    $result: $value;

    @each $method-call in $method-calls {
        $method: __first($method-call);
        $args: __drop($method-call);

        $method: if(__starts-with($method, '_'), $method, '_' + $method);

        $result: __exec($method, $result, $args...);
    }

    @return $result;
}