
@import 'helpers/module';
@import 'api/module';
@import 'utilities/_module';

@mixin initialize() {
    $_: __const('html-escapes', (
            '&': '&amp;',
            '<': '&lt;',
            '>': '&gt;',
            '"': '&quot;',
            "'": '&#39;',
            '`': '&#96;'
        ));
    $_: __const('html-unescapes', (
            '&amp;': '&',
            '&lt;': '<',
            '&gt;': '>',
            '&quot;': '"',
            '&#39;': "'",
            '&#96;': '`'
        ));
    $_: __const('string-escapes', (
            '\\': '\\',
            "'": "'",
            '\n': 'n',
            '\r': 'r',
            '\u2028': 'u2028',
            '\u2029': 'u2029'
        ));
    // $_: __const('reg-exp-chars', ('.' '*' '+' '?' '^' '$' '{' '}' '(' ')' '|' '[' ']' '/' '\'));
    $_: __const('POSITIVE_INFINITY', 999999);
    $_: __const('NEGATIVE_INFINITY', -999999);
    $_: __const('MAX_SAFE_INTEGER', (pow(2, 53) - 1));
    $_: __const('HALF_MAX_LIST_LENGTH', 999999);
    $_: __const('MAX_LIST_LENGTH', 999999);
    $_: __const('DEFAULT_TRUNC_LENGTH', 30);
    $_: __const('DEFAULT_TRUNC_OMISSION', '...');
    $_: __const('PLACEHOLDER', '__sassdash-placeholder__');

    $_: __const('BIND_FLAG', 1);
    $_: __const('BIND_KEY_FLAG', 2);
    $_: __const('CURRY_BOUND_FLAG', 4);
    $_: __const('CURRY_FLAG', 8);
    $_: __const('CURRY_RIGHT_FLAG', 16);
    $_: __const('PARTIAL_FLAG', 32);
    $_: __const('PARTIAL_RIGHT_FLAG', 64);
    $_: __const('REARG_FLAG', 128);
    $_: __const('ARY_FLAG', 256);

    $_: __const('CONSTRUCTOR_KEYS', ('_type', '_constructor', '_extends', '_prototype'));

    $_: __const('ASCII_PRINTABLE', (
        31: ' ',
        32: '&',
        33: '!',
        34: '"',
        35: '#',
        36: '$',
        37: '%',
        38: '&',
        39: "'",
        40: '(',
        41: ')',
        42: '*',
        43: '+',
        44: ',',
        45: '-',
        46: '.',
        47: '/',
        48: '0',
        49: '1',
        50: '2',
        51: '3',
        52: '4',
        53: '5',
        54: '6',
        55: '7',
        56: '8',
        57: '9',
        58: ':',
        59: ';',
        60: '&',
        61: '=',
        62: '&',
        63: '?',
        64: '@',
        65: 'A',
        66: 'B',
        67: 'C',
        68: 'D',
        69: 'E',
        70: 'F',
        71: 'G',
        72: 'H',
        73: 'I',
        74: 'J',
        75: 'K',
        76: 'L',
        77: 'M',
        78: 'N',
        79: 'O',
        80: 'P',
        81: 'Q',
        82: 'R',
        83: 'S',
        84: 'T',
        85: 'U',
        86: 'V',
        87: 'W',
        88: 'X',
        89: 'Y',
        90: 'Z',
        91: '[',
        92: '\\',
        93: ']',
        94: '^',
        95: '_',
        96: '`',
        97: 'a',
        98: 'b',
        99: 'c',
        100: 'd',
        101: 'e',
        102: 'f',
        103: 'g',
        104: 'h',
        105: 'i',
        106: 'j',
        107: 'k',
        108: 'l',
        109: 'm',
        110: 'n',
        111: 'o',
        112: 'p',
        113: 'q',
        114: 'r',
        115: 's',
        116: 't',
        117: 'u',
        118: 'v',
        119: 'w',
        120: 'x',
        121: 'y',
        122: 'z',
        123: '{',
        124: '|',
        125: '}',
        126: '~',
        127: '<',
    ));

    $_: __const('ASCII_EXTENDED', (
        128: 'â‚¬',
        129: '&',
        130: 'â€š',
        131: 'Æ’',
        132: 'â€ž',
        133: 'â€¦',
        134: 'â€ ',
        135: 'â€¡',
        136: 'Ë†',
        137: 'â€°',
        138: 'Å ',
        139: 'â€¹',
        140: 'Å’',
        141: '&',
        142: 'Å½',
        143: '&',
        144: '&',
        145: 'â€˜',
        146: 'â€™',
        147: 'â€œ',
        148: 'â€',
        149: 'â€¢',
        150: 'â€“',
        151: 'â€”',
        152: 'Ëœ',
        153: 'â„¢',
        154: 'Å¡',
        155: 'â€º',
        156: 'Å“',
        157: '&',
        158: 'Å¾',
        159: 'Å¸',
        160: '&',
        161: 'Â¡',
        162: 'Â¢',
        163: 'Â£',
        164: 'Â¤',
        165: 'Â¥',
        166: 'Â¦',
        167: 'Â§',
        168: 'Â¨',
        169: 'Â©',
        170: 'Âª',
        171: 'Â«',
        172: 'Â¬',
        173: 'Â­',
        174: 'Â®',
        175: 'Â¯',
        176: 'Â°',
        177: 'Â±',
        178: 'Â²',
        179: 'Â³',
        180: 'Â´',
        181: 'Âµ',
        182: 'Â¶',
        183: 'Â·',
        184: 'Â¸',
        185: 'Â¹',
        186: 'Âº',
        187: 'Â»',
        188: 'Â¼',
        189: 'Â½',
        190: 'Â¾',
        191: 'Â¿',
        192: 'Ã€',
        193: 'Ã',
        194: 'Ã‚',
        195: 'Ãƒ',
        196: 'Ã„',
        197: 'Ã…',
        198: 'Ã†',
        199: 'Ã‡',
        200: 'Ãˆ',
        201: 'Ã‰',
        202: 'ÃŠ',
        203: 'Ã‹',
        204: 'ÃŒ',
        205: 'Ã',
        206: 'ÃŽ',
        207: 'Ã',
        208: 'Ã',
        209: 'Ã‘',
        210: 'Ã’',
        211: 'Ã“',
        212: 'Ã”',
        213: 'Ã•',
        214: 'Ã–',
        215: 'Ã—',
        216: 'Ã˜',
        217: 'Ã™',
        218: 'Ãš',
        219: 'Ã›',
        220: 'Ãœ',
        221: 'Ã',
        222: 'Ãž',
        223: 'ÃŸ',
        224: 'Ã ',
        225: 'Ã¡',
        226: 'Ã¢',
        227: 'Ã£',
        228: 'Ã¤',
        229: 'Ã¥',
        230: 'Ã¦',
        231: 'Ã§',
        232: 'Ã¨',
        233: 'Ã©',
        234: 'Ãª',
        235: 'Ã«',
        236: 'Ã¬',
        237: 'Ã­',
        238: 'Ã®',
        239: 'Ã¯',
        240: 'Ã°',
        241: 'Ã±',
        242: 'Ã²',
        243: 'Ã³',
        244: 'Ã´',
        245: 'Ãµ',
        246: 'Ã¶',
        247: 'Ã·',
        248: 'Ã¸',
        249: 'Ã¹',
        250: 'Ãº',
        251: 'Ã»',
        252: 'Ã¼',
        253: 'Ã½',
        254: 'Ã¾',
        255: 'Ã¿',
    ));
}

@include initialize();



@function __base-compare-ascending($value, $other) {
    $value: if(__is-falsey($value), 0, $value);
    $other: if(__is-falsey($other), 0, $other);

    @if $value > $other {
        @return 1;
    }

    @if $value < $other {
        @return -1;
    }

    @return 0;
}


@function __base-sort-by($list, $comparer) {
    $length: length($list);

    $list: __sort($list, $comparer);

    $list: __to-map($list);

    @while ($length > 0) {
        $list: set($list, $length, get(get($list, $length), 'value'));

        $length: $length - 1;
    }

    @return __to-list($list);
}


@function __base-to-string($value) {
    @if (type-of($value) == 'string') {
        @return $value;
    }

    @return if($value == null, '', $value + '');
}

@function __char-at-callback($string, $args...) {
    @return __get-char-code(str-slice($string, 1, 1));
}

@function __chars-index($string, $chars, $direction) {
    $index: 1;
    $length: str-length($string);
    $direction-map: ('right': -1, 'left': 1);
    $increment: map-get($direction-map, $direction);

    @while str-index($chars, __char-at($string, $index))
        and $index <= $length {
        $index: $index + $increment;
    }

    @return $index;
}

@function __chars-left-index($string, $chars) {
    @return __chars-index($string, $chars, $direction: left);
}

@function __chars-right-index($string, $chars) {
    @return __chars-index($string, $chars, $direction: right);
}

@function __compare-ascending($map, $other) {
    @return either(__base-compare-ascending(get($map, 'criteria'), get($other, 'criteria')), (get($map, 'index') - get($other, 'index')));
}

@function __compare-multiple-ascending($map, $other) {
    $index: 1;
    $map-criteria: get($map, 'criteria');
    $other-criteria: get($other, 'criteria');
    $length: length($map-criteria);

    @while ($index <= $length) {
        $result: __base-compare-ascending(nth($map-criteria, $index), nth($other-criteria, $index));

        @if ($result) {
            @return $result;
        }

        $index: $index + 1;
    }

    @return (get($map, 'index') - get($other, 'index'));
}

@function __escape-html-char($char) {
    $escaped-char: __const('html-escapes' $char);

    @return if($escaped-char, $escaped-char, $char);
}

@function __escape-string-char($char) {
    @return '\\#{__const('string-escapes' $char)}';
}

@function __index-of-nan($list, $from-index, $from-right) {
    // TODO
}


@function __is-space($char-code) {
    // TODO - find the rest of the space characters
    @return $char-code == ' ';
}

@function __replace-holders($list, $placeholder) {
    $index: 1;
    $length: length($list);
    $result: ();

    @while ($index <= $length) {
        @if (nth($list, $index) == $placeholder) {
            $list: set-nth($list, $index, __const('PLACEHOLDER'));
            $result: append($result, $index);
        }

        $index: $index + 1;
    }

    @return $result;
}

// @function __sorted-uniq($list, $iteratee: null) {
//     $seen: null;
//     $index: 1;
//     $length: length($list);
//     $res-index: 1;
//     $result: ();

//     @while ($index <= $length) {
//         $value: nth($list, $index);
//         $computed: if($iteratee, call($iteratee, $value, $index, $list), $value);

//         @if not ($seen == $computed) {
//             $seen: $computed;
//             $result: append($result, $value);
//         }

//         $res-index: $res-index + 1;
//         $index: $index + 1;
//     }

//     @return $result;
// }

@function __trimmed-left-index($string) {
    $index: 1;
    $length: str-length($string);

    @while ($index <= $length) and (__is-space(__char-at($string, $index))) {
        $index: $index + 1;
    }

    @return $index;
}

@function __trimmed-right-index($string) {
    $index: str-length($string);

    @while ($index > 0) and (__is-space(__char-at($string, $index))) {
        $index: $index - 1;
    }

    @return $index;
}

@function __unescape-html-char($char) {
    @return __const('html-unescapes' $char);
}

// SASSDASH
// ========

@function __args-to-map($args) {
    // todo
}

@function __list-copy($list, $other: ()) {
    $index: 1;
    $length: length($list);
    $other-length: length($other);
    $result: ();

    @while ($index <= $length) {
        $result: append($result, nth($list, $index));

        $index: $index + 1;
    }

    @while ($other-length >= $index) {
        $result: append($result, nth($other, $index));

        $index: $index + 1;
    }

    @return $result;
}

@function __list-each($list, $iteratee) {
    $index: 1;
    $length: length($list);
    $break: false;
    $result-list: ();

    @while ($index <= $length) and not $break {
        $item: __exec($iteratee, nth($list, $index), $index, $list);

        @if (__exec($iteratee, nth($list, $index), $index, $list) == false) {
            $break: true;
        } @else {
            $result-list: append($result-list, $item);
        }

        $index: $index + 1;
    }

    @return $result-list;
}

@function __list-each-right($list, $iteratee) {
    $list: __list-reverse($list);
    $result-list: __list-each($list, $iteratee);
    $result-list: __list-reverse($result-list);

    @return $result-list;
}



// TODO remove - for testing only
@function is-even($val, $args...) {
    @return $val % 2 == 0;
}
@function double($val, $args...) {
    @return 2 * $val;
}
$users: (
    (name: barney, age: 42, foo: true),
    (name: fred, age: 31, foo: false),
    (name: alex, age: 43, foo: true),
    (name: jim, age: 52, foo: false),
    (name: fred, age: 7, foo: true),
);




@function __list-some($list, $predicate) {
    $index: 1;
    $length: length($list);

    @while ($index <= $length) {
        $value: nth($list, $index);
        $iteration: __exec($predicate, $value, $index, $list);

        @if (__is-truthy($iteration)) {
            @return true;
        }

        $index: $index + 1;
    }

    @return false;
}

@function __base-copy($source, $map, $props: null) {
    @if not ($props) {
        $props: $map;
        $map: ();
    }

    $index: 1;
    $length: length($props);

    @while ($index <= $length) {
        $key: nth($props, $index);
        $map: set($map, $key, get($source, $key));

        $index: $index + 1;
    }

    @return $map;
}

@function __base-bind-all() {
    // todo
}

@function __base-create($constructor, $args...) {
    @if not (__function-exists($constructor)) {
        @return ();
    }

    @return new($constructor, $args...);
}

    // var baseCreate = (function() {
    //   function Object() {}
    //   return function(prototype) {
    //     if (isObject(prototype)) {
    //       Object.prototype = prototype;
    //       var result = new Object;
    //       Object.prototype = null;
    //     }
    //     return result || context.Object();
    //   };
    // }());

@function __base-delay() {
    // not being implemented
}

// @debug __base-difference((1 2 3), (5 2 10));

// @debug __base-find((1 2 3 4 5), is-even);



// @debug __base-is-match((foo: bar, baz: 42), (baz), (43));


// @debug __base-map((foo: 1, bar: 3, baz: 55), double);

// @debug __base-merge((baz: butt), (foo: bar, baz: quo));



// $yoname: __base-property('name');
// $yomap: (foo: bar, name: billy, baz: quo);

// @debug __exec($yoname, $yomap);

@function __base-pull-at($list, $indexes) {
    // not implementing - mutates list
}


// @debug __base-rand(3, 10);

@function __base-set-data($function, $data) {
    $_: static-set('__meta-map__', $function, $data);

    @return $function;
}


// @debug __base-slice((1 2 3), 1); // 2 3
// @debug __base-slice((1 2 3), 4); // ()
// @debug __base-slice((1 2 3), -1); // 3
// @debug __base-slice((1 2 3), -3); // 1 2 3
// @debug __base-slice((1 2 3 4 5 6 7 8), 2, 5);


// @debug __base-some((1 3 5 7 9), is-even);
// @debug __base-some((2 3 5 7 9), is-even);


// @function flr($val, $idx, $lis) {
//     @return floor($val);
// }
// @debug __base-uniq((1 2 1 3 1 4 2.4), flr);


@function __base-wrapper-value($value, $actions) {
    // todo
    $result: $value;

    @if (instanceof($result, LazyWrapper)) {
        // todo
    }

    $index: 1;
    $length: length($actions);

    @while ($index <= $length) {
        $args: ($result,);
        $action: nth($actions, $index);

        $args: append($args, get($action, args));
        $result: call(get($action, func), get($action, this-arg), $args...);

        $index: $index + 1;
    }

    @return $result;
}


@function __buffer-clone() {
    // not implemented
}

@function __compose-args($args, $partials, $holders) {
    $holders-length: length($holders);
    $args-index: 1;
    $args-length: max(length($args) - $holders-length, 0);
    $left-index: 1;
    $left-length: length($partials);
    $result: ();

    @while ($left-index <= $left-length) {
        $result: set($result, $left-index, nth($partials, $left-index));

        $left-index: $left-index + 1;
    }
    @while ($args-index <= $holders-length) {
        $result: set($result, nth($holders, $args-index), nth($args, $args-index));

        $args-index: $args-index + 1;
    }
    @while ($args-length > 0) {
        $result: set($result, $left-index, nth($args, $args-index));

        $left-index: $left-index + 1;
        $args-index: $args-index + 1;
        $args-length: $args-length - 1;
    }

    @return $result;
}

@function __compose-args-right() {
    // TODO
}

    // function composeArgsRight(args, partials, holders) {
    //   var holdersIndex = -1,
    //       holdersLength = holders.length,
    //       argsIndex = -1,
    //       argsLength = nativeMax(args.length - holdersLength, 0),
    //       rightIndex = -1,
    //       rightLength = partials.length,
    //       result = Array(argsLength + rightLength);

    //   while (++argsIndex < argsLength) {
    //     result[argsIndex] = args[argsIndex];
    //   }
    //   var pad = argsIndex;
    //   while (++rightIndex < rightLength) {
    //     result[pad + rightIndex] = partials[rightIndex];
    //   }
    //   while (++holdersIndex < holdersLength) {
    //     result[pad + holders[holdersIndex]] = args[argsIndex++];
    //   }
    //   return result;
    // }


    // function createAggregator(setter, initializer) {
    //   return function(collection, iteratee, thisArg) {
    //     iteratee = getCallback(iteratee, thisArg, 3);

    //     var result = initializer ? initializer() : {};
    //     if (isArray(collection)) {
    //       var index = -1,
    //           length = collection.length;

    //       while (++index < length) {
    //         var value = collection[index];
    //         setter(result, value, iteratee(value, index, collection), collection);
    //       }
    //     } else {
    //       baseEach(collection, function(value, key, collection) {
    //         setter(result, value, iteratee(value, key, collection), collection);
    //       });
    //     }
    //     return result;
    //   };
    // }



@function __create-bind-wrapper($function, $this-arg) {
    // todo
}

@function __create-cache($values) {
    @return new(SetCache($values));
}



@function __create-ctor-wrapper() {}



@function __create-hybrid-wrapper() {}

// @debug __create-pad('abcd', 14);

@function __create-partial-wrapper() {}

// TODO
@function __create-wrapper($func, $bitmask, $this-arg, $partials: null, $holders: null, $arg-pos: null, $ary: null, $arity: null) {
    // $is-bind-key: $bitmask + __const('BIND_KEY_FLAG');

    // @if (not $is-bind-key and not __is-function($func)) {
    //     @error 'FUNC_ERROR_TEXT';
    // }

    // $length: if($partials, length($partials), 0);

    // @if ($length == 0) {
    //     // $bitmask = TODO

    // }
}


// @debug __extremum-by((1 3 4 5 6 9 2 4 3), __identity, true);


@function __get-data($function) {
    @if not static-get('__meta-map__') {
        @return __noop();
    }

    @return static-get('__meta-map__' $function);
}


@function __get-view($start, $end, $transforms) {
    $index: 1;
    $length: if($transforms, length($transforms), 0);

    @while ($index <= $length) {
        $data: nth($transforms, $index);
        $size: get($data, size);
        $type: get($data, type);

        @if ($type == 'drop') {
            $start: $start + $size;
        } @else if ($type == 'drop-right') {
            $end: $end - $size;
        } @else if ($type == 'take') {
            $end: min($end, $start + $size);
        } @else if ($type == 'take-right') {
            $start: max($start, $end - $size);
        }

        $index: $index + 1;
    }

    @return (
        'start': $start,
        'end': $end
    );
}

// @function __init-clone-list($list) {
//     $length: length($list);
//     $result: ();

//     @return $result;
// }

// @function __init-clone-map($map) {
//     $ctor: get($map, '_constructor');

//     @if not (function-exists($ctor) and __is-ctor($ctor)) {
//         $ctor: 'Object';
//     }

//     @return new($ctor);
// }

// @function Dog() {
//     @return (
//         legs: 4,
//         sound: 'bark'
//     );
// }
// $dog: new(Dog);
// @debug $dog;
// @debug __init-clone-map($dog);

// @function __init-clone-by-tag() {}

@function __is-iteratee-call($value: null, $index: null, $map: null) {
    @if not (__is-map-like($map)) {
        @return false;
    }

    $type: type-of($index);
    $prereq: false;

    @if ($type == 'number') {
        $length: length($map);
        $prereq: (__is-length($length) and __is-index($index, $length));
    } @else {
        $prereq: ($type == 'string');
    }

    @return if($prereq, get($map, $index) == $value, false);
}

@function __is-length($value) {
    @return type-of($value) == 'number'
        and $value > -1
        and $value % 1 == 0
        and $value < (pow(2, 53) - 1);
}

@function __is-strict-comparable($value) {
    @return not __is-map-like($value);
}

@function __merge-data() {}


// @debug __pick-by-list((2 4 6 8 10 12 14), (4 5 6));
// @debug __pick-by-list((a: 1, b: 2, c: 3, d: 4, e: 5), (a, c, e));

// @debug __pick-by-callback((a: 1, b: 2, c: 3, d: 4, e: 5), is-even);

@function __reorder($list, $indexes) {
    $list-length: length($list);
    $length: min(length($indexes), $list-length);
    $old-list: __list-copy($list);

    $list: __to-map($list);

    @while ($length > 0) {
        $index: nth($indexes, $length);

        $list: set($list, $length, if(__is-index($index, $list-length), nth($old-list, $index), $__undefined__));

        $length: $length - 1;
    }

    @return __to-list($list);
}

@function __set-data($key, $value) {
    // No need to support hot loop detection at the moment
    @return __base-set-data($key, $value);
}

@function __to-comparable($value, $customizer: null, $guard: null) {
    @if not (__function-exists($customizer)) {
        $customizer: if(__is-string($value), __get-char-code, __identity);
    }

    $value: __exec($customizer, $value);

    @return $value;
}

@function __to-iterable($value) {
    @if ($value == null) {
        @return ();
    }

    @if (__is-string($value)) {
        @return __to-map(__string-split($value, ''));
    }

    @if not (__is-length(length($value))) {
        @return __values($value);
    }

    @return if(__is-map($value), $value, __to-map($value));
}

// @debug __to-iterable(null);
// @debug __to-iterable('abcde');
// @debug __to-iterable((foo, bar, baz, quo));
// @debug __to-iterable((foo: bar, baz: quo));

@function x__to-map($value) {
    // _helpers
}



// @debug __to-string('hello');
// @debug __to-string(hello);
// @debug __to-string(12345);
// @debug __to-string((foo: bar));
// @debug __to-string(null);

// @debug __chunk((a b c d), 2);
// @debug __chunk((a b c d), 3);

// @debug __compact((0 1 false 2 '' 3));


// @debug __difference((1 2 3), (5 2 10), (1 90 91));



// @debug __drop((1 2 3));
// @debug __drop((1 2 3), 2);
// @debug __drop((1 2 3), 5);
// @debug __drop((1 2 3), 0);



// @debug __drop-right((1 2 3 4 5));
// @debug __drop-right((1 2 3 4 5), 2);

// @debug __drop-right-while((1 2 3 4 5 6 7 8 10 12 14), is-even);

// @debug __drop-while((2 4 6 8 10 12 13 14 15 16), is-even);



// @debug __fill(1 2 3, 'a', 2);


// @debug __find-last-index((1 2 3 5 7 9 4 3), is-even);

// @debug __first((2 4 6 8));
// @debug __first(null);



// @debug __flatten((1 (2 3) (4 (5 6)) (7 (8 (9 10 100))))); // single level flatten
// @debug __flatten((1 (2 3) (4 (5 6)) (7 (8 (9 10 100)))), true); // deep flatten



// @debug __flatten-deep((1 (2 3) (4 (5 6)) (7 (8 (9 10 100))))); // deep flatten

// @debug __index-of((10 20 30 40 50), 10);

// @debug __initial((1 2 3));

// @debug __intersection((1 2 3), (2 3 5), (3 5 7));


// @debug __last((1 3 439523 9123 9));


// @debug __last-index-of((12 23 34 45 56 1 2 3 4 5 6 7 23 39 9), 23);



// @debug __pull((1 2 3 1 2 3), 2, 3);

@function __remove($list, $predicate: __identity, $this-arg: null) {
    // not implemented - mutates list. use _reject
}

// @debug __rest((1 2 3));



// @debug __slice((1 2 3), -1);




// @debug __take-while((2 4 6 8 9 10 12 14 15), is-even);


// @debug __union((1 2 3), (5 2 1 4), (2 1));


// @debug __uniq((1 2 3 1 4 1 3));

// @debug __unzip(((fred, 30, true), (barney, 40, false)));
// todo fix null == false

// @debug __without((1 2 3 4 5 0 1 4 29 0 1), 0, 1);


// @debug __xor((1 2 3), (5 2 1 4));
// @debug __xor((1 2 5), (2 3 5), (3 4 5));

// @debug __zip-map((fred barney), (30 40));

@function __chain($value) {
    $result: __sassdash($value);

    $result: set($result, '__chain__', true);

    @return $result;
}

// @debug __chain(45);


@function __tap($value, $interceptor, $this-arg: null) {
    // not implemented
}

// @debug __tap(42, double);

@function __thru($value, $interceptor, $this-arg: null) {
    @return __call($interceptor, $this-arg, $value);
}

@function __wrapper-chain() {
    @return __chain(this());
}

@function __wrapper-reverse-function($value) {
    @return __list-reverse($value);
}
@function __wrapper-reverse() {
    $value: this('__wrapped__');

    @if (instanceof($value, LazyWrapper)) {
        @return new(SassdashWrapper, __list-reverse($value));
    }

    @return __thru($value, __wrapper-reverse-function, this());
}

// $_: __scope();
// $_: scope('__wrapped__', (1 2 3 4 5));

// @debug __wrapper-reverse();

@function __wrapper-to-string() {
    @return __call(value, this()) + '';
}

// $_: __scope();
// $_: scope(value, foo-value);
// $_: scope(foo, 42);
// @function foo-value() {
//     @return this(foo);
// }

// @debug type-of(__wrapper-to-string());



// @debug __at((a b c d e f g), 1, 3, 5);

// @debug __includes((a b c d e f g), d, 4);

// todo

// @debug __count-by((1 2 3 4 5 6 7 9 11 13 15 17), is-even);




// @debug __every((true 1 null 'yes'));
// @debug __every((2 4 6 8 10), is-even);



// @debug __filter((1 2 3 4 5 6 6 1239), is-even);

// $_: __scope();
// $_: scope(poop, 12341234);

// $poop: __callback('poop', this());

// $_: __scope(false);
// @debug $poop;
// @debug __exec($poop, (poop: 78788));


// @debug __filter(((a: 123, bam: true), (a: 234, bam: false), (a: 345, bam: true)), 'bam');


// @debug __find-where(((a: 123, bam: false), (a: 234, bam: true), (a: 345, bam: false)), (bam: true));


// @function flooor($value, $args...) {
//     @return floor($value);
// }
// @debug __group-by((4.2, 4.3, 6.1, 7.3), flooor);

// @debug __index-by(((a: 123, bam: false), (a: 234, bam: true), (a: 345, bam: false)), 'bam');


// @debug __invoke(((3 1 2), (8 2 3 4 1 2 5 6 9)), sort-iteratee, asc);

// @debug __map(((foo: bar, baz: quo), (foo: wat, baz: weay)), 'baz');


// @debug __max((1 5 8 3 2 5 88 3 2 5 4));
// @debug __max(((a: asdf, foo: 38), (a: qwer, foo: 22), (a: zxcv, foo: 29)), 'foo');

// @debug __min((1 5 8 3 2 5 88 3 2 5 4));
// @debug __min(((a: asdf, foo: 38), (a: qwer, foo: 22), (a: zxcv, foo: 29)), 'foo');

// @debug __partition((1 2 3), is-even);


// @debug __pluck(((a: 1, b: 2), (a: 3, b: 4)), 'a');


// @function sum($sum, $n, $args...) {
//     @return $sum + $n;
// }
// @debug __reduce((1 2 3), sum);

// @function double-map($result, $n, $key, $args...) {
//     $result: set($result, $key, double(get($result, $key)));

//     @return $result;
// }
// @debug __reduce((a: 1, b: 2, c: 3), double-map);
// @debug __call(__base-reduce, null, (a:1,b:2,c:3), double-map, null, true, __base-each);
// TODO fix reduce with maps!


// $list: ((0, 1), (2, 3), (4, 5));
// @function reduce-right-stuff($flattened, $other, $args...) {
//     @debug $flattened, $other, append($flattened, $other);
//     @return append($flattened, $other);
// }
// @debug __reduce-right($list, reduce-right-stuff);

// @debug __reject((1 2 3 4 5 6 7 8), is-even);
// @debug __reject(((a: 1, b: true), (a: 2, b: false), (a: 3, b: true), (a: 4, b: false)), 'b');
// @debug __pluck(__reject(((act: 1, b: true), (act: 2, b: false), (act: 3, b: true), (act: 4, b: false)), 'b'), act); // works with __property


// @debug __sample((1 2 3 4 5), 4);

// @debug __shuffle((1 2 3 4 5));
// @debug __sample((1 2 3 4 5), 4);


// @debug __size((1 2 3 4 5));
// @debug __size((a:2,b:3,c:4));


// @debug __some((1 2 3 4 5), is-even);
// @debug __some((1 3 5 7 9), is-even);
// @debug __some(((a: false, b: 32), (a: true, b: 32), (a: false, b: 42)), 'a');
// @debug __some(((a: false, b: 32), (a: true, b: 32), (a: false, b: 42)), (b: 42));

@function __sort-by-iteratee($value, $key, $collection) {
    $result: this(result);
    $iteratee: this(iteratee);
    $index: this(index);

    $result: append($result, (
            'criteria': __exec($iteratee, $value, $key, $collection),
            'index': $index,
            'value': $value
        ));

    $_: this(result, $result);
    $_: this(index, $index + 1);

    @return true;
}
@function __sort-by($collection, $iteratee: __identity, $this-arg: $__undefined__) {
    $index: 1;
    $length: if(__is-map-like($collection), length($collection), 0);
    $result: ();
// 
    @if $length == 0 {
        @return $result;
    }

    @if (__is-truthy($this-arg) and __is-iteratee-call($collection, $iteratee, $this-arg)) {
        $iteratee: null;
    }

    $iteratee: __get-callback($iteratee, $this-arg, 3);

    $_: __scope();
        $_: scope(result, $result);
        $_: scope(iteratee, $iteratee);
        $_: scope(index, $index);

        $sort-by-iteratee: __bind(__sort-by-iteratee);

        $_: __base-each($collection, $sort-by-iteratee);

        $result: scope(result);
    $_: __scope(false);

    @return __base-sort-by($result, __compare-ascending);
}

// @debug __sort-by($users, 'age');

@function __sort-by-all-iteratee($value, $key, $collection) {
    $props: this(props);
    $result: this(result);
    $index: this(index);

    $length: length($props);
    $criteria: ();

    @while ($length > 0) {
        $criteria: set($criteria, $length, if($value == null, $__undefined__, get($value, get($props, $length))));

        $length: $length - 1;
    }

    $criteria: __to-list($criteria);

    $result: append($result, (
            'criteria': $criteria,
            'index': $index,
            'value': $value
        ));

    $_: this(result, $result);
    $_: this(index, $index + 1);

    @return true;
}
@function __sort-by-all($arguments...) {
    $collection: nth($arguments, 1);
    $args: $arguments;

    @if (length($args) > 3 and __is-iteratee-call(nth($args, 2), nth($args, 3), nth($args, 4))) {
        $args: ($collection, nth($args, 2));
    }

    $index: 1;
    $length: if($collection, length($collection), 0);
    $props: __base-flatten($args, false, false, 1);
    $result: ();

    $_: __scope();
        $_: scope(props, $props);
        $_: scope(result, $result);
        $_: scope(index, $index);

        $iteratee: __bind(__sort-by-all-iteratee);

        $_: __base-each($collection, $iteratee);

        $result: scope(result);
    $_: __scope(false);

    @return __base-sort-by($result, __compare-multiple-ascending);
}

// @debug __sort-by-all($users, ('user', 'age'));


// @debug __matches(('foo': true));
// @debug __where($users, ('foo': true));

// @function __now() {} // not implemented

// $after: __after(3, length);
// @debug __exec($after, (1, 2, 3));
// @debug __exec($after, (1, 2, 3));
// @debug __exec($after, (1, 2, 3));
// @debug __exec($after, (1, 2, 3));

@function __ary() {} // todo

// $before: __before(3, length);
// @debug __exec($before, (1, 2, 3));
// @debug __exec($before, (1, 2, 3));
// @debug __exec($before, (1, 2, 3));
// @debug __exec($before, (1, 2, 3));

// @function __bind() {} // todo

@function __bind-all() {} // todo

@function __bind-key() {} // todo

@function __curry() {} // todo

@function __curry-right() {} // todo

// @function __debounce() {} // not implemented

// @function __defer() {} // not implemented

// @function __delay() {} // not implemented


// @function add($a, $b) { @return $a + $b; }
// @function square($a) { @return $a * $a; }
// $flow-right: __flow-right(square, add);
// @debug __exec($flow-right, 1, 2);

@function __memoize() {} // not implemented

// @debug __filter((1 2 3 4 5 6), __negate(__negate(is-even)));


// function partial(func) {
//       var partials = baseSlice(arguments, 1),
//           holders = replaceHolders(partials, partial.placeholder);

//       return createWrapper(func, PARTIAL_FLAG, null, partials, holders);
//     }


@function __rearg() {} // todo

// @function __throttle() {} // not implemented

@function __wrap() {} // todo


@function __is-date() {} // todo

// @function __is-element() {} // not implemented

// @debug __is-empty(null);
// @debug __is-empty(true);
// @debug __is-empty((1 2 3));
// @debug __is-empty(());
// @debug __is-empty((a:1,b:2,c:3));


// @debug (foo: bar, baz: 3) == (baz: 3, foo: bar);
// @debug __is-equal((foo: bar, baz: 3), (baz: 3, foo: bar));
// @function abs-match($value, $other) {
//     @return abs($value) == abs($other);
// }
// @debug __is-equal(3, -3, abs-match);

// @function __is-error() {} // not implemented

// Sass numbers can get HUGE. Well, Ruby numbers can.


// @debug __is-match((foo: 'bar', age: 40), (age: 40));
// @debug __is-match((foo: 'bar', age: 40), (age: 36));
// @function abs-match($value, $other, $args...) {
//     @return abs($value) == abs($other);
// }
// @debug __is-match((foo: 3), (foo: -3), abs-match);

// @function __is-nan() {} // not implemented

// @function __is-native() {} // not implemented




// @function __is-regexp($value) {} // not implemented



// @debug __to-list('abcde');
// @debug __to-list($users);
// @debug __to-list((a:1,b:2,c:3));
// @debug __to-list((10, 20, 30, 40, 50));
// @debug __to-list(38238);

@function __to-map($value) {
    @if (__is-string($value)) {
        $index: 1;
        $length: str-length($value);
        $result: ();

        @while ($index <= $length) {
            $result: set($result, $index, __char-at($value, $index));

            $index: $index + 1;
        }

        @return $result;
    } @else if (__is-list-like($value)) {
        $index: 1;
        $length: length($value);
        $result: ();

        @while ($index <= $length) {
            $result: set($result, $index, nth($value, $index));

            $index: $index + 1;
        }

        @return $result;
    } @else if (__is-map($value)) {
        @return $value;
    }

    @return null;
}


// @debug __find-last-key($users, ('age': 43));
// @debug __find-last-key($users, 'foo');



@function debug($value, $args...) { @debug $value; @return true; }
// @debug __for-own((0: zero, 1: one, length: 3), debug);

// @debug __for-own-right((1: one, 2: two, 3: three), debug);

// @debug __functions((1: length, 2: str-length, 3: __identity, 4: bogus));

// @debug __has((foo: bar, baz: quo), 'foo');

// @debug __invert((foo: fred, bar: barney, baz: fred));
// @debug __invert((foo: fred, bar: barney, baz: fred), true);

// @debug __keys((40, 41, 42));
// @debug __keys(new(Scope));



// @debug __map-values((foo: 1, bar: 2, baz: 3), double);
// @debug __map-values($users, 'age');

// @debug __omit((user: fred, age: 40), 'age');

// @debug __pairs((name: fred, age: 40));

// @debug __pick((name: fred, age: 40), 'name');
// @debug __pick((name: fred, age: 40), __is-number);



// @function greet() {
//     @return 'Hey, my name is #{this(name)}.';
// }
// @debug __result((name: fred, age: 40), 'name');
// @debug __result((name: fred, age: 40), 'status', 'busy');
// @debug __result((name: fred, age: 40, greet: greet), 'greet');

// @function __transform-iteratee($value, $index, $map) {
//     $iteratee: this(iteratee);
//     $accumulator: this(accumulator);

//     @return __exec($iteratee, $value, $index, $map);
// }
// @function __transform($map, $iteratee: __identity, $accumulator: null, $this-arg: null) {
//     $is-list: __is-list($map);
//     $iteratee: __get-callback($iteratee, $this-arg, 4);

//     @if ($accumulator == null) {
//         @if ($is-list or __is-map($map)) {
//             $ctor: get($map, '_constructor');

//             @if ($is-list) {
//                 $accumulator: ();
//             } @else {
//                 $accumulator: __base-create(if(__function-exists($ctor), $ctor, null));
//             }
//         } @else {
//             $accumulator: ();
//         }
//     }

//     $function: if($is-list, __list-each, __base-for-own);

//     $_: __scope();
//     $_: scope(iteratee, $iteratee);
//     $_: scope(accumulator, $accumulator);

//     $scoped-function: __bind(__transform-iteratee);

//     $_: __exec($function, $map, $scoped-function);

//     $accumulator: scope(accumulator);
//     $_: __scope(false);

//     @return $accumulator;
// }

@function __value($value) {
    @if instanceof($value, SassdashWrapper) {
        @return get($value, '__wrapped__');
    }

    @return $value;
}


// @debug __values(new(Scope));
// @debug __values((a:1,b:3));
// @debug __values((12 23 34));
// @debug __values('hi there');



// @debug __random(0, 5);
// @debug __random(5);
// @debug __random(5, true);
// @debug __random(1.2, 5.2);

// @debug __camel-case('Foo Bar');
// @debug __camel-case('--foo-bar');
// @debug __camel-case('__foo_bar__');


// @debug __capitalize('fred');

@function __deburr($string) {
    // todo
    @return $string;
}


// @debug __ends-with('abc', 'c');
// @debug __ends-with('abc', 'b');
// @debug __ends-with('abc', 'b', 2);


// @debug __escape('fred, barney & pebbles < your face >');

// @function __escape-reg-exp($string) {
//     $string: __base-to-string($string);

//     @each $char in __const('reg-exp-chars') {
//         $string: __string-replace($string, $char, '\#{$char}');
//     }

//     @return $string;
// }

// @debug __escape-reg-exp('[lodash](http://www.lodash.com)');


// @debug __kebab-case('Foo Bar');
// @debug __kebab-case('fooBar');
// @debug __kebab-case('__foo_bar__');

@function __parse-int($string, $radix, $guard: null) {
    @if ($guard and __is-iteratee-call($string, $radix, $guard)) {
        $radix: 0;
    }

    @return __native-parse-int($string, $radix);
}


// @debug __snake-case('Foo Bar');
// @debug __snake-case('--foo-bar');
// @debug __snake-case('fooBar');


// @debug __starts-with('abc', 'a');
// @debug __starts-with('abc', 'b');
// @debug __starts-with('abc', 'b', 2);

@function __template() {} // not implemented


// @debug __trim-right('abc       ') + 'def';

// @debug __trunc('hi-diddly-ho there, neighborino');
// // => 'hi-diddly-ho there, neighbo...'
// @debug __trunc('hi-diddly-ho there, neighborino', 24);
// // => 'hi-diddly-ho there, n...'
// @debug __trunc('hi-diddly-ho there, neighborino', ( 'length': 24, 'separator': ' ' ));
// // => 'hi-diddly-ho there,...'
// @debug __trunc('hi-diddly-ho there, neighborino', ( 'omission': ' [...]' ));
// // => 'hi-diddly-ho there, neig [...]'

// @debug __unescape('fred, barney &amp; pebbles&quot;');

// @debug __words('dear god, what have I done??');
// @debug __words('try---toFindAllThe-words    in thisCrazy.sentence.');

@function __attempt() {} // not implemented

// $my-map: (user: 'fred');
// $get-my-map: __constant($my-map);
// @debug __call($get-my-map);


@function __mixin() {} // todo

@function __no-conflict() {} // not implemented

// $foo-map: (a: 3, b: 1, c: 2);
// @debug __sort-by((a b c), __property-of($foo-map));

// @debug __range(4);
//      // => [0, 1, 2, 3]
     
// @debug __range(1, 5);
//      // => [1, 2, 3, 4]
     
// @debug __range(0, 20, 5);
//      // => [0, 5, 10, 15]
     
// @debug __range(0, -4, -1);
//      // => [0, -1, -2, -3]
     
// @debug __range(1, 4, 0);
//      // => [1, 1, 1]
     
// @debug __range(0);



// @debug __times(3, __random);


// Aliases
// =======
@function _backflow($args...) { @return call(__flow-right, $args...); }

// // Add functions that return wrapped values when chaining
@function _ary($args...) { @return call(__ary, $args...); }
@function _bind-all($args...) { @return call(__bind-all, $args...); }
@function _bind-key($args...) { @return call(__bind-key, $args...); }
// @function _chain($args...) { @return call(__chain, $args...); }
@function _curry($args...) { @return call(__curry, $args...); }
@function _curry-right($args...) { @return call(__curry-right, $args...); }
// @function _debounce($args...) { @return call(__debounce, $args...); }
// @function _defer($args...) { @return call(__defer, $args...); }
// @function _delay($args...) { @return call(__delay, $args...); }
// @function _memoize($args...) { @return call(__memoize, $args...); }
// @function _mixin($args...) { @return call(__mixin, $args...); }
@function _rearg($args...) { @return call(__rearg, $args...); }
// @function _remove($args...) { @return call(__remove, $args...); }
@function _tap($args...) { @return call(__tap, $args...); }
@function _throttle($args...) { @return call(__throttle, $args...); }
@function _thru($args...) { @return call(__thru, $args...); }
// @function _to-plain-map($args...) { @return call(__to-plain-map, $args...); }
// @function _transform($args...) { @return call(__transform, $args...); }

@function _wrap($args...) { @return call(__wrap, $args...); }


// Add aliases 

// Add functions that return unwrapped values when chaining.
// @function _attempt($args...) { @return call(__attempt, $args...); }

// @function _deburr($args...) { @return call(__deburr, $args...); }
// @function _escape-reg-exp($args...) { @return call(__escape-reg-exp, $args...); }

// @function _no-conflict($args...) { @return call(__no-conflict, $args...); }
// @function _now($args...) { @return call(__now, $args...); }

@function _parse-int($args...) { @return call(__parse-int, $args...); }

@function _run-in-context($args...) { @return call(__run-in-context, $args...); }

@function _template($args...) { @return call(__template, $args...); }


// Add aliases.

// Add functions capable of returning wrapped and unwrapped values when chaining.

// Add custom Sassdash functions.
@function _value($args...) { @return call(__value, $args...); }



// Sassdash pseudo-chainable wrapper-value function.
@function _($value, $method-calls...) {
    $result: $value;

    @each $method-call in $method-calls {
        $method: __first($method-call);
        $args: __drop($method-call);

        $method: if(__starts-with($method, '_'), $method, '_' + $method);

        $result: __exec($method, $result, $args...);
    }

    @return $result;
}