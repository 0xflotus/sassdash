
@import 'helpers/module';
@import 'api/module';
@import 'utilities/module';

@mixin initialize() {
    $_: __const('html-escapes', (
            '&': '&amp;',
            '<': '&lt;',
            '>': '&gt;',
            '"': '&quot;',
            "'": '&#39;',
            '`': '&#96;'
        ));
    $_: __const('html-unescapes', (
            '&amp;': '&',
            '&lt;': '<',
            '&gt;': '>',
            '&quot;': '"',
            '&#39;': "'",
            '&#96;': '`'
        ));
    $_: __const('string-escapes', (
            '\\': '\\',
            "'": "'",
            '\n': 'n',
            '\r': 'r',
            '\u2028': 'u2028',
            '\u2029': 'u2029'
        ));
    // $_: __const('reg-exp-chars', ('.' '*' '+' '?' '^' '$' '{' '}' '(' ')' '|' '[' ']' '/' '\'));
    $_: __const('POSITIVE_INFINITY', 999999);
    $_: __const('NEGATIVE_INFINITY', -999999);
    $_: __const('MAX_SAFE_INTEGER', (pow(2, 53) - 1));
    $_: __const('HALF_MAX_LIST_LENGTH', 999999);
    $_: __const('MAX_LIST_LENGTH', 999999);
    $_: __const('DEFAULT_TRUNC_LENGTH', 30);
    $_: __const('DEFAULT_TRUNC_OMISSION', '...');
    $_: __const('PLACEHOLDER', '__sassdash-placeholder__');

    $_: __const('BIND_FLAG', 1);
    $_: __const('BIND_KEY_FLAG', 2);
    $_: __const('CURRY_BOUND_FLAG', 4);
    $_: __const('CURRY_FLAG', 8);
    $_: __const('CURRY_RIGHT_FLAG', 16);
    $_: __const('PARTIAL_FLAG', 32);
    $_: __const('PARTIAL_RIGHT_FLAG', 64);
    $_: __const('REARG_FLAG', 128);
    $_: __const('ARY_FLAG', 256);

    $_: __const('CONSTRUCTOR_KEYS', ('_type', '_constructor', '_extends', '_prototype'));

    $_: __const('ASCII_PRINTABLE', (
        31: ' ',
        32: '&',
        33: '!',
        34: '"',
        35: '#',
        36: '$',
        37: '%',
        38: '&',
        39: "'",
        40: '(',
        41: ')',
        42: '*',
        43: '+',
        44: ',',
        45: '-',
        46: '.',
        47: '/',
        48: '0',
        49: '1',
        50: '2',
        51: '3',
        52: '4',
        53: '5',
        54: '6',
        55: '7',
        56: '8',
        57: '9',
        58: ':',
        59: ';',
        60: '&',
        61: '=',
        62: '&',
        63: '?',
        64: '@',
        65: 'A',
        66: 'B',
        67: 'C',
        68: 'D',
        69: 'E',
        70: 'F',
        71: 'G',
        72: 'H',
        73: 'I',
        74: 'J',
        75: 'K',
        76: 'L',
        77: 'M',
        78: 'N',
        79: 'O',
        80: 'P',
        81: 'Q',
        82: 'R',
        83: 'S',
        84: 'T',
        85: 'U',
        86: 'V',
        87: 'W',
        88: 'X',
        89: 'Y',
        90: 'Z',
        91: '[',
        92: '\\',
        93: ']',
        94: '^',
        95: '_',
        96: '`',
        97: 'a',
        98: 'b',
        99: 'c',
        100: 'd',
        101: 'e',
        102: 'f',
        103: 'g',
        104: 'h',
        105: 'i',
        106: 'j',
        107: 'k',
        108: 'l',
        109: 'm',
        110: 'n',
        111: 'o',
        112: 'p',
        113: 'q',
        114: 'r',
        115: 's',
        116: 't',
        117: 'u',
        118: 'v',
        119: 'w',
        120: 'x',
        121: 'y',
        122: 'z',
        123: '{',
        124: '|',
        125: '}',
        126: '~',
        127: '<',
    ));

    $_: __const('ASCII_EXTENDED', (
        128: 'â‚¬',
        129: '&',
        130: 'â€š',
        131: 'Æ’',
        132: 'â€ž',
        133: 'â€¦',
        134: 'â€ ',
        135: 'â€¡',
        136: 'Ë†',
        137: 'â€°',
        138: 'Å ',
        139: 'â€¹',
        140: 'Å’',
        141: '&',
        142: 'Å½',
        143: '&',
        144: '&',
        145: 'â€˜',
        146: 'â€™',
        147: 'â€œ',
        148: 'â€',
        149: 'â€¢',
        150: 'â€“',
        151: 'â€”',
        152: 'Ëœ',
        153: 'â„¢',
        154: 'Å¡',
        155: 'â€º',
        156: 'Å“',
        157: '&',
        158: 'Å¾',
        159: 'Å¸',
        160: '&',
        161: 'Â¡',
        162: 'Â¢',
        163: 'Â£',
        164: 'Â¤',
        165: 'Â¥',
        166: 'Â¦',
        167: 'Â§',
        168: 'Â¨',
        169: 'Â©',
        170: 'Âª',
        171: 'Â«',
        172: 'Â¬',
        173: 'Â­',
        174: 'Â®',
        175: 'Â¯',
        176: 'Â°',
        177: 'Â±',
        178: 'Â²',
        179: 'Â³',
        180: 'Â´',
        181: 'Âµ',
        182: 'Â¶',
        183: 'Â·',
        184: 'Â¸',
        185: 'Â¹',
        186: 'Âº',
        187: 'Â»',
        188: 'Â¼',
        189: 'Â½',
        190: 'Â¾',
        191: 'Â¿',
        192: 'Ã€',
        193: 'Ã',
        194: 'Ã‚',
        195: 'Ãƒ',
        196: 'Ã„',
        197: 'Ã…',
        198: 'Ã†',
        199: 'Ã‡',
        200: 'Ãˆ',
        201: 'Ã‰',
        202: 'ÃŠ',
        203: 'Ã‹',
        204: 'ÃŒ',
        205: 'Ã',
        206: 'ÃŽ',
        207: 'Ã',
        208: 'Ã',
        209: 'Ã‘',
        210: 'Ã’',
        211: 'Ã“',
        212: 'Ã”',
        213: 'Ã•',
        214: 'Ã–',
        215: 'Ã—',
        216: 'Ã˜',
        217: 'Ã™',
        218: 'Ãš',
        219: 'Ã›',
        220: 'Ãœ',
        221: 'Ã',
        222: 'Ãž',
        223: 'ÃŸ',
        224: 'Ã ',
        225: 'Ã¡',
        226: 'Ã¢',
        227: 'Ã£',
        228: 'Ã¤',
        229: 'Ã¥',
        230: 'Ã¦',
        231: 'Ã§',
        232: 'Ã¨',
        233: 'Ã©',
        234: 'Ãª',
        235: 'Ã«',
        236: 'Ã¬',
        237: 'Ã­',
        238: 'Ã®',
        239: 'Ã¯',
        240: 'Ã°',
        241: 'Ã±',
        242: 'Ã²',
        243: 'Ã³',
        244: 'Ã´',
        245: 'Ãµ',
        246: 'Ã¶',
        247: 'Ã·',
        248: 'Ã¸',
        249: 'Ã¹',
        250: 'Ãº',
        251: 'Ã»',
        252: 'Ã¼',
        253: 'Ã½',
        254: 'Ã¾',
        255: 'Ã¿',
    ));
}

@include initialize();



@function __replace-holders($list, $placeholder) {
    $index: 1;
    $length: length($list);
    $result: ();

    @while ($index <= $length) {
        @if (nth($list, $index) == $placeholder) {
            $list: set-nth($list, $index, __const('PLACEHOLDER'));
            $result: append($result, $index);
        }

        $index: $index + 1;
    }

    @return $result;
}



// SASSDASH
// ========

@function __args-to-map($args) {
    // todo
}




@function __base-bind-all() {
    // todo
}

@function __compose-args($args, $partials, $holders) {
    $holders-length: length($holders);
    $args-index: 1;
    $args-length: max(length($args) - $holders-length, 0);
    $left-index: 1;
    $left-length: length($partials);
    $result: ();

    @while ($left-index <= $left-length) {
        $result: set($result, $left-index, nth($partials, $left-index));

        $left-index: $left-index + 1;
    }
    @while ($args-index <= $holders-length) {
        $result: set($result, nth($holders, $args-index), nth($args, $args-index));

        $args-index: $args-index + 1;
    }
    @while ($args-length > 0) {
        $result: set($result, $left-index, nth($args, $args-index));

        $left-index: $left-index + 1;
        $args-index: $args-index + 1;
        $args-length: $args-length - 1;
    }

    @return $result;
}

@function __compose-args-right() {
    // TODO
}

@function __merge-data() {}

@function __ary() {} // todo

@function __bind-all() {} // todo

@function __bind-key() {} // todo

@function __curry() {} // todo

@function __curry-right() {} // todo

@function __memoize() {} // todo

@function __rearg() {} // todo

@function debug($value, $args...) { @debug $value; @return true; }

@function __value($value) {
    @if instanceof($value, SassdashWrapper) {
        @return get($value, '__wrapped__');
    }

    @return $value;
}

@function __deburr($string) {
    // todo
    @return $string;
}

// Aliases
// =======

// // Add functions that return wrapped values when chaining
@function _ary($args...) { @return call(__ary, $args...); }
@function _bind-all($args...) { @return call(__bind-all, $args...); }
@function _bind-key($args...) { @return call(__bind-key, $args...); }
// @function _chain($args...) { @return call(__chain, $args...); }
@function _curry($args...) { @return call(__curry, $args...); }
@function _curry-right($args...) { @return call(__curry-right, $args...); }
// @function _debounce($args...) { @return call(__debounce, $args...); }
// @function _defer($args...) { @return call(__defer, $args...); }
// @function _delay($args...) { @return call(__delay, $args...); }
// @function _memoize($args...) { @return call(__memoize, $args...); }
// @function _mixin($args...) { @return call(__mixin, $args...); }
@function _rearg($args...) { @return call(__rearg, $args...); }
// @function _remove($args...) { @return call(__remove, $args...); }
@function _tap($args...) { @return call(__tap, $args...); }
@function _throttle($args...) { @return call(__throttle, $args...); }
@function _thru($args...) { @return call(__thru, $args...); }
// @function _to-plain-map($args...) { @return call(__to-plain-map, $args...); }
// @function _transform($args...) { @return call(__transform, $args...); }

@function _wrap($args...) { @return call(__wrap, $args...); }


// Add aliases 

// Add functions that return unwrapped values when chaining.
// @function _attempt($args...) { @return call(__attempt, $args...); }

// @function _deburr($args...) { @return call(__deburr, $args...); }
// @function _escape-reg-exp($args...) { @return call(__escape-reg-exp, $args...); }

// @function _no-conflict($args...) { @return call(__no-conflict, $args...); }
// @function _now($args...) { @return call(__now, $args...); }

@function _parse-int($args...) { @return call(__parse-int, $args...); }


// Add aliases.

// Add functions capable of returning wrapped and unwrapped values when chaining.

// Add custom Sassdash functions.
@function _value($args...) { @return call(__value, $args...); }



// Sassdash pseudo-chainable wrapper-value function.
@function _($value, $method-calls...) {
    $result: $value;

    @each $method-call in $method-calls {
        $method: __first($method-call);
        $args: __drop($method-call);

        $method: if(__starts-with($method, '_'), $method, '_' + $method);

        $result: __exec($method, $result, $args...);
    }

    @return $result;
}