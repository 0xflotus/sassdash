
@import 'utilities/_module';

@mixin initialize() {
    $_: static-set('__meta-map__', ());

    $_: const-set('html-escapes', (
            '&': '&amp;',
            '<': '&lt;',
            '>': '&gt;',
            '"': '&quot;',
            "'": '&#39;',
            '`': '&#96;'
        ));
    $_: const-set('html-unescapes', (
            '&amp;': '&',
            '&lt;': '<',
            '&gt;': '>',
            '&quot;': '"',
            '&#39;': "'",
            '&#96;': '`'
        ));
    $_: const-set('string-escapes', (
            '\\': '\\',
            "'": "'",
            '\n': 'n',
            '\r': 'r',
            '\u2028': 'u2028',
            '\u2029': 'u2029'
        ));
    // $_: const-set('reg-exp-chars', ('.' '*' '+' '?' '^' '$' '{' '}' '(' ')' '|' '[' ']' '/' '\'));
    $_: const-set('POSITIVE_INFINITY', 999999);
    $_: const-set('NEGATIVE_INFINITY', -999999);
    $_: const-set('MAX_SAFE_INTEGER', (pow(2, 53) - 1));
    $_: const-set('HALF_MAX_LIST_LENGTH', 999999);
    $_: const-set('MAX_LIST_LENGTH', 999999);
    $_: const-set('DEFAULT_TRUNC_LENGTH', 30);
    $_: const-set('DEFAULT_TRUNC_OMISSION', '...');
    $_: const-set('PLACEHOLDER', '__sassdash-placeholder__');

    $_: const-set('BIND_FLAG', 1);
    $_: const-set('BIND_KEY_FLAG', 2);
    $_: const-set('CURRY_BOUND_FLAG', 4);
    $_: const-set('CURRY_FLAG', 8);
    $_: const-set('CURRY_RIGHT_FLAG', 16);
    $_: const-set('PARTIAL_FLAG', 32);
    $_: const-set('PARTIAL_RIGHT_FLAG', 64);
    $_: const-set('REARG_FLAG', 128);
    $_: const-set('ARY_FLAG', 256);

}

@include initialize();



@function __base-compare-ascending($value, $other) {
    @if $value > $other {
        @return 1;
    }

    @if $value < $other {
        @return -1;
    }

    @return 0;
}

@function __base-index-of($list, $value, $from-index: 1) {
    $length: length($list);
    $index: $from-index;

    @while $index <= $length {
        @if (nth($list, $index) == $value) {
            @return $index;
        }

        $index: $index + 1;
    }

    @return -1;
}

@function __base-sort-by($list, $comparer) {
    $length: length($list);

    $list: sort($list, $comparer);

    $list: __to-map($list);

    @while ($length > 0) {
        $list: set($list, $length, get(get($list, $length), 'value'));

        $length: $length - 1;
    }

    @return __to-list($list);
}


@function __base-to-string($value) {
    @if (type-of($value) == 'string') {
        @return $value;
    }

    @return if($value == null, '', $value + '');
}

@function __char-at-callback($string) {
    // ... 
}

@function __chars-index($string, $chars, $direction) {
    $index: 1;
    $length: str-length($string);
    $direction-map: ('right': -1, 'left': 1);
    $increment: map-get($direction-map, $direction);

    @while str-index($chars, __char-at($string, $index))
        and $index <= $length {
        $index: $index + $increment;
    }

    @return $index;
}

@function __chars-left-index($string, $chars) {
    @return __chars-index($string, $chars, $direction: left);
}

@function __chars-right-index($string, $chars) {
    @return __chars-index($string, $chars, $direction: right);
}

@function __compare-ascending($map, $other) {
    @return either(__base-compare-ascending(get($map, 'criteria'), get($other, 'criteria')), (get($map, 'index') - get($other, 'index')));
}

@function __compare-multiple-ascending($map, $other) {
    $index: 1;
    $map-criteria: get($map, 'criteria');
    $other-criteria: get($other, 'criteria');
    $length: length($map-criteria);

    @while ($index <= $length) {
        $result: __base-compare-ascending(nth($map-criteria, $index), nth($other-criteria, $index));

        @if ($result) {
            @return $result;
        }

        $index: $index + 1;
    }

    @return (get($map, 'index') - get($other, 'index'));
}

@function __escape-html-char($char) {
    $escaped-char: const-get('html-escapes' $char);

    @return if($escaped-char, $escaped-char, $char);
}

@function __escape-string-char($char) {
    @return '\\#{const-get('string-escapes' $char)}';
}

@function __index-of-nan($list, $from-index, $from-right) {
    // TODO
}

@function __is-index($value, $length: null) {
    $value: __parse-float($value);
    
    @return $value > 0
        and $value % 1 == 0
        and ($length == null or $value <= $length);
}

@function __is-map-like($value) {
    @return $value and (index('map' 'list' 'arglist', type-of($value)));
}

@function __is-space($char-code) {
    // TODO - find the rest of the space characters
    @return $char-code == ' ';
}

@function __replace-holders($list, $placeholder) {
    $index: 1;
    $length: length($list);
    $result: ();

    @while ($index <= $length) {
        @if (nth($list, $index) == $placeholder) {
            $list: set-nth($list, $index, const-get('PLACEHOLDER'));
            $result: append($result, $index);
        }

        $index: $index + 1;
    }

    @return $result;
}

@function __sorted-uniq($list, $iteratee: null) {
    $seen: null;
    $index: 1;
    $length: length($list);
    $res-index: 1;
    $result: ();

    @while ($index <= $length) {
        $value: nth($list, $index);
        $computed: if($iteratee, call($iteratee, $value, $index, $list), $value);

        @if not ($seen == $computed) {
            $seen: $computed;
            $result: append($result, $value);
        }

        $res-index: $res-index + 1;
        $index: $index + 1;
    }

    @return $result;
}

@function __trimmed-left-index($string) {
    $index: 1;
    $length: str-length($string);

    @while ($index <= $length) and (__is-space(__char-at($string, $index))) {
        $index: $index + 1;
    }

    @return $index;
}

@function __trimmed-right-index($string) {
    $index: str-length($string);

    @while ($index > 0) and (__is-space(__char-at($string, $index))) {
        $index: $index - 1;
    }

    @return $index;
}

@function __unescape-html-char($char) {
    @return const-get('html-unescapes' $char);
}

// SASSDASH
// ========

@function SassdashWrapper($value, $chain-all: false, $actions: ()) {
    @return (
        __actions__: $actions,
        __chain__: if($chain-all, true, false),
        __wrapped__: $value
    );
}

@function __sassdash($value) {
    @if (__is-map-like($value) and type-of($value) != list) {
        @if (instanceof($value, SassdashWrapper)) {
            @return $value;
        }
    }

    @return new(SassdashWrapper, (
        value: $value
    ));
}

@function LazyWrapper($value) {
    @return (
        actions: null,
        dir: 1,
        drop-count: 0,
        filtered: false,
        iteratees: null,
        take-count: const-get('POSITIVE_INFINITY'),
        views: null,
        wrapped: $value
    );
}

@function __lazy-clone() {
    // todo
}

@function __lazy-reverse() {
    // todo
}

@function __lazy-value() {
    $list: __call(value, this(), this('wrapped'));

    @if not (__is-list($list)) {
        @return __base-wrapper-value($list, this('actions'));
    }

    $dir: this('dir');
    $is-right: $dir < 0;
    $length: length($list);
    $view: __get-view(0, $length, this('views'));
    $start: get($view, 'start');
    $end: get($view, 'end');
    $drop-count: this('drop-count');
    $take-count: __native-min($end - $start, this('take-count') - $drop-count);
    $index: if($is-right, $end, $start - 1);
    $iteratees: this('iteratees');
    $iter-length: if($iteratees, length($iteratees), 0);
    $result-index: 0;
    $result: ();

    @while ($length > 0 and $result-index < $take-count and not $break-outer) {
        $continue-outer: false;
        $index: $index + $dir;

        $iter-index: 1;
        $value: nth($list, $index);

        @while ($iter-index < $iter-length and not ($continue-outer or $break-outer)) {
            $data: nth($iteratees, $iter-index);
            $iteratee: get($data, 'iteratee');
            $computed: call($iteratee, $value, $index, $list);
            $type: get($data, 'type');

            @if ($type == const-get('LAZY_MAP_FLAG')) {
                $value: $computed;
            } @else if not ($computed) {
                @if ($type == const-get('LAZY_FILTER_FLAG')) {
                    $continue-outer: true;
                } @else {
                    $break-outer: true;
                }
            }

            $iter-index: $iter-index + 1;
        }
        @if not ($continue-outer or $break-outer) {
            @if ($drop-count and $drop-count > 0) {
                $drop-count: $drop-count - 1;
            } @else {
                $result: set($result, $result-index, $value);
            }
        }

        $length: $length - 1;
    }

    @return if($is-right, __list-reverse($result), $result);
    // todo test
}


@function MapCache() {
    @return (
        __data__: ()
    );
}

@function __map-delete($this, $key) {
    $data: get($this, __data__);

    @return set($this, map-delete($data, $key));
}

@function __map-get($this, $key) {
    @return get($this, __data__ $key);
}

@function __map-has($this, $key) {
    $data: get($this, __data__);

    @return map-has-key($data, $key);
}

@function __map-set($this, $key, $value) {
    @return set($this, __data__ $key, $value);
}

@function SetCache($values: ()) {
    @return (
        data: (
            number: (),
            set: new(Set)
        ),
        values: $values
    );
}

@function __cache-index-of($this, $value) {
    $type: type-of($value);
    $data: get($this, data);
    $result: if($type == number, get($data, $type $value), method(get($data, set), has, $value));

    @return if($result, 0, -1);
}

@function __cache-push($this, $value) {
    $data: get($this, data);
    $type: type-of($value);

    @if ($type == number) {
        $data: set($data, $type $value, true);
    } @else {
        // data.set.add(value);
        $data: set($data, set, method(get($data, set), add, $value));
    }
}

@function __args-to-map($args) {
    // todo
}

@function __list-copy($list, $other: ()) {
    $index: 1;
    $length: length($list);
    $other-length: length($other);
    $result: ();

    @while ($index <= $length) {
        $result: append($result, nth($list, $index));

        $index: $index + 1;
    }

    @while ($other-length >= $index) {
        $result: append($result, nth($other, $index));

        $index: $index + 1;
    }

    @return $result;
}

@function __list-each($list, $iteratee) {
    $index: 1;
    $length: length($list);
    $break: false;
    $result-list: ();

    @while ($index <= $length) and not $break {
        $item: call($iteratee, nth($list, $index), $index, $list);

        @if (call($iteratee, nth($list, $index), $index, $list) == false) {
            $break: true;
        } @else {
            $result-list: append($result-list, $item);
        }

        $index: $index + 1;
    }

    @return $result-list;
}

@function __list-each-right($list, $iteratee) {
    $list: __list-reverse($list);
    $result-list: __list-each($list, $iteratee);
    $result-list: __list-reverse($result-list);

    @return $result-list;
}

@function __list-every($list, $predicate) {
    $index: 1;
    $length: length($list);

    @while ($index <= $length) {
        $iteration: __call($predicate, null, nth($list, $index), $index, $list);

        @if (not __is-truthy($iteration)) {
            @return false;
        }

        $index: $index + 1;
    }

    @return true;
}

@function __list-filter($list, $predicate) {
    $index: 1;
    $length: length($list);
    $result-list: ();

    @while ($index <= $length) {
        $value: nth($list, $index);

        $iteration: __call($predicate, null, $value, $index, $list);

        @if (__is-truthy($iteration)) {
            $result-list: append($result-list, $value);
        }

        $index: $index + 1;
    }

    @return $result-list;
}

// TODO remove - for testing only
@function is-even($val, $args...) {
    @return $val % 2 == 0;
}
@function double($val, $args...) {
    @return 2 * $val;
}
$users: (
    (name: barney, age: 42, foo: true),
    (name: fred, age: 31, foo: false),
    (name: alex, age: 43, foo: true),
    (name: jim, age: 52, foo: false),
    (name: fred, age: 7, foo: true),
);

@function __list-map($list, $iteratee) {
    $index: 1;
    $length: length($list);
    $result-list: ();

    @while ($index <= $length) {
        $value: nth($list, $index);

        $result-list: append($result-list, __call($iteratee, null, $value, $index, $list));

        $index: $index + 1;
    }

    @return $result-list;
}

@function __list-max($list) {
    $index: 1;
    $length: length($list);
    $result: const-get('NEGATIVE_INFINITY');

    // TODO use Hugo's comparison for strings
    @while ($index <= $length) {
        $value: nth($list, $index);
        @if ($value > $result) {
            $result: $value;
        }

        $index: $index + 1;
    }

    @return $result;
}

@function __list-min($list) {
    $index: 1;
    $length: length($list);
    $result: const-get(POSITIVE_INFINITY);

    // TODO use Hugo's comparison for strings
    @while ($index <= $length) {
        $value: nth($list, $index);
        @if ($value < $result) {
            $result: $value;
        }

        $index: $index + 1;
    }

    @return $result;
}

@function __list-reduce($list, $iteratee, $accumulator: null, $init-from-list: true, $args...) {
    $index: 1;
    $length: length($list);

    @if ($init-from-list and ($length > 0)) {
        $accumulator: nth($list, $index);
        $index: $index + 1;
    }

    @while ($index <= $length) {
        $value: nth($list, $index);
        $accumulator: call($iteratee, $accumulator, $value, $index, $list);

        $index: $index + 1;
    }

    @return $accumulator;
}

@function __list-reduce-right($list, $iteratee, $accumulator: null, $init-from-list: true, $args...) {
    $list: __list-reverse($list);


    @return __list-reduce($list, $iteratee, $accumulator, $init-from-list);
}

@function __list-some($list, $predicate) {
    $index: 1;
    $length: length($list);

    @while ($index <= $length) {
        $value: nth($list, $index);

        @if (__call($predicate, null, $value, $index, $list)) {
            @return true;
        }

        $index: $index + 1;
    }

    @return false;
}

@function __assign-defaults($map-value, $source-value, $args...) {
    @return if(__is-undefined($map-value), $source-value, $map-value);
}

@function __assign-own-defaults() {
    // todo
}

@function __base-assign($map, $source, $customizer: false) {
    $props: __keys($source);

    @if not ($customizer) {
        @return __base-copy($source, $map, $props);
    }

    $index: 1;
    $length: length($props);

    @while ($index <= $length) {
        $key: nth($props, $index);
        $value: if(map-has-key($map, $key), get($map, $key), $__undefined__);
        $result: __call($customizer, null, $value, get($source, $key), $key, $map, $source);

        @if ($result != $value)
            or ($value == null and not map-has-key($map, $key)) {
            $map: set($map, $key, $result);    
        }

        $index: $index + 1;
    }

    @return $map;
}

@function __base-at($collection, $props) {
    $index: 1;
    $length: length($collection);
    $is-list: type-of($collection) == list;
    $props-length: length($props);
    $result: ();

    @while ($index <= $props-length) {
        $key: nth($props, $index);

        @if ($is-list) {
            $key: __parse-float($key);
            $result: append($result, if(__is-index($key, $length), nth($collection, $key), null));
        } @else {
            $result: append($result, get($collection, $key));
        }

        $index: $index + 1;
    }

    @return $result;
}

@function __base-copy($source, $map, $props: null) {
    @if not ($props) {
        $props: $map;
        $map: ();
    }

    $index: 1;
    $length: length($props);

    @while ($index <= $length) {
        $key: nth($props, $index);
        $map: set($map, $key, get($source, $key));

        $index: $index + 1;
    }

    @return $map;
}

@function __base-bind-all() {
    // todo
}

@function __base-callback($function: __identity, $this-arg: $__undefined__, $arg-count: null) {
    $type: if(__function-exists($function), 'function', type-of($function));

    @if ($type == 'function') {
        @return if(not __is-undefined($this-arg) and __is-bindable($function),
            __bind-callback($function, $this-arg, $arg-count),
            $function);
    }

    @if ($function == null) {
        @return __identity;
    }

    @return if($type == 'map',
        __base-matches($function, __is-falsey($arg-count)),
        __base-property(if(__is-truthy($arg-count), __base-to-string($function), $function)));
}

@function __base-clone($value, $is-deep: false, $customizer: null, $key: null, $map: null) {
    // todo

    // Sass does not copy by reference, so returning same value is safe
    @return $value;
}

@function __base-create($constructor, $args...) {
    @if not (__function-exists($constructor)) {
        @return ();
    }

    @return new($constructor, $args...);
}

    // var baseCreate = (function() {
    //   function Object() {}
    //   return function(prototype) {
    //     if (isObject(prototype)) {
    //       Object.prototype = prototype;
    //       var result = new Object;
    //       Object.prototype = null;
    //     }
    //     return result || context.Object();
    //   };
    // }());

@function __base-delay() {
    // not being implemented
}

@function __base-difference($list, $values) {
    $length: if(length($list), length($list), 0);
    $result: ();

    @if ($length == 0) {
        @return $result;
    }

    $index: 1;
    $index-of: __base-index-of; // getIndexOf()
    $is-common: ($index-of == __base-index-of);
    $cache: if($is-common and length($values) >= 200, __create-cache($values), false);
    $values-length: length($values);

    @if ($cache) {
        $index-of: __cache-index-of;
        $is-common: false;
        $values: $cache;
    }

    @while ($index <= $length) {
        $continue-outer: false;
        $value: nth($list, $index);

        @if ($is-common) {
            $values-index: $values-length;

            @while ($values-index > 0 and not $continue-outer) {
                @if (nth($values, $values-index) == $value) {
                    $continue-outer: true;
                } @else {
                    $values-index: $values-index - 1;
                }
            }

            @if (not $continue-outer) {
                $result: append($result, $value);
            }
        } @else if (call($index-of, $values, $value) < 0) {
            $result: append($result, $value);
        }

        $index: $index + 1;
    }

    @return $result;
}

// @debug __base-difference((1 2 3), (5 2 10));

@function __base-each($collection, $iteratee) {
    $length: if($collection, length($collection), 0);

    @if not (__is-list($collection)) {
        @return __base-for-own($collection, $iteratee);
    }

    $index: 1;
    $iterable: __to-map($collection);

    $break: false;
    @while ($index <= $length and not $break) {
        $iteration: __call($iteratee, null, get($iterable, $index), $index, $iterable);

        @if ($iteration == false) {
            $break: true;
        } @else {
            $iterable: set($iterable, $index, $iteration);
        }

        $index: $index + 1;
    }

    $collection: if(__is-list($collection), map-values($iterable), $iterable);

    @return $collection;
}

// @debug __base-each((1, 3, 55), double);
// @debug __base-each((foo: 1, bar: 3, baz: 55), double);

@function __base-each-right($collection, $iteratee) {
    $length: if($collection, length($collection), 0);

    @if not (__is-length($length)) {
        @return __base-for-own-right($collection, $iteratee);
    }

    $iterable: __to-map($collection);

    $break: false;
    @while ($length > 0 and not $break) {
        $iteration: __call($iteratee, null, get($iterable, $length), $length, $iterable);

        @if ($iteration == false) {
            $break: true;
        } @else {
            $iterable: set($iterable, $length, $iteration);
        }

        $length: $length - 1;
    }

    $collection: if(__is-list($collection), map-values($iterable), $iterable);

    @return $collection;
}

@function __base-every-iteratee($value, $index, $collection) {
    $predicate: scope-get(predicate);

    $result: if(__is-truthy(__call($predicate, null, $value, $index, $collection)), true, false);

    $_: this('result', $result);

    @return null;
}
@function __base-every($collection, $predicate) {
    $_: scope-start();
    $_: scope('result', true);
    $_: scope('predicate', $predicate);

    $_: __base-each($collection, __base-every-iteratee);

    $result: scope('result');
    $_: scope-end();

    @return if($result, true, false);
}

@function __base-fill($list, $value, $start: null, $end: null) {
    $length: length($list);

    $start: if($start == null, 1, if(__is-number($start), $start, if($start, 2, 1)));

    $end: if(__is-undefined($end) or $end > $length, $length, if(__is-number($end), $end, if($end, 2, 1)));

    @if ($end < 1) {
        $end: $end + $length;
    }

    $length: if($start > $end, 0, $end);

    @while ($start <= $length) {
        $list: set-nth($list, $start, $value);

        $start: $start + 1;
    }

    @return $list;
}

@function __base-filter-iteratee($value, $index, $collection) {
    $result: this('result');
    $predicate: this('predicate');

    $iteration: __call($predicate, null, $value, $index, $collection);

    @if __is-truthy($iteration) {
        $_: this('result', append($result, $value));
    }

    @return null;
}
@function __base-filter($collection, $predicate) {
    $_: scope-start();
    $_: scope('result', ());
    $_: scope('predicate', $predicate);

    $_: __base-each($collection, __base-filter-iteratee);

    $result: scope('result');
    $_: scope-end();

    @return $result;
}

@function __base-find-iteratee($value, $key, $collection) {
    $predicate: this('predicate');
    $return-key: this('return-key');

    $iteration: __call($predicate, null, $value, $key, $collection);

    @if (__is-truthy($iteration)) {
        $_: this('result', if($return-key, $key, $value));

        @return false;
    }

    @return true;
}
@function __base-find($collection, $predicate, $each-function: __base-each, $return-key: false) {
    $result: null;

    $_: scope-start();
        $_: scope('result', null);
        $_: scope('predicate', $predicate);
        $_: scope('return-key', $return-key);

        $iteratee: scoped-function(__base-find-iteratee);

        $_: __call($each-function, null, $collection, $iteratee);

        $result: scope('result');
    $_: scope-end();

    @return $result;
}

// @debug __base-find((1 2 3 4 5), is-even);

@function __base-flatten($list, $is-deep: false, $is-strict: false, $from-index: 1) {
    $index: $from-index;
    $length: length($list);
    $result-index: 1;
    $result: ();

    @while ($index <= $length) {
        $value: nth($list, $index);

        @if __is-map-like($value)
            and __is-length(length($value))
            and (__is-list($value) or __is-arguments($value))
        {
            @if ($is-deep) {
                $value: __base-flatten($value, $is-deep, $is-strict);
            }

            $value-index: 1;
            $value-length: length($value);

            @while ($value-index <= $value-length) {
                $result: append($result, nth($value, $value-index));

                $value-index: $value-index + 1;
            }
        } @else if not ($is-strict) {
            $result: append($result, $value);
        }

        $index: $index + 1;
    }

    @return $result;
}

@function __base-for($map, $iteratee, $keys-function) {
    $index: 1;
    $iterable: __to-map($map);
    $props: __call($keys-function, null, $map);
    $length: length($props);
    $result-map: ();

    $break: false;

    @while ($index <= $length and not $break) {
        $key: nth($props, $index);
        $iteration: __call($iteratee, null, get($iterable, $key), $key, $iterable);

        @if ($iteration == false) {
            $break: true;
        } @else {
            $result-map: set($result-map, $key, $iteration);
        }

        $index: $index + 1;
    }

    @return $result-map;
}

@function __base-for-right($map, $iteratee, $keys-function) {
    $iterable: __to-map($map);
    $props: __call($keys-function, null, $map);
    $length: length($props);
    $result-map: ();

    $break: false;

    @while ($length > 0 and not $break) {
        $key: nth($props, $length);
        $iteration: __call($iteratee, null, get($iterable, $key), $iterable);

        @if ($iteration == false) {
            $break: true;
        } @else {
            $result-map: set($result-map, $key, $iteration);
        }

        $length: $length - 1;
    }

    @return $result-map;
}

@function __base-for-in($map, $iteratee) {
    @return __base-for($map, $iteratee, __keys-in);
}

@function __base-for-own($map, $iteratee) {
    @return __base-for($map, $iteratee, __keys);
}

@function __base-for-own-right($map, $iteratee) {
    @return __base-for-right($map, $iteratee, __keys);
}

@function __base-functions($map, $props) {
    $index: 1;
    $length: length($props);
    $result: ();

    @while ($index <= $length) {
        $key: nth($props, $index);

        @if (__function-exists(get($map, $key))) {
            $result: append($result, $key);
        }

        $index: $index + 1;
    }

    @return $result;
}

@function __base-invoke-iteratee($value, $index, $collection) {
    $function: this(function);
    $args: this(args);
    $index: this(index);

    $result: __call($function, null, $value, $index, $collection, $args...);

    $_: this(result, set(this(result), $index, $result));
    $_: this(index, this(index) + 1);

    @return true;
}
@function __base-invoke($collection, $method-name, $args...) {
    $index: 1;
    $is-func: __function-exists($method-name);
    $length: if($collection, length($collection), 0);
    $result: ();
    $function: if($is-func, $method-name, if($value != null, get($value, $method-name), false));

    $_: scope-start();

    $_: scope(result, $result);
    $_: scope(function, $function);
    $_: scope(args, $args);
    $_: scope(index, $index);

    $iteratee: scoped-function(__base-invoke-iteratee);

    $_: __base-each($collection, $iteratee);

    $result: scope(result);

    $_: scope-end();

    @return $result;
}

@function __base-is-equal($value, $other, $customizer: null, $is-where: null, $stack-a: null, $stack-b: null) {
    @return $value == $other;
}

@function __base-is-equal-deep($value, $other, $customizer: null, $is-where: null, $stack-a: null, $stack-b: null) {
    @return $value == $other;
}

@function __base-is-match($map, $props, $values, $strict-compare-flags: (), $customizer: false) {
    $length: length($props);
    $result: null;

    @if ($map == null) {
        @return if($length == 0 or $length == null, false, true);
    }

    $index: 1;
    $no-customizer: if($customizer, false, true);

    @while ($index <= $length) {
        @if if(($no-customizer and length($strict-compare-flags) > 0 and nth($strict-compare-flags, $index)),
                (not nth($values, $index) == get($map, nth($props, $index))),
                (not map-has-key($map, nth($props, $index)))
            ) {
            @return false;
        }

        $index: $index + 1;
    }

    $index: 1;

    @while ($index <= $length) {
        $key: nth($props, $index);

        @if ($no-customizer and length($strict-compare-flags) > 0 and nth($strict-compare-flags, $index)) {
            $result: map-has-key($map, $key);
        } @else {
            $map-value: get($map, $key);
            $src-value: get($values, $index);

            $result: if($customizer, __call($customizer, null, $map-value, $src-value, $key), null);

            @if ($result == null) {
                $result: __call(__base-is-equal, null, $src-value, $map-value, $customizer, true);
            }
        }

        @if (not $result) {
            @return false;
        }

        $index: $index + 1;
    }

    @return true;
}

// @debug __base-is-match((foo: bar, baz: 42), (baz), (43));

@function __base-map-iteratee($value, $key, $collection) {
    $result: this('result');
    $iteratee: this('iteratee');

    $result: append($result, __call($iteratee, null, $value, $key, $collection));
    $_: this('result', $result);

    @return $result;
}
@function __base-map($collection, $iteratee) {
    $_: scope-start();
    $_: scope('result', ());
    $_: scope('iteratee', $iteratee);

    $_: __base-each($collection, __base-map-iteratee);

    $result: scope('result');
    $_: scope-end();

    @return $result;
}

// @debug __base-map((foo: 1, bar: 3, baz: 55), double);

@function __base-matches-function-1($map, $args...) {
    $value: this(value);
    $key: this(key);

    @return ($map != null)
        and (map-has-key($map, $key))
        and ($value == get($map, $key));
}
@function __base-matches-function-2($map) {
    @return __base-is-match(
        this('map'),
        this('props'),
        this('values'),
        this('strict-compare-flags'));
}
@function __base-matches($source, $is-cloned: false) {
    $props: map-keys($source);
    $length: length($props);

    $_: scope-start();

    @if ($length == 1) {
        $key: nth($props, 1);
        $value: get($source, $key);

        $_: scope(key, $key);
        $_: scope(value, $value);

        @if (__is-strict-comparable($value)) {
            $result: scoped-function(__base-matches-function-1);

            $_: scope-end();

            @return $result;
        }
    }

    @if ($is-cloned) {
        $source: __base-clone($source, true);
    }

    $values: (); // list
    $strict-compare-flags: (); // list

    @while ($length > 0) {
        $value: get($source, nth($props, $length));
        $values: set($values, $length, $value);
        $strict-compare-flags: set($strict-compare-flags, $length, __is-strict-comparable($value));

        $length: $length - 1;
    }

    $values: __to-list($values);
    $strict-compare-flags: __to-list($strict-compare-flags);

    $_: scope(props, $props);
    $_: scope(values, $values);
    $_: scope(strict-compare-flags, $strict-compare-flags);

    $result: scoped-function(__base-matches-function-2);

    $_: scope-end();

    @return $result;
}

@function __base-merge-iteratee($src-value, $key, $source) {
    $map: scope-get(map);
    $source: scope-get(source);
    $customizer: scope-get(customizer);
    $stack-a: scope-get(stack-a);
    $stack-b: scope-get(stack-b);
    $is-src-list: scope-get(is-src-list);

    $is-list: __is-list-like($src-value);
    $is-map: __is-plain-map($src-value);
    $value: get($map, $key);

    @if not ($is-list or $is-map) {
        $result: if($customizer, call($customizer, $value, $src-value, $key, $map, $source), null);
        $is-common: ($result == null);

        @if ($is-common) {
            $result: $src-value;
        }

        @if ($is-src-list or not $result == null)
            and ($is-common or not $result == $value)
        {
            $map: set($map, $key, $result);
        }

        @return $map;
    }

    $stack-a: if(length($stack-a), $stack-a, ());
    $stack-b: if(length($stack-b), $stack-b, ());

    $length: length($stack-a);

    @while ($length > 0) {
        @if (nth($stack-a, $length) == $src-value) {
            $map: set($map, $key, nth($stack-b, $length));

            @return $map;
        }

        $result: if($customizer, call($customizer, $value, $src-value, $key, $map, $source), null);
        $is-common: ($result == null);

        @if ($is-common) {
            $result: if($is-list,
                if(__is-list($value), $value, ()),
                if(__is-plain-map($value), $value, ()));
        }

        $stack-a: append($stack-a, $src-value);
        $stack-b: append($stack-b, $result);

        @if ($is-common) {
            $map: set($map, $key, __base-merge($result, $src-value, $customizer, $stack-a, $stack-b));
        } @else if not ($result == $value) {
            $map: set($map, $key, $result);
        }

        $length: $length - 1;
    }

    @return $map;
}
@function __base-merge($map, $source, $customizer: null, $stack-a: null, $stack-b: null) {
    $is-src-list: __is-list-like($source);
    $result: ();

    $_: scope-start();
    $_: scope(map, $map);
    $_: scope(source, $source);
    $_: scope(customizer, $customizer);
    $_: scope(stack-a, $stack-a);
    $_: scope(stack-b, $stack-b);
    $_: scope(is-src-list, $is-src-list);

    $merge-function: if($is-src-list, __list-each, __base-for-own);

    $result: call($merge-function, $source, __base-merge-iteratee);

    $_: scope-end();

    @return $result;
}

// @debug __base-merge((baz: butt), (foo: bar, baz: quo));


@function __base-property-function($map: null, $args...) {
    $key: this(key);
    $map: __to-map($map);

    @return if($map == null, null, get($map, $key));
}
@function __base-property($key) {
    $_: scope-start();
    $_: scope(key, $key);

    $result: scoped-function(__base-property-function);

    $_: scope-end();

    @return $result;
}

// $yoname: __base-property('name');
// $yomap: (foo: bar, name: billy, baz: quo);

// @debug __call($yoname, null, $yomap);

@function __base-pull-at($list, $indexes) {
    // not implementing - mutates list
}

@function __base-random($min, $max) {
    @return $min + floor(random() * ($max - $min + 1));
}

// @debug __base-random(3, 10);

@function __base-reduce-iteratee($value, $index, $collection: null) {
    $iteratee: this(iteratee);
    $accumulator: this(accumulator);
    $init-from-collection: this(init-from-collection);

    @if ($init-from-collection) {
        $_: this(init-from-collection, false);
        $accumulator: $value;
    } @else {
        $accumulator: __call($iteratee, null, $accumulator, $value, $index, $collection);
    }

    $_: this(accumulator, $accumulator);

    @return true;
}
@function __base-reduce($collection, $iteratee, $accumulator, $init-from-collection: false, $each-function: null) {

    $_: scope-start();
        $_: scope(iteratee, $iteratee);
        $_: scope(accumulator, $accumulator);
        $_: scope(init-from-collection, $init-from-collection);

        $iteratee: scoped-function(__base-reduce-iteratee);

        @debug $collection, $each-function, $iteratee;

        $_: __call($each-function, null, $collection, $iteratee);

        $accumulator: scope(accumulator);
    $_: scope-end();

    @return $accumulator;
}

@function __base-set-data($function, $data) {
    $_: static-set('__meta-map__', $function, $data);

    @return $function;
}

@function __base-slice($list, $start: 0, $end: length($list)) {
    $index: 1;
    $length: length($list);

    @if ($start < 0) {
        $start: if(-$start > $length, 0, ($length + $start));
    }

    $end: if($end > $length, $length, if($end, $end, 0));

    @if ($end < 0) {
        $end: $end + $length;
    }

    $length: if($start > $end, 0, ($end - $start));

    $result: ();

    @while ($index <= $length) {
        $result: append($result, nth($list, ($index + $start)));

        $index: $index + 1;
    }

    @return $result;
}

// @debug __base-slice((1 2 3), 1); // 2 3
// @debug __base-slice((1 2 3), 4); // ()
// @debug __base-slice((1 2 3), -1); // 3
// @debug __base-slice((1 2 3), -3); // 1 2 3
// @debug __base-slice((1 2 3 4 5 6 7 8), 2, 5);

@function __base-some-iteratee($value, $index, $collection) {
    $predicate: this(predicate);
    $result: this(result);

    $result: __call($predicate, null, $value, $index, $collection);

    $_: this(result, $result);

    @return if($result, false, true);
}
@function __base-some($collection, $predicate) {
    $result: false;

    $_: scope-start();
    $_: scope(predicate, $predicate);
    $_: scope(result, $result);

    $_: __base-each($collection, __base-some-iteratee);

    $result: scope(result);

    $_: scope-end();

    @return if($result, true, false);
}

// @debug __base-some((1 3 5 7 9), is-even);
// @debug __base-some((2 3 5 7 9), is-even);

@function __base-uniq($list, $iteratee: null) {
    $index: 1;
    $index-of: __get-index-of();
    $length: length($list);
    $is-common: ($index-of == '__base-index-of');
    $is-large: ($is-common and $length >= 200);
    $seen: if($is-large, __create-cache(), false);
    $result: ();

    @if ($seen) {
        $index-of: '__cache-index-of';
        $is-common: false;
    } @else {
        $is-large: false;
        $seen: if($iteratee, (), $result);
    }

    @while ($index <= $length) {
        $continue-outer: false;
        $value: nth($list, $index);
        $computed: if($iteratee, call($iteratee, $value, $index, $list), $value);

        @if ($is-common) {
            $seen-index: length($seen);

            @while ($seen-index > 0 and not $continue-outer) {
                @if (nth($seen, $seen-index) == $computed) {
                    $continue-outer: true;
                } @else {
                    $seen-index: $seen-index - 1;
                }
            }

            @if (not $continue-outer) {
                @if ($iteratee) {
                    $seen: append($seen, $computed);
                }

                $result: append($result, $value);
                $seen: $result;
            }
        } @else if (call($index-of, $seen, $computed) < 0) {
            @if ($iteratee or $is-large) {
                $seen: append($seen, $computed);
            }

            $result: append($result, $value);
            $seen: $result;
        }

        $index: $index + 1;
    }

    @return $result;
}

// @function flr($val, $idx, $lis) {
//     @return floor($val);
// }
// @debug __base-uniq((1 2 1 3 1 4 2.4), flr);

@function __base-values($map, $props) {
    $index: 1;
    $length: length($props);
    $result: ();

    @while ($index <= $length) {
        $result: append($result, get($map, nth($props, $index)));

        $index: $index + 1;
    }

    @return $result;
}

@function __base-wrapper-value($value, $actions) {
    // todo
    $result: $value;

    @if (instanceof($result, LazyWrapper)) {
        // todo
    }

    $index: 1;
    $length: length($actions);

    @while ($index <= $length) {
        $args: ($result,);
        $action: nth($actions, $index);

        $args: append($args, get($action, args));
        $result: call(get($action, func), get($action, this-arg), $args...);

        $index: $index + 1;
    }

    @return $result;
}

@function __binary-index($list, $value, $ret-highest) {
    $low: 0;
    $high: if($list, length($list), $low);

    @if (type-of($value) == number and $high <= const-get(HALF_MAX_LIST_LENGTH)) {
        @while ($low < $high) {
            $mid: floor(($low + $high) / 2);
            $computed: nth($list, $mid);

            @if (if($ret-highest, ($computed <= $value), ($computed < $value))) {
                $low: $mid + 1;
            } @else {
                $high: $mid;
            }
        }

        @return $high;
    }

    @return __binary-index-by($list, $value, __identity, $ret-highest);
}

@function __binary-index-by($list, $value, $iteratee, $ret-highest) {
    $value: call($iteratee, $value);

    $low: 0;
    $high: if($list, length($list), 0);
    $val-is-undefined: ($value == null);

    @while ($low < $high) {
        $mid: floor(($low + $high) / 2);
        $computed: call($iteratee, nth($list, $mid));

        @if ($val-is-undefined) {
            $set-low: ($ret-highest > 0 or not ($computed == null));
        } @else {
            $set-low: if($ret-highest > 0, ($computed <= $value), ($computed < $value));
        }

        @if ($set-low) {
            $low: $mid + 1;
        } @else {
            $high: $mid;
        }
    }

    @return call(native-min, $high, const-get(MAX_LIST_INDEX));
}

@function __bind-callback-1($value) {
    $function: scope(function);
    $this-arg: scope(this-arg);

    @return __call($function, $this-arg, $value);
}
@function __bind-callback-3($value, $index, $collection) {
    $function: scope(function);
    $this-arg: scope(this-arg);

    @return __call($function, $this-arg, $value, $index, $collection);
}
@function __bind-callback-4($accumulator, $value, $index, $collection) {
    $function: scope(function);
    $this-arg: scope(this-arg);

    @return __call($function, $this-arg, $accumulator, $value, $index, $collection);
}
@function __bind-callback-5($value, $other, $key, $map, $source) {
    $function: scope(function);
    $this-arg: scope(this-arg);

    @return __call($function, $this-arg, $value, $other, $key, $map, $source);
}
@function __bind-callback-any($arguments...) {
    $function: scope(function);
    $this-arg: scope(this-arg);

    @return __call($function, $this-arg, $arguments...);
}
@function __bind-callback($function, $this-arg: null, $arg-count: null) {
    @if (not function-exists($function)) {
        @return __identity;
    }

    @if ($this-arg == null) {
        @return $function;
    }

    $_: scope-start();
    $_: scope-set(function, $function);
    $_: scope-set(this-arg, $this-arg);

    $arg-count-case: (
        1: __bind-callback-1,
        3: __bind-callback-3,
        4: __bind-callback-4,
        5: __bind-callback-5
    );

    @if ($arg-count > 5) {
        @return __bind-callback-any;
    }

    $result: scoped-function(get($arg-count-case, $arg-count), $this-arg);

    $_: scope-end();

    @return $result;
}

@function __buffer-clone() {
    // not implemented
}

@function __compose-args($args, $partials, $holders) {
    $holders-length: length($holders);
    $args-index: 1;
    $args-length: __native-max(length($args) - $holders-length, 0);
    $left-index: 1;
    $left-length: length($partials);
    $result: ();

    @while ($left-index <= $left-length) {
        $result: set($result, $left-index, nth($partials, $left-index));

        $left-index: $left-index + 1;
    }
    @while ($args-index <= $holders-length) {
        $result: set($result, nth($holders, $args-index), nth($args, $args-index));

        $args-index: $args-index + 1;
    }
    @while ($args-length > 0) {
        $result: set($result, $left-index, nth($args, $args-index));

        $left-index: $left-index + 1;
        $args-index: $args-index + 1;
        $args-length: $args-length - 1;
    }

    @return $result;
}

@function __compose-args-right() {
    // TODO
}

    // function composeArgsRight(args, partials, holders) {
    //   var holdersIndex = -1,
    //       holdersLength = holders.length,
    //       argsIndex = -1,
    //       argsLength = nativeMax(args.length - holdersLength, 0),
    //       rightIndex = -1,
    //       rightLength = partials.length,
    //       result = Array(argsLength + rightLength);

    //   while (++argsIndex < argsLength) {
    //     result[argsIndex] = args[argsIndex];
    //   }
    //   var pad = argsIndex;
    //   while (++rightIndex < rightLength) {
    //     result[pad + rightIndex] = partials[rightIndex];
    //   }
    //   while (++holdersIndex < holdersLength) {
    //     result[pad + holders[holdersIndex]] = args[argsIndex++];
    //   }
    //   return result;
    // }

@function __create-aggregator-function-iteratee($value, $key, $collection) {
    $result: scope(result);
    $setter: scope(setter);
    $iteratee: scope(iteratee);

    $result: call($setter, $result, $value, call($iteratee, $value, $key, $collection), $collection);

    $_: scope(result, $result);

    @return true;
}
@function __create-aggregator-function($collection, $iteratee: __identity, $this-arg: null) {
    $setter: scope(setter);
    $initializer: scope(initializer);

    $iteratee: __get-callback($iteratee, $this-arg, 3);
    $_: scope(iteratee, $iteratee);

    $result: if($initializer, __call($initializer), ());

    @if (__is-list($collection)) {
        $index: 1;
        $length: length($collection);

        @while ($index <= $length) {
            $value: nth($collection, $index);
            $result: call($setter, $result, $value, __call($iteratee, null, $value, $index, $collection), $collection);

            $index: $index + 1;
        }
    } @else {
        $_: scope(result, $result);

        $_: __base-each($collection, __create-aggregator-function-iteratee);

        $result: scope(result);
    }

    @return $result;
}
@function __create-aggregator($setter, $initializer: null) {
    $_: scope-start();
        $_: scope(setter, $setter);
        $_: scope(initializer, $initializer);

        $function: scoped-function(__create-aggregator-function);
    $_: scope-end();

    @return $function;
}

    // function createAggregator(setter, initializer) {
    //   return function(collection, iteratee, thisArg) {
    //     iteratee = getCallback(iteratee, thisArg, 3);

    //     var result = initializer ? initializer() : {};
    //     if (isArray(collection)) {
    //       var index = -1,
    //           length = collection.length;

    //       while (++index < length) {
    //         var value = collection[index];
    //         setter(result, value, iteratee(value, index, collection), collection);
    //       }
    //     } else {
    //       baseEach(collection, function(value, key, collection) {
    //         setter(result, value, iteratee(value, key, collection), collection);
    //       });
    //     }
    //     return result;
    //   };
    // }

@function __create-assigner-function($arguments...) {
    $assigner: this('assigner');
    $length: length($arguments);
    $map: nth($arguments, 1);
    $customizer: null;

    @if ($length < 2 or $map == null) {
        @return $map;
    }

    @if ($length > 3 and __is-iteratee-call(nth($arguments, 2), nth($arguments, 3), nth($arguments, 4))) {
        $length: 2;
    }

    @if ($length > 3 and __function-exists(nth($arguments, $length - 1))) {
        $length: $length - 1;
        $customizer: __bind-callback(nth($arguments, $length), nth($arguments, $length - 1), 5);
    } @else if ($length > 2 and __function-exists(nth($arguments, $length))) {
        $length: $length - 1;
        $customizer: nth($arguments, $length + 1);
    }

    $index: 1;

    @while ($index <= $length) {
        $source: nth($arguments, $index);

        @if ($source) {
            $map: __call($assigner, null, $map, $source, $customizer);
        }

        $index: $index + 1;
    }

    // @debug $assigner, $map, $source, $customizer;

    @return $map;
}
@function __create-assigner($assigner) {
    $_: scope-start();
    $_: scope('assigner', $assigner);

    $scoped-function: scoped-function(__create-assigner-function);

    $_: scope-end();

    @return $scoped-function;
}



@function __create-bind-wrapper($function, $this-arg) {
    // todo
}

@function __create-cache($values) {
    @return new(SetCache($values));
}

@function __create-compounder-function($string) {
    $callback: this(callback);

    $index: 1;
    $list: __words(__deburr($string));
    $length: length($list);
    $result: '';

    @while ($index <= $length) {
        $result: __call($callback, null, $result, nth($list, $index), $index);

        $index: $index + 1;
    }

    @return $result;
}
@function __create-compounder($callback) {
    $_: scope-start();
    $_: scope(callback, $callback);
    $scoped-function: scoped-function(__create-compounder-function);
    $_: scope-end();

    @return $scoped-function;
}


@function __create-ctor-wrapper() {}

@function __create-extremum-function($collection, $iteratee: null, $this-arg: null) {
    $list-function: this(list-function);
    $is-min: this(is-min);

    @if ($this-arg and __is-iteratee-call($collection, $iteratee, $this-arg)) {
        $iteratee: null;
    }

    $function: __get-callback();
    $no-iteratee: ($iteratee == null);

    @if not ($function == __base-callback and $no-iteratee) {
        $no-iteratee: false;
        $iteratee: __call($function, null, $iteratee, $this-arg, 3);
    }

    @if ($no-iteratee) {
        $is-list: __is-list($collection);

        @if (not $is-list and __is-string($collection)) {
            $iteratee: __char-at-callback;
        } @else {
            @return __call($list-function, null, if($is-list, $collection, __to-iterable($collection)));
        }
    }

    @return __extremum-by($collection, $iteratee, $is-min);
}
@function __create-extremum($list-function, $is-min: false) {

    $_: scope-start();
    $_: scope(list-function, $list-function);
    $_: scope(is-min, $is-min);

    $function: scoped-function(__create-extremum-function);

    $_: scope-end();

    @return $function;
}

@function __create-hybrid-wrapper() {}

@function __create-pad($string, $length, $chars: ' ') {
    $str-length: str-length($string);

    @if ($str-length >= $length) or not (__native-is-finite($length)) {
        @return '';
    }

    $pad-length: $length - $str-length;
    $chars: $chars + '';

    @return str-slice(__repeat($chars, ceil($pad-length / str-length($chars))), 1, $pad-length);
}

// @debug __create-pad('abcd', 14);

@function __create-partial-wrapper() {}

// TODO
@function __create-wrapper($func, $bitmask, $this-arg, $partials: null, $holders: null, $arg-pos: null, $ary: null, $arity: null) {
    // $is-bind-key: $bitmask + const-get('BIND_KEY_FLAG');

    // @if (not $is-bind-key and not __is-function($func)) {
    //     @error 'FUNC_ERROR_TEXT';
    // }

    // $length: if($partials, length($partials), 0);

    // @if ($length == 0) {
    //     // $bitmask = TODO

    // }
}

@function __equal-lists($list, $other, $equal-func, $customizer, $is-where, $stack-a, $stack-b) {
    $index: 1;
    $list-length: length($list);
    $other-length: length($other);
    $result: true;

    @if not ($list-length == $other-length)
        and not ($is-where and ($other-length > $list-length))
    {
        @return false;
    }

    @while ($result and ($index < $list-length)) {
        $list-value: nth($list, $index);
        $other-value: nth($other, $index);

        $result: null;

        @if ($customizer) {
            $result: if($is-where,
                call($customizer, $other-value, $list-value, $index),
                call($customizer, $list-value, $other-value, $index));
        }

        @if (__is-undefined($result)) {
            @if ($is-where) {
                $other-index: $other-length;

                $break: false;
                @while ($other-index > 0 and not $break) {
                    $other-value: nth($other, $other-index);
                    $result: if(if($list-value, $list-value == $other-value, false),
                        true,
                        call($equal-func, $list-value, $other-value, $customizer, $is-where, $stack-a, $stack-b));

                    @if ($result) {
                        $break: true;
                    }

                    $other-index: $other-index - 1;
                }
            } @else {
                $result: if(if($list-value, $list-value == $other-value, false),
                    true,
                    call($equal-func, $list-value, $other-value, $customizer, $is-where, $stack-a, $stack-b));
            }
        }

        $index: $index + 1;
    }

    @return if($result, true, false);
}

@function __equal-by-tag() {}

@function __equal-maps($map, $other, $equal-func: false, $customizer: false, $is-where: false, $stack-a: null, $stack-b: null) {
    $map-props: map-keys($map);
    $map-length: length($map-props);
    $other-props: map-keys($other);
    $other-length: length($other-props);

    @if ($map-length != $other-length) and not ($is-where) {
        @return false;
    }

    $has-ctor: false;
    $index: 1;

    @while ($index <= $map-length) {
        $key: nth($map-props, $index);
        $result: map-has-key($other, $key);

        @if ($result) {
            $map-value: get($map, $key);
            $other-value: get($other, $key);

            $result: $__undefined__;

            @if ($customizer) {
                $result: if($is-where,
                    call($customizer, $other-value, $map-value, $key),
                    call($customizer, $map-value, $other-value, $key));
            }

            @if (__is-undefined($result)) {
                $result: if($map-value, ($map-value == $other-value), false);
                $result: if($result, $result, call($equal-func, $map-value, $other-value, $customizer, $is-where, $stack-a, $stack-b));
            }
        }

        @if not ($result) {
            @return false;
        }

        $has-ctor: if($has-ctor, true, ($key == '_constructor'));

        $index: $index + 1;
    }

    @if not ($has-ctor) {
        // todo
    }

    @return true;
}

@function __extremum-by-iteratee($value, $index, $collection) {
    $collection: scope(collection);
    $iteratee: scope(iteratee);
    $is-min: scope(is-min);
    $ex-value: scope(ex-value);
    $computed: scope(computed);
    $result: scope(result);

    $current: __call($iteratee, null, $value, $index, $collection);
    
    @if (if($is-min, $current < $computed, $current > $computed))
        or ($current == $ex-value and $current == $result)
    {
        $_: scope(computed, $current);
        $_: scope(result, $value);
    }

    @return true;
}
@function __extremum-by($collection, $iteratee, $is-min: false) {
    $ex-value: if($is-min, const-get('POSITIVE_INFINITY'), const-get('NEGATIVE_INFINITY'));
    $computed: $ex-value;
    $result: $computed;

    $_: scope-start();
        $_: scope(collection, $collection);
        $_: scope(iteratee, $iteratee);
        $_: scope(is-min, $is-min);
        $_: scope(ex-value, $ex-value);
        $_: scope(computed, $computed);
        $_: scope(result, $result);

        $iteratee: scoped-function(__extremum-by-iteratee);

        $_: __base-each($collection, $iteratee);

        $result: scope(result);
    $_: scope-end();

    @return $result;
}

// @debug __extremum-by((1 3 4 5 6 9 2 4 3), __identity, true);

@function __get-callback($function: __identity, $this-arg: null, $arg-count: null) {
    $result: __callback;

    $result: if($result == __callback, __base-callback, $result);

    @return if($arg-count, call($result, $function, $this-arg, $arg-count), $result);
}

@function __get-data($function) {
    @if not static-get('__meta-map__') {
        @return __noop();
    }

    @return static-get('__meta-map__' $function);
}

@function __get-index-of($collection: null, $target: $__undefined__, $from-index: $__undefined__) {
    $result: __base-index-of;

    @return if($collection, call($result, $collection, $target, $from-index), $result);
}

@function __get-view($start, $end, $transforms) {
    $index: 1;
    $length: if($transforms, length($transforms), 0);

    @while ($index <= $length) {
        $data: nth($transforms, $index);
        $size: get($data, size);
        $type: get($data, type);

        @if ($type == 'drop') {
            $start: $start + $size;
        } @else if ($type == 'drop-right') {
            $end: $end - $size;
        } @else if ($type == 'take') {
            $end: __native-min($end, $start + $size);
        } @else if ($type == 'take-right') {
            $start: __native-max($start, $end - $size);
        }

        $index: $index + 1;
    }

    @return (
        'start': $start,
        'end': $end
    );
}

@function __init-clone-list($list) {
    $length: length($list);
    $result: ();

    @return $result;
}

@function __init-clone-map($map) {
    $ctor: get($map, '_constructor');

    @if not (function-exists($ctor) and __is-ctor($ctor)) {
        $ctor: 'Object';
    }

    @return new($ctor);
}

// @function Dog() {
//     @return (
//         legs: 4,
//         sound: 'bark'
//     );
// }
// $dog: new(Dog);
// @debug $dog;
// @debug __init-clone-map($dog);

@function __init-clone-by-tag() {}

@function x__is-list-like($value) {
    // _helpers
}
@function __is-bindable($function) {
    // Can't check for this(); there's no toString in Sass for functions
    @return function-exists($function);
}

@function __is-iteratee-call($value, $index, $map) {
    @if not (__is-map-like($map)) {
        @return false;
    }

    $type: type-of($index);
    $prereq: false;

    @if ($type == 'number') {
        $length: length($map);
        $prereq: (__is-length($length) and __is-index($index, $length));
    } @else {
        $prereq: ($type == 'string');
    }

    @return if($prereq, get($map, $index) == $value, false);
}

@function x__is-length() {
    // _helpers
}

@function x__is-strict-comparable() {
    // _helpers
}

@function __merge-data() {}

@function __pick-by-list($map, $props) {
    $type: type-of($map);
    $map: __to-map($map);

    $index: 1;
    $length: length($props);
    $result: ();

    @while ($index <= $length) {
        $key: nth($props, $index);

        @if (map-has-key($map, $key)) {
            $result: set($result, $key, get($map, $key));
        }

        $index: $index + 1;
    }

    @return if($type == 'list', __to-list($result), $result);
}

// @debug __pick-by-list((2 4 6 8 10 12 14), (4 5 6));
// @debug __pick-by-list((a: 1, b: 2, c: 3, d: 4, e: 5), (a, c, e));

@function __pick-by-callback-iteratee($value, $key, $map) {
    $result: scope(result);
    $predicate: scope(predicate);

    @if (call($predicate, $value, $key, $map)) {
        $_: scope(result, set($result, $key, $value));
    }

    @return true;
}
@function __pick-by-callback($map, $predicate) {
    $result: ();

    $_: scope-start();
        $_: scope(map, $map);
        $_: scope(predicate, $predicate);
        $_: scope(result, $result);

        $_: __base-for-in($map, __pick-by-callback-iteratee);

        $result: scope(result);
    $_: scope-end();

    @return $result;
}

// @debug __pick-by-callback((a: 1, b: 2, c: 3, d: 4, e: 5), is-even);

@function __reorder($list, $indexes) {
    $list-length: length($list);
    $length: __native-min(length($indexes), $list-length);
    $old-list: __list-copy($list);

    $list: __to-map($list);

    @while ($length > 0) {
        $index: nth($indexes, $length);

        $list: set($list, $length, if(__is-index($index, $list-length), nth($old-list, $index), $__undefined__));

        $length: $length - 1;
    }

    @return __to-list($list);
}

@function __set-data($key, $value) {
    // No need to support hot loop detection at the moment
    @return __base-set-data($key, $value);
}

@function __shim-is-plain-map() {
    // not implemented
}

@function __shim-keys() {
    // not implemented
}

@function __to-iterable($value) {
    @if ($value == null) {
        @return ();
    }

    @if not (__is-length(length($value))) {
        @return __values($value);
    }

    @if (__is-string($value)) {
        @return __to-map(__string-split($value, ''));
    }

    @return if(__is-map($value), $value, __to-map($value));
}

// @debug __to-iterable(null);
// @debug __to-iterable('abcde');
// @debug __to-iterable((foo, bar, baz, quo));
// @debug __to-iterable((foo: bar, baz: quo));

@function x__to-map($value) {
    // _helpers
}

@function __to-string($value, $args...) {
    @if (type-of($value) == 'string') {
        @return $value;
    }

    @if ($value == null) {
        @return '';
    }

    @return inspect($value);
}

// @debug __to-string('hello');
// @debug __to-string(hello);
// @debug __to-string(12345);
// @debug __to-string((foo: bar));
// @debug __to-string(null);

@function __chunk($list, $size: null, $guard: null) {
    @if (if($guard, __is-iteratee-call($list, $size, $guard), ($size == null))) {
        $size: 1;
    } @else {
        $size: __native-max(if(__is-falsey($size), 1, $size), 1);
    }

    $index: 1;
    $length: if($list, length($list), 0);
    $result: ();

    @while ($index <= $length) {
        $result: append($result, __base-slice($list, $index - 1, $index + $size - 1));

        $index: $index + $size;
    }

    @if (length($result) == 1) {
        $result: ($result,);
    }

    @return $result;
}

// @debug __chunk((a b c d), 2);
// @debug __chunk((a b c d), 3);

@function __compact($list) {
    $index: 1;
    $length: if($list, length($list), 0);
    $result: ();

    @while ($index <= $length) {
        $value: nth($list, $index);

        @if not (__is-falsey($value)) {
            $result: append($result, $value);
        }

        $index: $index + 1;
    }

    @return $result;
}

// @debug __compact((0 1 false 2 '' 3));

@function __difference($arguments...) {
    $index: 1;
    $length: length($arguments);
    $value: null;

    $break: false;
    @while ($index <= $length and not $break) {
        $value: nth($arguments, $index);

        @if (__is-list($value)) or (__is-arguments($value)) {
            $break: true;
        } @else {
            $index: $index + 1;
        }
    }

    @return __base-difference($value, __base-flatten($arguments, false, true, $index + 1));
}

// @debug __difference((1 2 3), (5 2 10), (1 90 91));

@function __drop($list, $n: null, $guard: false) {
    $length: if($list, length($list), 0);

    @if ($length == 0) {
        @return ();
    }

    @if (if($guard, __is-iteratee-call($list, $n, $guard), ($n == null))) {
        $n: 1;
    }

    $n: if(__is-falsey($n), 0, if($n < 0, 0, min($n, length($list))));

    @return __base-slice($list, $n);
}

// @debug __drop((1 2 3));
// @debug __drop((1 2 3), 2);
// @debug __drop((1 2 3), 5);
// @debug __drop((1 2 3), 0);

@function __drop-right($list, $n: null, $guard: false) {
    $length: if($list, length($list), 0);

    @if ($length == 0) {
        @return ();
    }

    @if (if($guard, __is-iteratee-call($list, $n, $guard), ($n == null))) {
        $n: 1;
    }

    $n: $length - if(type-of($n) == 'number', $n, if(__is-falsey($n), 0, 1));

    @return __base-slice($list, 0, if($n < 0, 0, $n));
}

// @debug __drop-right((1 2 3 4 5));
// @debug __drop-right((1 2 3 4 5), 2);

@function __drop-right-while($list, $predicate: __identity, $this-arg: null) {
    $length: if($list, length($list), 0);

    @if ($length == 0) {
        @return ();
    }

    $predicate: __get-callback($predicate, $this-arg, 3);

    @while ($length > 0
        and __is-truthy(__call($predicate, null, nth($list, $length), $length, $list))) {
        $length: $length - 1;
    }

    @return __base-slice($list, 0, $length);
}

// @debug __drop-right-while((1 2 3 4 5 6 7 8 10 12 14), is-even);


@function __drop-while($list, $predicate: __identity, $this-arg: null) {
    $length: if($list, length($list), 0);

    @if ($length == 0) {
        @return ();
    }

    $index: 1;

    $predicate: __get-callback($predicate, $this-arg, 3);

    @while ($index <= $length
        and __is-truthy(__call($predicate, null, nth($list, $index), $index, $list))) {
        $index: $index + 1;
    }

    @return __base-slice($list, $index - 1);
}

// @debug __drop-while((2 4 6 8 10 12 13 14 15 16), is-even);

@function __fill($list, $value, $start: null, $end: null) {
    $length: if($list, length($list), 0);

    @if not ($length) {
        @return ();
    }

    @if ($start and __is-number($start) and __is-iteratee-call($list, $value, $start)) {
        $start: 1;
        $end: $length;
    }

    @return __base-fill($list, $value, $start, $end);
}

// @debug __fill(1 2 3, 'a', 2);

@function __find-index($list, $predicate: __identity, $this-arg: null) {
    $index: 1;
    $length: if($list, length($list), 0);

    $predicate: __get-callback($predicate, $this-arg, 3);

    @while ($index <= $length) {
        $iteration: __call($predicate, $this-arg, nth($list, $index), $index, $list);

        @if (__is-truthy($iteration)) {
            @return $index;
        }

        $index: $index + 1;
    }

    @return -1;
}

// @debug __find-index((1 3 5 7 2 9), is-even);
// @debug __find-index((1 3 5 7 3 9), is-even);

@function __find-last-index($list, $predicate: __identity, $this-arg: null) {
    $length: if($list, length($list), 0);

    $predicate: __get-callback($predicate, $this-arg, 3);

    @while ($length > 0) {
        @if (__call($predicate, $this-arg, nth($list, $length), $length, $list)) {
            @return $length;
        }

        $length: $length - 1;
    }

    @return -1;
}

// @debug __find-last-index((1 2 3 5 7 9 4 3), is-even);

@function __first($list, $args...) {
    @return if($list, nth($list, 1), $__undefined__);
}

// @debug __first((2 4 6 8));
// @debug __first(null);

@function __flatten($list, $is-deep: false, $guard: null) {
    $length: if($list, length($list), 0);

    @if ($guard and __is-iteratee-call($list, $is-deep, $guard)) {
        $is-deep: false;
    }

    @return if($length > 0, __base-flatten($list, $is-deep), ());
}

// @debug __flatten((1 (2 3) (4 (5 6)) (7 (8 (9 10 100))))); // single level flatten
// @debug __flatten((1 (2 3) (4 (5 6)) (7 (8 (9 10 100)))), true); // deep flatten

@function __flatten-deep($list) {
    $length: if($list, length($list), 0);

    @return if($length > 0, __base-flatten($list, true), ());
}

// @debug __flatten-deep((1 (2 3) (4 (5 6)) (7 (8 (9 10 100))))); // deep flatten

@function __index-of($list, $value, $from-index: 1) {
    $length: if($list, length($list), 0);

    @if ($length == 0) {
        @return -1;
    }

    @if (type-of($from-index) == 'number') {
        $from-index: if($from-index < 0, __native-max($length + $from-index, 0), $from-index);
    } @else if not (__is-falsey($from-index)) {
        $index: __binary-index($list, $value);
        $other: nth($list, $index);

        @return if($value == $other, $index, -1);
    }

    @return __base-index-of($list, $value, $from-index);
}

// @debug __index-of((10 20 30 40 50), 10);

@function __initial($list) {
    @return __drop-right($list, 1);
}

// @debug __initial((1 2 3));

@function __intersection($arguments...) {
    $args: ();
    $args-index: 1;
    $args-length: length($arguments);
    $caches: ();
    $index-of: __get-index-of();
    $is-common: $index-of == '__base-index-of';

    @while ($args-index <= $args-length) {
        $value: nth($arguments, $args-index);

        @if (__is-list($value) or __is-arguments($value)) {
            $args: append($args, $value);

            @if ($is-common and length($value) >= 120) {
                $caches: append($caches, __create-cache(if($args-index, $value, false)));
            } @else {
                $caches: append($caches, false);
            }
        }

        $args-index: $args-index + 1;
    }

    $args-length: length($args);

    $list: nth($args, 1);
    $index: 1;
    $length: if($list, length($list), 0);
    $result: ();
    $seen: nth($caches, 1);

    $continue-outer: false;
    @while ($index <= $length) {
        $continue-outer: false;
        $value: nth($list, $index);

        @if (if($seen, __cache-index-of($seen, $value), __index-of($result, $value)) < 0) {
            $args-index: $args-length;

            @while ($args-index > 0 and not $continue-outer) {
                $cache: nth($caches, $args-index);

                @debug $value, __index-of($result, $value), __index-of(nth($args, $args-index), $value);

                @if (if($cache,
                        __cache-index-of($cache, $value),
                        __index-of(nth($args, $args-index), $value))
                    < 0)
                {
                    $continue-outer: true;
                }

                @if not ($continue-outer) {
                    @if ($seen) {
                        $seen: append($seen, $value);
                    }

                    $result: append($result, $value);

                    $args-index: $args-index - 1;
                }
            }
        }

        $index: $index + 1;
    }

    @return __base-uniq($result); // todo: fix
}

// @debug __intersection((1 2 3), (2 3 5), (3 5 7));

@function __last($list) {
    $length: if($list, length($list), 0);

    @return if(not __is-falsey($length), nth($list, $length), $__undefined__);
}

// @debug __last((1 3 439523 9123 9));

@function __last-index-of($list, $value, $from-index: length($list)) {
    $length: if($list, length($list), 0);

    @if (__is-falsey($length)) {
        @return -1;
    }

    $index: $length;

    @if (type-of($from-index) == 'number') {
        $index: if($from-index < 0, __native-max($length + $from-index, 0), __native-min($from-index, $length - 1)) + 1;
    } @else if not (__is-falsey($from-index)) {
        $index: __binary-index($list, $avlue, true) - 1;

        $other: nth($list, $index);

        @return if($value == other, $index, -1);
    }

    @while ($index > 0) {
        @if (nth($list, $index) == $value) {
            @return $index;
        }

        $index: $index - 1;
    }

    @return -1;
}

// @debug __last-index-of((12 23 34 45 56 1 2 3 4 5 6 7 23 39 9), 23);

@function __pull($arguments...) {
    $list: nth($arguments, 1);

    @if not ($list and length($list)) {
        @return $list;
    }

    $index: 1;
    $index-of: __get-index-of();
    $length: length($arguments);

    @while ($index <= $length) {
        $from-index: 1;
        $value: nth($arguments, $index);

        @while (__index-of($list, $value, $from-index) > -1) {
            $from-index: __index-of($list, $value, $from-index);

            $list: __splice($list, $from-index, 1);
        }

        $index: $index + 1;
    }

    @return $list;
}

// @debug __pull((1 2 3 1 2 3), 2, 3);

@function __pull-at($arguments...) {
    $list: nth($arguments, 1);

    // TODO - implement base-pull-at!!
    @return __base-pull-at(if($list, $list, ()), __base-flatten($arguments, false, false, 1));
}

// @debug __pull-at((5 10 15 20), 2, 4);

@function __remove($list, $predicate: __identity, $this-arg: null) {
    $index: 1;
    $length: if($list, length($list), 0);
    $result: ();

    $predicate: __get-callback($predicate, $this-arg, 3);

    @while ($index <= $length) {
        $value: nth($list, $index);

        @if (call($predicate, $value, $index, $list)) {
            $result: append($result, $value);
            $list: __splice($list, $index, 1);

            $index: $index - 1;
            $length: $length - 1;
        }

        $index: $index + 1;
    }

    @return $result;

    // todo: handle mutation
}

// @debug __remove((1 2 3 4 5 6), is-even);

@function __rest($list) {
    @return __drop($list, 1);
}

// @debug __rest((1 2 3));

@function __slice($list, $start: 0, $end: length($list)) {
    $length: if($list, length($list), 0);

    @if (__is-falsey($length)) {
        @return ();
    }

    @if ($end and type-of($end) == 'number' and __is-iteratee-call($list, $start, $end)) {
        $start: 1;
        $end: $length;
    }

    @return __base-slice($list, $start, $end);
}

// @debug __slice((1 2 3), -1);

@function __sorted-index($list, $value, $iteratee: __identity, $this-arg: null) {
    $function: __get-callback($iteratee);

    @return if($function == __base-callback and $iteratee == null,
        __binary-index($list, $value),
        __binary-index($list, $value, call($function, $iteratee, $this-arg, 1)));

    // todo fix binary-index
}

// @debug __sorted-index((4 4 5 5 6 6), 5); // 3

@function __sorted-last-index($list, $value, $iteratee: __identity, $this-arg: null) {
    $function: __get-callback($iteratee);

    @return if($function == __base-callback and $iteratee == null,
        __binary-index($list, $value),
        __binary-index($list, $value, call($function, $iteratee, $this-arg, 1), true));
}

@function __take($list, $n: 1, $guard: null) {
    $length: if($list, length($list), 0);

    @if (__is-falsey($length)) {
        @return ();
    }

    @if (if($guard, __is-iteratee-call($list, $n, $guard), $n == null)) {
        $n: 1;
    }

    @return __base-slice($list, 0, if($n < 0, 0, $n));

}

// @debug __take((1 2 3), 5);

@function __take-right($list, $n: 1, $guard: null) {
    $length: if($list, length($list), 0);

    @if (__is-falsey($length)) {
        @return ();
    }

    @if (if($guard, __is-iteratee-call($list, $n, $guard), $n == null)) {
        $n: 1;
    }

    $n: $length - if(type-of($n) == 'number', $n, if(__is-truthy($n), 1, 0));

    @return __base-slice($list, if($n < 0, 0, $n));
}

// @debug __take-right((10 20 30 40 50), 3);

@function __take-right-while($list, $predicate: __identity, $this-arg: null) {
    $length: if($list, length($list), 0);

    @if (__is-falsey($length)) {
        @return ();
    }

    $predicate: __get-callback($predicate, $this-arg, 3);

    @while ($length > 0 and call($predicate, nth($list, $length), $length, $list)) {
        $length: $length - 1;
    }

    @return __base-slice($list, $length);
}


// @debug __take-right-while((1 2 3 4 5 6 8 10 12), is-even);

@function __take-while($list, $predicate: __identity, $this-arg: null) {
    $length: if($list, length($list), 0);

    @if (__is-falsey($length)) {
        @return ();
    }

    $index: 1;
    $predicate: __get-callback($predicate, $this-arg, 3);

    @while ($index <= $length and call($predicate, nth($list, $index), $index, $list)) {
        $index: $index + 1;
    }

    @return __base-slice($list, 0, $index - 1);
}

// @debug __take-while((2 4 6 8 9 10 12 14 15), is-even);

@function __union($arguments...) {
    @return __base-uniq(__base-flatten($arguments, false, true));
}

// @debug __union((1 2 3), (5 2 1 4), (2 1));

@function __uniq($list, $is-sorted: false, $iteratee: null, $this-arg: null) {
    $length: if($list, length($list), 0);

    @if (__is-falsey($length)) {
        @return ();
    }

    // Juggle arguments
    @if (type-of($is-sorted) != 'bool' and $is-sorted != null) {
        $this-arg: $iteratee;
        $iteratee: if(__is-iteratee-call($list, $is-sorted, $this-arg), null, $is-sorted);
        $is-sorted: false;
    }

    $function: __get-callback();

    @if not ($function == __base-callback and $iteratee == null) {
        $iteratee: call($function, $iteratee, $this-arg, 3);
    }

    @return if($is-sorted and __get-index-of() == __base-index-of,
        __sorted-uniq($list, $iteratee),
        __base-uniq($list, $iteratee));
}

// @debug __uniq((1 2 3 1 4 1 3));

@function __unzip($list) {
    $index: 1;
    $length: if($list, if(length($list) > 0, __list-max(__list-map($list, __get-length)), 0), 0);
    $result: ();

    @while ($index <= $length) {
        $result: append($result, __list-map($list, __base-property($index)));

        $index: $index + 1;
    }

    @return $result;
}

// @debug __unzip(((fred, 30, true), (barney, 40, false)));
// todo fix null == false

@function __without($list, $args...) {
    @return __base-difference($list, $args);
}

// @debug __without((1 2 3 4 5 0 1 4 29 0 1), 0, 1);

@function __xor($arguments...) {
    $index: 1;
    $length: length($arguments);
    $result: ();

    @while ($index <= $length) {
        $list: nth($arguments, $index);

        @if (__is-list($list) or __is-arguments($list)) {
            $result: if($result,
                join(__base-difference($result, $list), __base-difference($list, $result)),
                $list);
        }

        $index: $index + 1;
    }

    @return if(__is-truthy($result), __base-uniq($result), ());
}

// @debug __xor((1 2 3), (5 2 1 4));
// @debug __xor((1 2 5), (2 3 5), (3 4 5));

@function __zip($arguments...) {
    $length: length($arguments);
    $list: ();

    @while ($length > 0) {
        $list: set($list, $length, nth($arguments, $length));

        $length: $length - 1;
    }

    @return __unzip(__to-list($list));
}

// @debug __zip((fred barney), (30 40), (true false));
// todo: see about reversed order

@function __zip-map($props, $values: ()) {
    $index: 1;
    $length: if($props, length($props), 0);
    $result: ();

    @if ($length > 0 and not $values and not __is-list(nth($props, 1))) {
        $values: ();
    }

    @while ($index <= $length) {
        $key: nth($props, $index);

        @if ($values) {
            $result: set($result, $key, nth($values, $index));
        } @else if ($key) {
            $result: set($result, nth($key, 1), nth($key, 2));
        }

        $index: $index + 1;
    }

    @return $result;
}

// @debug __zip-map((fred barney), (30 40));

@function __chain($value) {
    $result: __sassdash($value);

    $result: set($result, '__chain__', true);

    @return $result;
}

// @debug __chain(45);


@function __tap($value, $interceptor, $this-arg: null) {
    $value: __call($interceptor, $this-arg, $value);

    @return $value;

    // TODO mutation
}

// @debug __tap(42, double);

@function __thru($value, $interceptor, $this-arg: null) {
    @return __call($interceptor, $this-arg, $value);
}

@function __wrapper-chain() {
    @return __chain(this());
}

@function __wrapper-reverse-function($value) {
    @return __list-reverse($value);
}
@function __wrapper-reverse() {
    $value: this('__wrapped__');

    @if (instanceof($value, LazyWrapper)) {
        @return new(SassdashWrapper, __list-reverse($value));
    }

    @return __thru($value, __wrapper-reverse-function, this());
}

// $_: scope-start();
// $_: scope('__wrapped__', (1 2 3 4 5));

// @debug __wrapper-reverse();

@function __wrapper-to-string() {
    @return __call(value, this()) + '';
}

// $_: scope-start();
// $_: scope(value, foo-value);
// $_: scope(foo, 42);
// @function foo-value() {
//     @return this(foo);
// }

// @debug type-of(__wrapper-to-string());

@function __at($arguments...) {
    $collection: nth($arguments, 1);
    $length: if($collection, length($collection), 0);

    @if (__is-length($length)) {
        $collection: __to-iterable($collection);
    }

    @return __base-at($collection, __base-flatten($arguments, false, false, 2));
}

// @debug __at((a b c d e f g), 1, 3, 5);

@function __includes($collection, $target, $from-index: 1) {
    $length: if($collection, length($collection), 0);

    @if not(__is-length($length)) {
        $collection: __values($collection);
        $length: length($collection);
    }

    @if (__is-falsey($length)) {
        @return false;
    }

    @if (type-of($from-index) == 'number') {
        $from-index: if($from-index < 0, __native-max($length + $from-index, 0), $from-index);
    } @else {
        $from-index: 0;
    }

    @return if(type-of($collection) == 'string' or not __is-list($collection) and __is-string($collection),
        ($from-index < $length and __index-of($collection, $target, $from-index) > 1),
        (__get-index-of($collection, $target, $from-index) > -1));
}

// @debug __includes((a b c d e f g), d, 4);

@function __count-by-iteratee($result, $value, $key, $args...) {
    $result: if(map-has-key($result, $key), set($result, $key, get($result, $key) + 1), set($result, $key, 1));

    @return $result;
}
@function __count-by($arguments...) {
    $function: __create-aggregator(__count-by-iteratee);

    @return __call($function, null, $arguments...);
}
// todo

// @debug __count-by((1 2 3 4 5 6 7 9 11 13 15 17), is-even);

@function __every($collection, $predicate: __identity, $this-arg: $__undefined__) {
    $function: if(__is-list($collection), __list-every, __base-every);

    @if (not __function-exists($predicate) or not __is-undefined($this-arg)) {
        $predicate: __get-callback($predicate, $this-arg, 3);
    }

    @return __call($function, null, $collection, $predicate);
}

// @debug __every((true 1 null 'yes'));
// @debug __every((2 4 6 8 10), is-even);

@function __filter($collection, $predicate: __identity, $this-arg: null) {
    $function: if(__is-list($collection), __list-filter, __base-filter);

    $predicate: __get-callback($predicate, $this-arg, 3);

    @return __call($function, $this-arg, $collection, $predicate);
}

// @debug __filter((1 2 3 4 5 6 6 1239), is-even);

// $_: scope-start();
// $_: scope(poop, 12341234);

// $poop: __callback('poop', this());

// $_: scope-end();
// @debug $poop;
// @debug __call($poop, null, (poop: 78788));


// @debug __filter(((a: 123, bam: true), (a: 234, bam: false), (a: 345, bam: true)), 'bam');

@function __find($collection, $predicate: __identity, $this-arg: null) {
    @if (__is-string($collection)) {
        $collection: __to-list($collection);
    }

    @if (__is-list($collection)) {
        $index: __find-index($collection, $predicate, $this-arg);

        @return if($index > -1, nth($collection, $index), $__undefined__);
    }

    $predicate: __get-callback($predicate, $this-arg, 3);

    @return __base-find($collection, $predicate, __base-each);
}

// @debug __find((123, 233, 137, 138, 592, 3939), is-even);
// @debug __find(((a: 123, bam: false), (a: 234, bam: false), (a: 345, bam: true)), 'bam');

@function __find-last($collection, $predicate: __identity, $this-arg: null) {
    @if (__is-string($collection)) {
        $collection: __to-list($collection);
    }

    @if (__is-list($collection)) {
        $index: __find-last-index($collection, $predicate, $this-arg);

        @return if($index > -1, nth($collection, $index), $__undefined__);
    }

    $predicate: __get-callback($predicate, $this-arg, 3);

    @return __base-find($collection, $predicate, __base-each-right);
}

// @debug __find-last((123, 233, 137, 138, 592, 3939), is-even);
// @debug __find-last(((a: 123, bam: true), (a: 234, bam: true), (a: 345, bam: false)), 'bam');

@function __find-where($collection, $source) {
    @return __find($collection, __matches($source));
}

// @debug __find-where(((a: 123, bam: false), (a: 234, bam: true), (a: 345, bam: false)), (bam: true));

@function __for-each($collection, $iteratee: __identity, $this-arg: $__undefined__) {
    @return if(__function-exists($iteratee) and __is-undefined($this-arg) and __is-list($collection),
        __list-each($collection, $iteratee),
        __base-each($collection, __bind-callback($iteratee, $this-arg, 3)));
}

// @debug __for-each((1 2 3), double);

@function __for-each-right($collection, $iteratee: __identity, $this-arg: $__undefined__) {
    @return if(__function-exists($iteratee) and __is-undefined($this-arg) and __is-list($collection),
        __list-each-right($collection, $iteratee),
        __base-each-right($collection, __bind-callback($iteratee, $this-arg, 3)));
}

@function __group-by-aggregator($result, $value, $key, $args...) {
    @if (map-has-key($result, $key)) {
        $result: set($result, $key, append(get($result, $key), $value));
    } @else {
        $result: set($result, $key, $value);
    }

    @return $result;
}
@function __group-by($arguments...) {
    $function: __create-aggregator(__group-by-aggregator);

    @return __call($function, null, $arguments...);
}

// @function flooor($value, $args...) {
//     @return floor($value);
// }
// @debug __group-by((4.2, 4.3, 6.1, 7.3), flooor);

@function __index-by-aggregator($result, $value, $key, $args...) {
    @return set($result, $key, $value);
}
@function __index-by($arguments...) {
    $function: __create-aggregator(__index-by-aggregator);

    @return __call($function, null, $arguments...);
}

// @debug __index-by(((a: 123, bam: false), (a: 234, bam: true), (a: 345, bam: false)), 'bam');

@function __invoke($collection, $method-name, $args...) {
    @return __base-invoke($collection, $method-name, $args...);
}

// @debug __invoke(((3 1 2), (8 2 3 4 1 2 5 6 9)), sort-iteratee, asc);

@function __map($collection, $iteratee: __identity, $this-arg: null) {
    $function: if(__is-list($collection), __list-map, __base-map);

    $iteratee: __get-callback($iteratee, $this-arg, 3);

    @return __call($function, null, $collection, $iteratee);
}

// @debug __map(((foo: bar, baz: quo), (foo: wat, baz: weay)), 'baz');

@function __max($arguments...) {
    $function: __create-extremum(__list-max);

    @return __call($function, null, $arguments...);
}

// @debug __max((1 5 8 3 2 5 88 3 2 5 4));
// @debug __max(((a: asdf, foo: 38), (a: qwer, foo: 22), (a: zxcv, foo: 29)), 'foo');

@function __min($arguments...) {
    $function: __create-extremum(__list-min, true);

    @return __call($function, null, $arguments...);
}

// @debug __min((1 5 8 3 2 5 88 3 2 5 4));
// @debug __min(((a: asdf, foo: 38), (a: qwer, foo: 22), (a: zxcv, foo: 29)), 'foo');

@function __partition-initializer() {
    @return (1: (), 2: ());
}
@function __partition-aggregator($result, $value, $key, $args...) {
    $result-key: if($key, 0, 1);
    $result-value: get($result, $result-key);
    $result-value: if($result-value, $result-value, ());

    @return set($result, $result-key, append($result-value, $value));
}
@function __partition($arguments...) {
    $function: __create-aggregator(__partition-aggregator);

    @return __to-list(__call($function, null, $arguments...));
}

// @debug __partition((1 2 3), is-even);

@function __pluck($collection, $key) {
    @return __map($collection, __property($key));
}

// @debug __pluck(((a: 1, b: 2), (a: 3, b: 4)), 'a');

@function __reduce($collection, $iteratee: __identity, $accumulator: null, $this-arg: null) {
    $function: if(__is-list($collection), __list-reduce, __base-reduce);

    @debug $function, __get-callback($iteratee, $this-arg, 4), $accumulator;

    @return __call($function, null,
        $collection,
        __get-callback($iteratee, $this-arg, 4),
        $accumulator,
        ($accumulator == null and $this-arg == null),
        __base-each);
}

// @function sum($sum, $n, $args...) {
//     @return $sum + $n;
// }
// @debug __reduce((1 2 3), sum);

// @function double-map($result, $n, $key, $args...) {
//     $result: set($result, $key, double(get($result, $key)));

//     @return $result;
// }
// @debug __reduce((a: 1, b: 2, c: 3), double-map);
// @debug __call(__base-reduce, null, (a:1,b:2,c:3), double-map, null, true, __base-each);
// TODO fix reduce with maps!

@function __reduce-right($collection, $iteratee: __identity, $accumulator: null, $this-arg: null) {
    $function: if(__is-list($collection), __list-reduce-right, __base-reduce);

    @debug $collection, $iteratee, $function;
    @return __call($function, null, $collection, __get-callback($iteratee, $this-arg, 4), $accumulator, ($accumulator == null and $this-arg == null), __base-each-right);
}

// $list: ((0, 1), (2, 3), (4, 5));
// @function reduce-right-stuff($flattened, $other, $args...) {
//     @debug $flattened, $other, append($flattened, $other);
//     @return append($flattened, $other);
// }
// @debug __reduce-right($list, reduce-right-stuff);

@function __reject-iteratee($value, $index, $collection) {
    $predicate: this(predicate);

    @return not __call($predicate, null, $value, $index, $collection);
}
@function __reject($collection, $predicate: __identity, $this-arg: null) {
    $function: if(__is-list($collection), __list-filter, __base-filter);

    $predicate: __get-callback($predicate, $this-arg, 3);

    $_: scope-start();
    $_: scope(predicate, $predicate);

    $result: __call($function, null, $collection, __reject-iteratee);

    $_: scope-end();

    @return $result;
}

// @debug __reject((1 2 3 4 5 6 7 8), is-even);
// @debug __reject(((a: 1, b: true), (a: 2, b: false), (a: 3, b: true), (a: 4, b: false)), 'b');
// @debug __pluck(__reject(((act: 1, b: true), (act: 2, b: false), (act: 3, b: true), (act: 4, b: false)), 'b'), act); // works with __property

@function __sample($collection, $n: null, $guard: null) {
    @if (if($guard, __is-iteratee-call($collection, $n, $guard), ($n == null))) {
        $length: length($collection);
        @return if($length > 0, nth($collection, __base-random(1, $length)), $__undefined__);
    }

    $n: if(type-of($n) == 'number', $n, if($n, 1, 0));
    $result: __shuffle($collection);
    $result: __take($result, __native-min(if($n < 0, 0, $n), length($result)));

    @return $result;
}

// @debug __sample((1 2 3 4 5), 4);

@function __shuffle($collection) {
    $collection: __to-iterable($collection);

    $index: 1;
    $length: length($collection);
    $result: ();

    @while ($index <= $length) {
        $rand: __base-random(1, $index);

        @if ($index != $rand) {
            $result: set($result, $index, get($result, $rand));
        }

        $result: set($result, $rand, get($collection, $index));

        $index: $index + 1;
    }

    @return __to-list($result);
}

// @debug __shuffle((1 2 3 4 5));
// @debug __sample((1 2 3 4 5), 4);

@function __size($collection: null) {
    $length: if($collection, length($collection), 0);

    @return if(__is-length($length), $length, length(__keys($collection)));
}

// @debug __size((1 2 3 4 5));
// @debug __size((a:2,b:3,c:4));

@function __some($collection, $predicate: __identity, $this-arg: $__undefined__) {
    $function: if(__is-list($collection), __list-some, __base-some);

    @if (not __function-exists($predicate)) or (not __is-undefined($this-arg)) {
        $predicate: __get-callback($predicate, $this-arg, 3);
    }

    @return __call($function, null, $collection, $predicate);
}

// @debug __some((1 2 3 4 5), is-even);
// @debug __some((1 3 5 7 9), is-even);
// @debug __some(((a: false, b: 32), (a: true, b: 32), (a: false, b: 42)), 'a');
// @debug __some(((a: false, b: 32), (a: true, b: 32), (a: false, b: 42)), (b: 42));

@function __sort-by-iteratee($value, $key, $collection) {
    $result: this(result);
    $iteratee: this(iteratee);
    $index: this(index);

    $result: append($result, (
            'criteria': __call($iteratee, null, $value, $key, $collection),
            'index': $index,
            'value': $value
        ));

    $_: this(result, $result);
    $_: this(index, $index + 1);

    @return true;
}
@function __sort-by($collection, $iteratee: __identity, $this-arg: $__undefined__) {
    $index: 1;
    $length: if($collection, length($collection), 0);
    $result: ();

    @if (__is-truthy($this-arg) and __is-iteratee-call($collection, $iteratee, $this-arg)) {
        $iteratee: null;
    }

    $iteratee: __get-callback($iteratee, $this-arg, 3);

    $_: scope-start();
        $_: scope(result, $result);
        $_: scope(iteratee, $iteratee);
        $_: scope(index, $index);

        $sort-by-iteratee: scoped-function(__sort-by-iteratee);

        $_: __base-each($collection, $sort-by-iteratee);

        $result: scope(result);
    $_: scope-end();

    @return __base-sort-by($result, __compare-ascending);
}

// @debug __sort-by($users, 'age');

@function __sort-by-all-iteratee($value, $key, $collection) {
    $props: this(props);
    $result: this(result);
    $index: this(index);

    $length: length($props);
    $criteria: ();

    @while ($length > 0) {
        $criteria: set($criteria, $length, if($value == null, $__undefined__, get($value, get($props, $length))));

        $length: $length - 1;
    }

    $criteria: __to-list($criteria);

    $result: append($result, (
            'criteria': $criteria,
            'index': $index,
            'value': $value
        ));

    $_: this(result, $result);
    $_: this(index, $index + 1);

    @return true;
}
@function __sort-by-all($arguments...) {
    $collection: nth($arguments, 1);
    $args: $arguments;

    @if (length($args) > 3 and __is-iteratee-call(nth($args, 2), nth($args, 3), nth($args, 4))) {
        $args: ($collection, nth($args, 2));
    }

    $index: 1;
    $length: if($collection, length($collection), 0);
    $props: __base-flatten($args, false, false, 1);
    $result: ();

    $_: scope-start();
        $_: scope(props, $props);
        $_: scope(result, $result);
        $_: scope(index, $index);

        $iteratee: scoped-function(__sort-by-all-iteratee);

        $_: __base-each($collection, $iteratee);

        $result: scope(result);
    $_: scope-end();

    @return __base-sort-by($result, __compare-multiple-ascending);
}

// @debug __sort-by-all($users, ('user', 'age'));

@function __where($collection, $source) {
    @return __filter($collection, __matches($source));
}

// @debug __matches(('foo': true));
// @debug __where($users, ('foo': true));

// @function __now() {} // not implemented

@function __after-callback($arguments...) {
    $n: this(n);
    $function: this(function);

    @if ($n < 1) {
        @return __call($function, this(), $arguments...);
    }

    $_: this(n, $n - 1);

    @return null;
}
@function __after($n, $function) {
    @if not (__function-exists($function)) {
        @if (__function-exists($n)) {
            $temp: $n;
            $n: $function;
            $function: $temp;
        } @else {
            @error 'FUNC_ERROR_TEXT';
        }
    }

    $n: if(__native-is-finite($n), $n, 0);

    $_: scope-start();
    $_: scope(function, $function);
    $_: scope(n, $n);

    $after-callback: scoped-function(__after-callback);

    $_: scope-end();

    @return $after-callback;
}

// $after: __after(3, length);
// @debug __call($after, null, (1, 2, 3));
// @debug __call($after, null, (1, 2, 3));
// @debug __call($after, null, (1, 2, 3));
// @debug __call($after, null, (1, 2, 3));

@function __ary() {} // todo

@function __before-callback($arguments...) {
    $n: this(n);
    $function: this(function);
    $result: null;

    $n: $n - 1;
    $_: this(n, $n);

    @if ($n > 0) {
        $result: __call($function, this(), $arguments...);
    } @else {
        $_: this(function, null);
    }

    @return $result;
}
@function __before($n, $function) {
    @if not (__function-exists($function)) {
        @if (__function-exists($n)) {
            $temp: $n;
            $n: $function;
            $function: $temp;
        } @else {
            @error 'FUNC_ERROR_TEXT';
        }
    }

    $_: scope-start();
    $_: scope(function, $function);
    $_: scope(n, $n);

    $after-callback: scoped-function(__before-callback);

    $_: scope-end();    

    @return $after-callback;
}

// $before: __before(3, length);
// @debug __call($before, null, (1, 2, 3));
// @debug __call($before, null, (1, 2, 3));
// @debug __call($before, null, (1, 2, 3));
// @debug __call($before, null, (1, 2, 3));

@function __bind() {} // todo

@function __bind-all() {} // todo

@function __bind-key() {} // todo

@function __curry() {} // todo

@function __curry-right() {} // todo

// @function __debounce() {} // not implemented

// @function __defer() {} // not implemented

// @function __delay() {} // not implemented

@function __flow-function($arguments...) {
    $functions: this(functions);
    $length: this(length);

    $index: 1;
    $result: __call(nth($functions, $index), null, $arguments...);
    $index: $index + 1;

    @while ($index <= $length) {
        $result: __call(nth($functions, $index), null, $result);

        $index: $index + 1;
    }

    @return $result;
}
@function __flow($arguments...) {
    $functions: $arguments;
    $length: length($functions);

    @if (__is-falsey($length)) {
        @return __noop;
    }

    @if not(__list-every($functions, __function-exists)) {
        @error 'FUNC_ERROR_TEXT';
    }

    $_: scope-start();

    $_: scope(functions, $functions);
    $_: scope(length, $length);

    $scoped-function: scoped-function(__flow-function);
    $_: scope-end();

    @return $scoped-function;
}

// @function add($a, $b) { @return $a + $b; }
// @function square($a) { @return $a * $a; }
// $flow: __flow(add, square);
// @debug __call($flow, null, 1, 2);

@function __flow-right-function($arguments...) {
    $functions: this(functions);
    $index: this(from-index);

    $result: __call(nth($functions, $index), null, $arguments...);
    $index: $index - 1;

    @while ($index > 0) {
        $result: __call(nth($functions, $index), null, $result);

        $index: $index - 1;
    }

    @return $result;
}
@function __flow-right($arguments...) {
    $functions: $arguments;
    $from-index: length($functions);

    @if ($from-index < 1) {
        @return __noop;
    }

    @if not(__list-every($functions, __function-exists)) {
        @error 'FUNC_ERROR_TEXT';
    }

    $_: scope-start();

    $_: scope(functions, $functions);
    $_: scope(from-index, $from-index);

    $scoped-function: scoped-function(__flow-right-function);
    $_: scope-end();

    @return $scoped-function;
}

// @function add($a, $b) { @return $a + $b; }
// @function square($a) { @return $a * $a; }
// $flow-right: __flow-right(square, add);
// @debug __call($flow-right, null, 1, 2);

@function __memoize() {} // todo

@function __negate-function($arguments...) {
    $predicate: this(predicate);

    @return not __call($predicate, this(), $arguments...);
}
@function __negate($predicate) {
    @if not (__function-exists($predicate)) {
        @error 'FUNC_ERROR_TEXT';
    }

    $_: scope-start();
    $_: scope(predicate, $predicate);

    $scoped-function: scoped-function(__negate-function);
    $_: scope-end();

    @return $scoped-function;
}

// @debug __filter((1 2 3 4 5 6), __negate(__negate(is-even)));

@function __once($function) {
    @return __before($function, 2);
}

@function __partial-wrapper($args...) {
    $partials: this('partials');
    $func: this('func');

    $args: join($partials, $args);

    @return _call($func, null, $args...);
}
@function __partial($func, $args...) {
    $partials: $args;

    $_: scope-start();
    $_: scope('partials', $partials);
    $_: scope('func', $func);

    $scoped-function: scoped-function(__partial-wrapper);

    $_: scope-end();

    @return $scoped-function;
}

// function partial(func) {
//       var partials = baseSlice(arguments, 1),
//           holders = replaceHolders(partials, partial.placeholder);

//       return createWrapper(func, PARTIAL_FLAG, null, partials, holders);
//     }

@function __partial-right() {} // todo

@function __rearg() {} // todo

// @function __throttle() {} // not implemented

@function __wrap() {} // todo

@function __clone($value, $is-deep: null, $customizer: null, $this-arg: null) {
    @if (type-of($is-deep) != 'bool' and $is-deep != null) {
        $this-arg: $customizer;
        $customizer: if(__is-iteratee-call($value, $is-deep, $this-arg), null, $is-deep);
        $is-deep: false;
    }

    $customizer: if(__function-exists($customizer), __bind-callback($customizer, $this-arg, 1), false);

    @return __base-clone($value, $is-deep, $customizer);
}

// @debug __clone((foo: bar, baz: (quo: qote)));

@function __clone-deep($value, $customizer: null, $this-arg: null) {
    $customizer: if(__function-exists($customizer), __bind-callback($customizer, $this-arg, 1), false);

    @return __base-clone($value, true, $customizer);
}

@function __is-arguments($value) {
    @return type-of($value) == 'arglist';
}

@function __is-list($value) {
    @return type-of($value) == 'list';
}

@function __is-boolean($value) {
    @return type-of($value) == 'bool';
}

@function __is-date() {} // todo

// @function __is-element() {} // not implemented

@function __is-empty($value: null) {
    @if ($value == null) {
        @return true;
    }

    @if (__is-string($value)) {
        @return str-length($value) == 0;
    }

    @if (__is-map-like($value)) {
        @return length($value) == 0;
    }

    @if (__is-boolean($value)) {
        @return true;
    }

    @return not __length(__keys($value));
}

// @debug __is-empty(null);
// @debug __is-empty(true);
// @debug __is-empty((1 2 3));
// @debug __is-empty(());
// @debug __is-empty((a:1,b:2,c:3));

@function __is-equal($value, $other, $customizer: null, $this-arg: null) {
    $customizer: if(__function-exists($customizer), __bind-callback($customizer, $this-arg, 3), false);

    @if (not $customizer and __is-strict-comparable($value) and __is-strict-comparable($other)) {
        @return ($value == $other) and (type-of($value) == type-of($other));
    }

    $result: if($customizer, __call($customizer, null, $value, $other), $__undefined__);

    @return if(__is-undefined($result), __base-is-equal($value, $other, $customizer), ($result and true));
}

// @debug (foo: bar, baz: 3) == (baz: 3, foo: bar);
// @debug __is-equal((foo: bar, baz: 3), (baz: 3, foo: bar));
// @function abs-match($value, $other) {
//     @return abs($value) == abs($other);
// }
// @debug __is-equal(3, -3, abs-match);

// @function __is-error() {} // not implemented

// Sass numbers can get HUGE. Well, Ruby numbers can.
@function __is-finite($value) {
    @return (type-of($value) == 'number' and __native-is-finite($value));
}

@function __is-function($value) {
    @return (__function-exists($value));
}

@function __is-map($value) {
    @return (type-of($value) == 'map');
}

@function __is-match($map, $source, $customizer: null, $this-arg: null) {
    $props: __keys($source);
    $length: length($props);

    $customizer: if(__is-function($customizer), __bind-callback($customizer, $this-arg, 3), false);

    @if (not $customizer and $length == 1) {
        $key: nth($props, 1);
        $value: get($source, $key);

        @if (__is-strict-comparable($value)) {
            @return if($map != null and $value == get($map, $key), map-has-key($map, $key), false);
        }
    }

    $values: ();
    $strict-compare-flags: ();

    @while ($length > 0) {
        $value: get($source, nth($props, $length));
        $values: set($values, $length, $value);
        $strict-compare-flags: set($strict-compare-flags, $length, __is-strict-comparable($value));

        $length: $length - 1;
    }

    $values: __to-list($values);
    $strict-compare-flags: __to-list($strict-compare-flags);

    @return __base-is-match($map, $props, $values, $strict-compare-flags, $customizer);
}

// @debug __is-match((foo: 'bar', age: 40), (age: 40));
// @debug __is-match((foo: 'bar', age: 40), (age: 36));
// @function abs-match($value, $other, $args...) {
//     @return abs($value) == abs($other);
// }
// @debug __is-match((foo: 3), (foo: -3), abs-match);

// @function __is-nan() {} // not implemented

// @function __is-native() {} // not implemented

@function __is-null($value, $args...) {
    @return ($value == null);
}

@function __is-number($value, $args...) {
    @return (type-of($value) == 'number');
}

@function __is-integer($value, $args...) {
    @return __is-number($value) and round($value) == $value;
}

@function __is-plain-map($value, $args...) {
    @return (type-of($value) == 'map')
        and not (map-has-key($value, '_constructor'));
}

// @function __is-regexp($value) {} // not implemented

@function __is-string($value, $args...) {
    @return (type-of($value) == 'string');
}

// @function __is-typed-list($value) {} // not implemented

@function __is-undefined($value) {
    @return if(global-variable-exists('__undefined__'), $value == $__undefined__, false);
}

@function __to-list($value) {
    // TODO
    @if type-of($value) == 'map' {
        @return map-values($value);
    }

    @if type-of($value) == 'string' {
        $result: ();

        @for $index from 1 through str-length($value) {
            $result: append($result, str-slice($value, $index, $index));
        }

        @return $result;
    }

    @return if(__is-list($value), $value, ());
}
// @debug __to-list('abcde');
// @debug __to-list($users);
// @debug __to-list((a:1,b:2,c:3));
// @debug __to-list((10, 20, 30, 40, 50));
// @debug __to-list(38238);

@function __to-plain-map($value) {
    @return __base-copy($value, __keys-in($value));
}

@function __assign($arguments...) {
    $assigner: __create-assigner(__base-assign);

    @return __call($assigner, null, $arguments...);
}

@function __create($prototype, $properties, $guard: null) {
    $result: __base-create($prototype);

    @if ($guard and __is-iteratee-call($prototype, $properties, $guard)) {
        $properties: null;
    }

    @return if($properties, __base-copy($properties, $result, __keys($properties)), $result);
}

@function __defaults($map: null, $args...) {
    @if ($map == null) {
        @return $map;
    }

    $args: append($args, __assign-defaults);

    @return __assign($map, $args...);
}

@function __find-key($map, $predicate: __identity, $this-arg: null) {
    $predicate: __get-callback($predicate, $this-arg, 3);

    @return __base-find($map, $predicate, __base-for-own, true);
}

// @debug __find-key($users, ('age': 43));
// @debug __find-key($users, 'foo');

@function __find-last-key($map, $predicate: __identity, $this-arg: null) {
    $predicate: __get-callback($predicate, $this-arg, 3);

    @return __base-find($map, $predicate, __base-for-own-right, true);
}

// @debug __find-last-key($users, ('age': 43));
// @debug __find-last-key($users, 'foo');


@function __for-in($map, $iteratee: __identity, $this-arg: $__undefined__) {
    @if (not __function-exists($iteratee) or not __is-undefined($this-arg)) {
        $iteratee: __bind-callback($iteratee, $this-arg, 3);
    }

    @return __base-for($map, $iteratee, __keys-in);
}

// @debug __for-in((foo: 1, bar: 2, baz: 3), double);

@function __for-in-right($map, $iteratee: __identity, $this-arg: null) {
    $iteratee: __bind-callback($iteratee, $this-arg, 3);

    @return __base-for-right($map, $iteratee, __keys-in);
}

// @debug __for-in-right((foo: 1, bar: 2, baz: 3), double);

@function __for-own($map, $iteratee: __identity, $this-arg: $__undefined__) {
    @if (not __function-exists($iteratee))
        or (not __is-undefined($this-arg))
    {
        $iteratee: __bind-callback($iteratee, $this-arg, 3);
    }

    @return __base-for-own($map, $iteratee);
}

@function debug($value, $args...) { @debug $value; @return true; }
// @debug __for-own((0: zero, 1: one, length: 3), debug);

@function __for-own-right($map, $iteratee: __identity, $this-arg: null) {
    $iteratee: __bind-callback($iteratee, $this-arg, 3);

    @return __base-for-right($map, $iteratee, __keys);
}

// @debug __for-own-right((1: one, 2: two, 3: three), debug);

@function __functions($map) {
    @return __base-functions($map, __keys-in($map));
}
// @debug __functions((1: length, 2: str-length, 3: __identity, 4: bogus));

@function __has($map, $key) {
    @return if($map, map-has-key($map, $key), false);
}
// @debug __has((foo: bar, baz: quo), 'foo');

@function __invert($map, $multi-value: false, $guard: false) {
    @if ($guard and __is-iteratee-call($map, $multi-value, $guard)) {
        $multi-value: null;
    }

    $index: 1;
    $props: __keys($map);
    $length: length($props);
    $result: ();

    @while ($index <= $length) {
        $key: nth($props, $index);
        $value: get($map, $key);

        @if ($multi-value) {
            @if (map-has-key($result, $value)) {
                $result: set($result, $value, append(get($result, $value), $key));
            } @else {
                $result: set($result, $value, $key);
            }
        } @else {
            $result: set($result, $value, $key);
        }

        $index: $index + 1;
    }

    @return $result;
}

// @debug __invert((foo: fred, bar: barney, baz: fred));
// @debug __invert((foo: fred, bar: barney, baz: fred), true);

@function __keys($map) {
    // currently the same as __keys-in
    @return __keys-in($map);
}

@function __keys-in($map) {
    $map: __to-map($map);
    $skip-keys: ('_type', '_constructor', '_extends', '_prototype');

    @return __without(map-keys($map), $skip-keys...);
}

// @debug __keys((40, 41, 42));
// @debug __keys(new(Scope));


@function __map-values-iteratee($value, $key, $map) {
    $result: this(result);
    $iteratee: this(iteratee);

    $result: set($result, $key, __call($iteratee, null, $value, $key, $map));

    $_: this(result, $result);

    @return true;
}
@function __map-values($map, $iteratee: __identity, $this-arg: null) {
    $result: ();
    $iteratee: __get-callback($iteratee, $this-arg, 3);

    $_: scope-start();
    $_: scope(result, $result);
    $_: scope(iteratee, $iteratee);

    $scoped-function: scoped-function(__map-values-iteratee);

    $_: __base-for-own($map, $scoped-function);

    $result: scope(result);
    $_: scope-end();

    @return $result;
}

// @debug __map-values((foo: 1, bar: 2, baz: 3), double);
// @debug __map-values($users, 'age');

@function __merge($arguments...) {
    $merge-assigner: __create-assigner(__base-merge);

    @return __call($merge-assigner, null, $arguments...);
    // todo
}

@function __omit-callback($value, $key, $map) {
    $predicate: this(predicate);

    @return not __call($predicate, null, $value, $key, $map);
}
@function __omit($map, $predicate, $this-arg: null, $args...) {
    @if ($map == null) {
        @return ();
    }

    @if not (__function-exists($predicate)) {
        $props: __list-map(__base-flatten(($map, $predicate, $this-arg), false, false, 1), __to-string);

        @return __pick-by-list($map, __base-difference(__keys-in($map), $props));
    }

    $predicate: __bind-callback($predicate, $this-arg, 3);

    $_: scope-start();
    $_: scope(predicate, $predicate);

    $scoped-callback: scoped-function(__omit-callback);

    $result: __pick-by-callback($map, $scoped-callback);

    $_: scope-end();

    @return $result;
}

// @debug __omit((user: fred, age: 40), 'age');

@function __pairs($map) {
    $index: 1;
    $props: __keys($map);
    $length: length($props);
    $result: ();

    @while ($index <= $length) {
        $key: nth($props, $index);

        $result: append($result, ($key, get($map, $key)));

        $index: $index + 1;
    }

    @return $result;
}
// @debug __pairs((name: fred, age: 40));

@function __pick($map, $predicate, $this-arg: null) {
    @if ($map == null) {
        @return ();
    }

    @return if(__function-exists($predicate),
        __pick-by-callback($map, __bind-callback($predicate, $this-arg, 3)),
        __pick-by-list($map, __base-flatten(($map, $predicate, $this-arg), false, false, 1)));
}
// @debug __pick((name: fred, age: 40), 'name');
// @debug __pick((name: fred, age: 40), __is-number);

@function __result($map, $key, $default-value: null) {
    $value: if($map == null, $__undefined__, get($map, $key));
    $result: null;

    @if (__is-undefined($value) or __is-null($value)) {
        $value: $default-value;
    }

    @if (__function-exists($value)) {
        $_: scope-start($map);

        $scoped-function: scoped-function($value);

        $result: __call($scoped-function, $__current-scope__);

        $_: scope-end();
    } @else {
        $result: $value;
    }

    @return $result;
}

// @function greet() {
//     @return 'Hey, my name is #{this(name)}.';
// }
// @debug __result((name: fred, age: 40), 'name');
// @debug __result((name: fred, age: 40), 'status', 'busy');
// @debug __result((name: fred, age: 40, greet: greet), 'greet');

// @function __transform-iteratee($value, $index, $map) {
//     $iteratee: this(iteratee);
//     $accumulator: this(accumulator);

//     @return __call($iteratee, null, $value, $index, $map);
// }
// @function __transform($map, $iteratee: __identity, $accumulator: null, $this-arg: null) {
//     $is-list: __is-list($map);
//     $iteratee: __get-callback($iteratee, $this-arg, 4);

//     @if ($accumulator == null) {
//         @if ($is-list or __is-map($map)) {
//             $ctor: get($map, '_constructor');

//             @if ($is-list) {
//                 $accumulator: ();
//             } @else {
//                 $accumulator: __base-create(if(__function-exists($ctor), $ctor, null));
//             }
//         } @else {
//             $accumulator: ();
//         }
//     }

//     $function: if($is-list, __list-each, __base-for-own);

//     $_: scope-start();
//     $_: scope(iteratee, $iteratee);
//     $_: scope(accumulator, $accumulator);

//     $scoped-function: scoped-function(__transform-iteratee);

//     $_: __call($function, null, $map, $scoped-function);

//     $accumulator: scope(accumulator);
//     $_: scope-end();

//     @return $accumulator;
// }

@function __value($value) {
    @if instanceof($value, SassdashWrapper) {
        @return get($value, '__wrapped__');
    }

    @return $value;
}

@function __values($map) {
    @return __base-values($map, __keys($map));
}

// @debug __values(new(Scope));
// @debug __values((a:1,b:3));
// @debug __values((12 23 34));
// @debug __values('hi there');

@function __values-in($map) {
    @return __base-values($map, __keys-in($map));
}

@function __random($min: null, $max: null, $floating: null) {
    @if ($floating and __is-iteratee-call($min, $max, $floating)) {
        $max: null;
        $floating: null;
    }

    $no-min: ($min == null);
    $no-max: ($max == null);

    @if ($floating == null) {
        @if ($no-max and type-of($min) == 'bool') {
            $floating: $min;
            $min: 1;
        } @else if (type-of($max) == 'bool') {
            $floating: $max;
            $no-max: true;
        }
    }

    @if ($no-min and $no-max) {
        $max: 1;
        $no-max: false;
    }

    $min: if($min == true, 1, if($min == false, 0, $min));

    @if ($no-max) {
        $max: $min;
        $min: 0;
    } @else {
        $max: if($max == true, 1, if($max == false, 0, $max));
    }

    @if ($floating or ($min % 1 > 0) or ($max % 1 > 0)) {
        $rand: __native-random();

        @return __native-min($min + ($rand * ($max - $min + 1 / (10 * (str-length('#{$rand}') - 1)))), $max);
    }
    @return __base-random($min, $max);
}

// @debug __random(0, 5);
// @debug __random(5);
// @debug __random(5, true);
// @debug __random(1.2, 5.2);

@function __camel-case-compounder($result, $word, $index) {
    $word: to-lower-case($word);

    @return if($index > 1, $result + to-upper-case(__char-at($word, 1)) + str-slice($word, 2), $word);
}
@function __camel-case($arguments...) {
    $compounder: __create-compounder(__camel-case-compounder);

    @return __call($compounder, null, $arguments...);
}

// @debug __camel-case('Foo Bar');
// @debug __camel-case('--foo-bar');
// @debug __camel-case('__foo_bar__');

@function __capitalize($string) {
    $string: __base-to-string($string);

    @return if(str-length($string) > 0, to-upper-case(__char-at($string, 1)) + str-slice($string, 2), false);
}

// @debug __capitalize('fred');

@function __deburr($string) {
    // todo
    @return $string;
}

@function __ends-with($string, $target, $position: str-length($string)) {
    $string: __base-to-string($string);
    $target: $target + '';

    $length: str-length($string);

    $position: if(__is-falsey($position), 0, $position);

    $position: __native-min(if($position < 0, 0, $position), $length) + 1 - str-length($target);

    @return if($position >= 1, __string-index-of($string, $target, $position) == $position, false);
}

// @debug __ends-with('abc', 'c');
// @debug __ends-with('abc', 'b');
// @debug __ends-with('abc', 'b', 2);

@function __escape($string) {
    $string: __base-to-string($string);

    @each $unescaped, $escaped in const-get('html-escapes') {
        $string: __string-replace($string, $unescaped, $escaped);
    }

    @return $string;
}

// @debug __escape('fred, barney & pebbles < your face >');

// @function __escape-reg-exp($string) {
//     $string: __base-to-string($string);

//     @each $char in const-get('reg-exp-chars') {
//         $string: __string-replace($string, $char, '\#{$char}');
//     }

//     @return $string;
// }

// @debug __escape-reg-exp('[lodash](http://www.lodash.com)');

@function __kebab-case-compounder($result, $word, $index: 0) {
    @return $result + if($index > 1, '-', '') + to-lower-case($word);
}
@function __kebab-case($arguments...) {
    $compounder: __create-compounder(__kebab-case-compounder);

    @return __call($compounder, null, $arguments...);
}

// @debug __kebab-case('Foo Bar');
// @debug __kebab-case('fooBar');
// @debug __kebab-case('__foo_bar__');

@function __pad($string, $length: 0, $chars: ' ') {
    $string: __base-to-string($string);

    $str-length: str-length($string);

    @if ($str-length >= $length or not __native-is-finite($length)) {
        @return $string;
    }

    $mid: ($length - $str-length) / 2;
    $left-length: floor($mid);
    $right-length: ceil($mid);

    $chars: __create-pad('', $right-length, $chars);

    @return str-slice($chars, 0, $left-length) + $string + $chars;
}

// @debug __pad('abc', 8, '.');
// @debug __pad('abc', 8, '_-');
// @debug __pad('abc', 3);

@function __pad-left($string, $length: 0, $chars: ' ') {
    $string: __base-to-string($string);

    @return if($string != '', __create-pad($string, $length, $chars) + $string, $string);
}

// @debug __pad-left('abc', 5);
// @debug __pad-left('abc', 6, '_-');

@function __pad-right($string, $length: 0, $chars: ' ') {
    $string: __base-to-string($string);

    @return if($string != '', $string + __create-pad($string, $length, $chars), $string);
}

@function __parse-int($string, $radix, $guard: null) {
    @if ($guard and __is-iteratee-call($string, $radix, $guard)) {
        $radix: 0;
    }

    @return __native-parse-int($string, $radix);
}

@function __push($list, $items...) {
    @return join($list, $items, $separator: auto);
}

@function __repeat($string, $value: 1) {
    $result: '';

    @for $iteration from 1 through $value {
        $result: $result + $string;
    }

    @return $result;
}

@function __snake-case-compounder($result, $word, $index) {
    @return $result + if($index > 1, '_', '') + to-lower-case($word);
}
@function __snake-case($arguments...) {
    $compounder: __create-compounder(__snake-case-compounder);

    @return __call($compounder, null, $arguments...);
}

// @debug __snake-case('Foo Bar');
// @debug __snake-case('--foo-bar');
// @debug __snake-case('fooBar');

@function __start-case-compounder($result, $word, $index) {
    @return $result + if($index > 1, ' ', '') + to-upper-case(__char-at($word, 1)) + str-slice($word, 2);
}
@function __start-case($arguments...) {
    $compounder: __create-compounder(__start-case-compounder);

    @return __call($compounder, null, $arguments...);
}

@function __starts-with($string, $target, $position: 1) {
    $string: __base-to-string($string);
    $position: __native-min(if($position < 0, 1, $position), str-length($string));

    @return __string-last-index-of($string, $target, $position) == $position;
}

// @debug __starts-with('abc', 'a');
// @debug __starts-with('abc', 'b');
// @debug __starts-with('abc', 'b', 2);

@function __template() {} // not implemented

@function __trim($string, $chars: null, $guard: null) {
    $value: $string;
    $string: __base-to-string($string);

    @if not ($string) or ($string == '') {
        @return $string;
    }

    @if (if($guard, __is-iteratee-call($value, $chars, $guard), ($chars == null))) {
        @return str-slice($string, __trimmed-left-index($string), __trimmed-right-index($string));
    }

    $chars: __base-to-string($chars);

    @return str-slice($string, __chars-left-index($string, $chars), __chars-right-index($string, $chars));
}

// @debug __trim('  abc   ') + 'def';
// @debug __trim('-_-abc-_-', '_-');
// @debug __map(('  foo  ', '    bar     '), __trim);

@function __trim-left($string, $chars: null, $guard: null) {
    $value: $string;
    $string: __base-to-string($string);

    @if not ($string) or ($string == '') {
        @return $string;
    }

    @if (if($guard, __is-iteratee-call($value, $chars, $guard), ($chars == null))) {
        @return str-slice($string, __trimmed-left-index($string));
    }

    $chars: __base-to-string($chars);

    @return str-slice($string, __chars-left-index($string, $chars));
}

@function __trim-right($string, $chars: null, $guard: null) {
    $value: $string;
    $string: __base-to-string($string);

    @if not ($string) or ($string == '') {
        @return $string;
    }

    @if (if($guard, __is-iteratee-call($value, $chars, $guard), ($chars == null))) {
        @return str-slice($string, 0, __trimmed-right-index($string));
    }

    $chars: __base-to-string($chars);

    @return str-slice($string, 0, __chars-right-index($string, $chars));
}

// @debug __trim-right('abc       ') + 'def';

@function __trunc($string, $options: null, $guard: null) {
    @if ($guard and __is-iteratee-call($string, $options, $guard)) {
        $options: null;
    }

    $length: const-get('DEFAULT_TRUNC_LENGTH');
    $omission: const-get('DEFAULT_TRUNC_OMISSION');
    $separator: null;

    @if ($options != null) {
        @if (__is-map($options)) {
            $separator: if(map-has-key($options, 'separator'), get($options, 'separator'), $separator);
            $length: if(map-has-key($options, 'length'), get($options, 'length'), $length);
            $omission: if(map-has-key($options, 'omission'), __base-to-string(get($options, 'omission')), $omission);
        } @else {
            $length: if(__is-number($options), $options, if($options, 1, 0));
        }
    }

    $string: __base-to-string($string);

    @if ($length >= str-length($string)) {
        @return $string;
    }

    $end: $length - str-length($omission);

    @if ($end < 1) {
        @return $omission;
    }

    $result: str-slice($string, 0, $end);

    @if ($separator == null) {
        @return $result + $omission;
    }

    @if (__string-index-of($string, $separator, $end) != $end) {
        $index: __string-last-index-of($result, $separator);

        @if ($index > -1) {
            $result: str-slice($result, 0, $index - 1);
        }
    }

    @return $result + $omission;
}

// @debug __trunc('hi-diddly-ho there, neighborino');
// // => 'hi-diddly-ho there, neighbo...'
// @debug __trunc('hi-diddly-ho there, neighborino', 24);
// // => 'hi-diddly-ho there, n...'
// @debug __trunc('hi-diddly-ho there, neighborino', ( 'length': 24, 'separator': ' ' ));
// // => 'hi-diddly-ho there,...'
// @debug __trunc('hi-diddly-ho there, neighborino', ( 'omission': ' [...]' ));
// // => 'hi-diddly-ho there, neig [...]'


@function __unescape($string) {
    $string: __base-to-string($string);

    @each $escaped, $unescaped in const-get('html-unescapes') {
        $string: __string-replace($string, $escaped, $unescaped);
    }

    @return $string;
}

// @debug __unescape('fred, barney &amp; pebbles&quot;');

@function __words($string, $args...) {
    $string: __base-to-string($string);

    $result: ();

    $temp: '';

    $lowercase-letters: 'abcdefghijklmnopqrstuvwxyz';
    $uppercase-letters: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';

    @for $index from 1 through str-length($string) {
        $letter: str-slice($string, $index, $index);

        // TODO fix and remove to-lower-case
        @if not (str-index($lowercase-letters, $letter)) {
            @if (str-length($temp) > 0) {
                $result: append($result, $temp);
                $temp: '';
            }

            @if (str-index($uppercase-letters, $letter)) {
                $temp: $temp + $letter;
            }
        } @else {
            $temp: $temp + $letter;
        }
    }

    @if (str-length($temp) > 0) {
        $result: append($result, $temp);
    }

    @return $result;
}

// @debug __words('dear god, what have I done??');
// @debug __words('try---toFindAllThe-words    in thisCrazy.sentence.');

@function __attempt() {} // not implemented

@function __callback($function: __identity, $this-arg: null, $guard: null) {
    @if ($guard and __is-iteratee-call($function, $this-arg, $guard)) {
        $this-arg: null;
    }

    @return __base-callback($function, $this-arg);
}

@function __constant-function($args...) {
    $value: this('value');

    @return $value;
}
@function __constant($value: null) {
    $_: scope-start();
    $_: scope('value', $value);
    $scoped-function: scoped-function(__constant-function);
    $_: scope-end();

    @return $scoped-function;
}

// $my-map: (user: 'fred');
// $get-my-map: __constant($my-map);
// @debug __call($get-my-map);

@function __identity($value: null, $args...) {
    @return $value;
}

@function __matches($source) {
    @return __base-matches($source, true);
}

@function __mixin() {} // todo

@function __no-conflict() {} // not implemented

@function __noop($args...) {
    @return null;
}

@function __property($key) {
    @return __base-property($key + '');
}

@function __property-of-function($key, $args...) {
    $map: this('map');

    @return if($map == null, $__undefined__, get($map, $key));
}
@function __property-of($map) {
    $_: scope-start();
    $_: scope('map', $map);
    $scoped-function: scoped-function(__property-of-function);
    $_: scope-end();

    @return $scoped-function;
}

// $foo-map: (a: 3, b: 1, c: 2);
// @debug __sort-by((a b c), __property-of($foo-map));

@function __range($start, $end: null, $step: null) {
    @if ($step and $step != 0 and __is-iteratee-call($start, $end, $step)) {
        $end: null;
        $step: null;
    }

    $start: if(__is-integer($start), $start, if($start, 1, 0));
    $step: if($step == null, 1, if(__is-integer($step), $step, if($step, 1, 0)));

    @if ($end == null) {
        $end: $start;
        $start: 0;
    } @else {
        $end: if(__is-integer($end), $end, if($end, 1, 0));
    }

    $index: 1;
    $length: __native-max(ceil(($end - $start) / (if($step == 0, 1, $step))), 0);
    $result: ();

    @while ($index <= $length) {
        $result: append($result, $start);
        $start: $start + $step;

        $index: $index + 1;
    }

    @return $result;
}

// @debug __range(4);
//      // => [0, 1, 2, 3]
     
// @debug __range(1, 5);
//      // => [1, 2, 3, 4]
     
// @debug __range(0, 20, 5);
//      // => [0, 5, 10, 15]
     
// @debug __range(0, -4, -1);
//      // => [0, -1, -2, -3]
     
// @debug __range(1, 4, 0);
//      // => [1, 1, 1]
     
// @debug __range(0);

@function __times($n, $iteratee: __identity, $this-arg: null) {
    // $n: __to-number($n); // todo

    $index: 1;
    $result: ();

    $iteratee: __bind-callback($iteratee, $this-arg, 1);

    @while ($index <= $n) {
        $result: append($result, __call($iteratee, null, $index));

        $index: $index + 1;
    }

    @return $result;
}

// @debug __times(3, __random);

@function __unique-id($prefix: '') {
    $id: unique-id();

    @return __base-to-string($prefix) + $id;
}


// Aliases
// =======
@function _backflow($args...) { @return call(__flow-right, $args...); }

// // Add functions that return wrapped values when chaining
@function _after($args...) { @return call(__after, $args...); }
@function _ary($args...) { @return call(__ary, $args...); }
@function _assign($args...) { @return call(__assign, $args...); }
@function _at($args...) { @return call(__at, $args...); }
@function _before($args...) { @return call(__before, $args...); }
@function _bind($args...) { @return call(__bind, $args...); }
@function _bind-all($args...) { @return call(__bind-all, $args...); }
@function _bind-key($args...) { @return call(__bind-key, $args...); }
@function _callback($args...) { @return call(__callback, $args...); }
@function _chain($args...) { @return call(__chain, $args...); }
@function _chunk($args...) { @return call(__chunk, $args...); }
@function _compact($args...) { @return call(__compact, $args...); }
@function _constant($args...) { @return call(__constant, $args...); }
@function _count-by($args...) { @return call(__count-by, $args...); }
@function _create($args...) { @return call(__create, $args...); }
@function _curry($args...) { @return call(__curry, $args...); }
@function _curry-right($args...) { @return call(__curry-right, $args...); }
@function _debounce($args...) { @return call(__debounce, $args...); }
@function _defaults($args...) { @return call(__defaults, $args...); }
@function _defer($args...) { @return call(__defer, $args...); }
@function _delay($args...) { @return call(__delay, $args...); }
@function _difference($args...) { @return call(__difference, $args...); }
@function _drop($args...) { @return call(__drop, $args...); }
@function _drop-right($args...) { @return call(__drop-right, $args...); }
@function _drop-right-while($args...) { @return call(__drop-right-while, $args...); }
@function _drop-while($args...) { @return call(__drop-while, $args...); }
@function _filter($args...) { @return call(__filter, $args...); }
@function _flatten($args...) { @return call(__flatten, $args...); }
@function _flatten-deep($args...) { @return call(__flatten-deep, $args...); }
@function _flow($args...) { @return call(__flow, $args...); }
@function _flow-right($args...) { @return call(__flow-right, $args...); }
@function _for-each($args...) { @return call(__for-each, $args...); }
@function _for-each-right($args...) { @return call(__for-each-right, $args...); }
@function _for-in($args...) { @return call(__for-in, $args...); }
@function _for-in-right($args...) { @return call(__for-in-right, $args...); }
@function _for-own($args...) { @return call(__for-own, $args...); }
@function _for-own-right($args...) { @return call(__for-own-right, $args...); }
@function _functions($args...) { @return call(__functions, $args...); }
@function _group-by($args...) { @return call(__group-by, $args...); }
@function _index-by($args...) { @return call(__index-by, $args...); }
@function _initial($args...) { @return call(__initial, $args...); }
@function _intersection($args...) { @return call(__intersection, $args...); }
@function _invert($args...) { @return call(__invert, $args...); }
@function _invoke($args...) { @return call(__invoke, $args...); }
@function _keys($args...) { @return call(__keys, $args...); }
@function _keys-in($args...) { @return call(__keys-in, $args...); }
@function _map($args...) { @return call(__map, $args...); }
@function _map-values($args...) { @return call(__map-values, $args...); }
@function _matches($args...) { @return call(__matches, $args...); }
@function _memoize($args...) { @return call(__memoize, $args...); }
@function _merge($args...) { @return call(__merge, $args...); }
@function _mixin($args...) { @return call(__mixin, $args...); }
@function _negate($args...) { @return call(__negate, $args...); }
@function _omit($args...) { @return call(__omit, $args...); }
@function _once($args...) { @return call(__once, $args...); }
@function _pairs($args...) { @return call(__pairs, $args...); }
@function _partial($args...) { @return call(__partial, $args...); }
@function _partial-right($args...) { @return call(__partial-right, $args...); }
@function _partition($args...) { @return call(__partition, $args...); }
@function _pick($args...) { @return call(__pick, $args...); }
@function _pluck($args...) { @return call(__pluck, $args...); }
@function _property($args...) { @return call(__property, $args...); }
@function _property-of($args...) { @return call(__property-of, $args...); }
@function _pull($args...) { @return call(__pull, $args...); }
@function _pull-at($args...) { @return call(__pull-at, $args...); }
@function _range($args...) { @return call(__range, $args...); }
@function _rearg($args...) { @return call(__rearg, $args...); }
@function _reject($args...) { @return call(__reject, $args...); }
@function _remove($args...) { @return call(__remove, $args...); }
@function _rest($args...) { @return call(__rest, $args...); }
@function _shuffle($args...) { @return call(__shuffle, $args...); }
@function _slice($args...) { @return call(__slice, $args...); }
@function _sort-by($args...) { @return call(__sort-by, $args...); }
@function _sort-by-all($args...) { @return call(__sort-by-all, $args...); }
@function _take($args...) { @return call(__take, $args...); }
@function _take-right($args...) { @return call(__take-right, $args...); }
@function _take-right-while($args...) { @return call(__take-right-while, $args...); }
@function _take-while($args...) { @return call(__take-while, $args...); }
@function _tap($args...) { @return call(__tap, $args...); }
@function _throttle($args...) { @return call(__throttle, $args...); }
@function _thru($args...) { @return call(__thru, $args...); }
@function _times($args...) { @return call(__times, $args...); }
@function _to-list($args...) { @return call(__to-list, $args...); }
@function _to-plain-map($args...) { @return call(__to-plain-map, $args...); }
@function _transform($args...) { @return call(__transform, $args...); }
@function _union($args...) { @return call(__union, $args...); }
@function _uniq($args...) { @return call(__uniq, $args...); }
@function _unzip($args...) { @return call(__unzip, $args...); }
@function _values($args...) { @return call(__values, $args...); }
@function _values-in($args...) { @return call(__values-in, $args...); }
@function _where($args...) { @return call(__where, $args...); }
@function _without($args...) { @return call(__without, $args...); }
@function _wrap($args...) { @return call(__wrap, $args...); }
@function _xor($args...) { @return call(__xor, $args...); }
@function _zip($args...) { @return call(__zip, $args...); }
@function _zip-map($args...) { @return call(__zip-map, $args...); }

// Add aliases 
@function _collect($args...) { @return call(__map, $args...); }
@function _compose($args...) { @return call(__flow-right, $args...); }
@function _each($args...) { @return call(__for-each, $args...); }
@function _each-right($args...) { @return call(__for-each-right, $args...); }
@function _extend($args...) { @return call(__assign, $args...); }
@function _iteratee($args...) { @return call(__callback, $args...); }
@function _methods($args...) { @return call(__functions, $args...); }
@function _object($args...) { @return call(__zip-map, $args...); }
@function _select($args...) { @return call(__filter, $args...); }
@function _tail($args...) { @return call(__rest, $args...); }
@function _unique($args...) { @return call(__uniq, $args...); }

// Add functions that return unwrapped values when chaining.
@function _attempt($args...) { @return call(__attempt, $args...); }
@function _camel-case($args...) { @return call(__camel-case, $args...); }
@function _capitalize($args...) { @return call(__capitalize, $args...); }
@function _clone($args...) { @return call(__clone, $args...); }
@function _clone-deep($args...) { @return call(__clone-deep, $args...); }
@function _deburr($args...) { @return call(__deburr, $args...); }
@function _ends-with($args...) { @return call(__ends-with, $args...); }
@function _escape($args...) { @return call(__escape, $args...); }
@function _escape-reg-exp($args...) { @return call(__escape-reg-exp, $args...); }
@function _every($args...) { @return call(__every, $args...); }
@function _find($args...) { @return call(__find, $args...); }
@function _find-index($args...) { @return call(__find-index, $args...); }
@function _find-key($args...) { @return call(__find-key, $args...); }
@function _find-last($args...) { @return call(__find-last, $args...); }
@function _find-last-index($args...) { @return call(__find-last-index, $args...); }
@function _find-last-key($args...) { @return call(__find-last-key, $args...); }
@function _find-where($args...) { @return call(__find-where, $args...); }
@function _first($args...) { @return call(__first, $args...); }
@function _has($args...) { @return call(__has, $args...); }
@function _identity($args...) { @return call(__identity, $args...); }
@function _includes($args...) { @return call(__includes, $args...); }
@function _index-of($args...) { @return call(__index-of, $args...); }
@function _is-arguments($args...) { @return call(__is-arguments, $args...); }
@function _is-list($args...) { @return call(__is-list, $args...); }
@function _is-boolean($args...) { @return call(__is-boolean, $args...); }
@function _is-date($args...) { @return call(__is-date, $args...); }
@function _is-element($args...) { @return call(__is-element, $args...); }
@function _is-empty($args...) { @return call(__is-empty, $args...); }
@function _is-equal($args...) { @return call(__is-equal, $args...); }
@function _is-error($args...) { @return call(__is-error, $args...); }
@function _is-finite($args...) { @return call(__is-finite, $args...); }
@function _is-function($args...) { @return call(__is-function, $args...); }
@function _is-match($args...) { @return call(__is-match, $args...); }
@function _is-nan($args...) { @return call(__is-nan, $args...); }
@function _is-native($args...) { @return call(__is-native, $args...); }
@function _is-null($args...) { @return call(__is-null, $args...); }
@function _is-number($args...) { @return call(__is-number, $args...); }
@function _is-object($args...) { @return call(__is-object, $args...); }
@function _is-plain-object($args...) { @return call(__is-plain-object, $args...); }
@function _is-reg-exp($args...) { @return call(__is-reg-exp, $args...); }
@function _is-string($args...) { @return call(__is-string, $args...); }
@function _is-typed-array($args...) { @return call(__is-typed-array, $args...); }
@function _is-undefined($args...) { @return call(__is-undefined, $args...); }
@function _kebab-case($args...) { @return call(__kebab-case, $args...); }
@function _last($args...) { @return call(__last, $args...); }
@function _last-index-of($args...) { @return call(__last-index-of, $args...); }
@function _max($args...) { @return call(__max, $args...); }
@function _min($args...) { @return call(__min, $args...); }
@function _no-conflict($args...) { @return call(__no-conflict, $args...); }
@function _noop($args...) { @return call(__noop, $args...); }
@function _now($args...) { @return call(__now, $args...); }
@function _pad($args...) { @return call(__pad, $args...); }
@function _pad-left($args...) { @return call(__pad-left, $args...); }
@function _pad-right($args...) { @return call(__pad-right, $args...); }
@function _parse-int($args...) { @return call(__parse-int, $args...); }
@function _random($args...) { @return call(__random, $args...); }
@function _reduce($args...) { @return call(__reduce, $args...); }
@function _reduce-right($args...) { @return call(__reduce-right, $args...); }
@function _repeat($args...) { @return call(__repeat, $args...); }
@function _result($args...) { @return call(__result, $args...); }
@function _run-in-context($args...) { @return call(__run-in-context, $args...); }
@function _size($args...) { @return call(__size, $args...); }
@function _snake-case($args...) { @return call(__snake-case, $args...); }
@function _some($args...) { @return call(__some, $args...); }
@function _sorted-index($args...) { @return call(__sorted-index, $args...); }
@function _sorted-last-index($args...) { @return call(__sorted-last-index, $args...); }
@function _start-case($args...) { @return call(__start-case, $args...); }
@function _starts-with($args...) { @return call(__starts-with, $args...); }
@function _template($args...) { @return call(__template, $args...); }
@function _trim($args...) { @return call(__trim, $args...); }
@function _trim-left($args...) { @return call(__trim-left, $args...); }
@function _trim-right($args...) { @return call(__trim-right, $args...); }
@function _trunc($args...) { @return call(__trunc, $args...); }
@function _unescape($args...) { @return call(__unescape, $args...); }
@function _unique-id($args...) { @return call(__unique-id, $args...); }
@function _words($args...) { @return call(__words, $args...); }

// Add aliases.
@function _all($args...) { @return call(__every, $args...); }
@function _any($args...) { @return call(__some, $args...); }
@function _contains($args...) { @return call(__includes, $args...); }
@function _detect($args...) { @return call(__find, $args...); }
@function _foldl($args...) { @return call(__reduce, $args...); }
@function _foldr($args...) { @return call(__reduce-right, $args...); }
@function _head($args...) { @return call(__first, $args...); }
@function _include($args...) { @return call(__includes, $args...); }
@function _inject($args...) { @return call(__reduce, $args...); }

// Add functions capable of returning wrapped and unwrapped values when chaining.
@function _sample($args...) { @return call(__sample, $args...); }

// Add custom Sassdash functions.
@function _call($args...) { @return call(__call, $args...); }
@function _push($args...) { @return call(__push, $args...); }
@function _to-string($args...) { @return call(__to-string, $args...); }
@function _value($args...) { @return call(__value, $args...); }


// Sassdash pseudo-chainable wrapper-value function.
@function _($value, $method-calls...) {
    $result: $value;

    @each $method-call in $method-calls {
        $method: __first($method-call);
        $args: __drop($method-call);

        $method: if(__starts-with($method, '_'), $method, '_' + $method);

        $result: __call($method, null, $result, $args...);
    }

    @return $result;
}

// @debug _((1 2 3 4 5), map double, chunk 2, map _first);
