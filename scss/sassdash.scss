
@import 'utilities/_module';

@mixin initialize() {
    $_: static-set('__meta-map__', ());

    $_: const-set('html-escapes', (
            '&': '&amp;',
            '<': '&lt;',
            '>': '&gt;',
            '"': '&quot;',
            "'": '&#39;',
            '`': '&#96;'
        ));
    $_: const-set('html-unescapes', (
            '&amp;': '&',
            '&lt;': '<',
            '&gt;': '>',
            '&quot;': '"',
            '&#39;': "'",
            '&#96;': '`'
        ));
    $_: const-set('string-escapes', (
            '\\': '\\',
            "'": "'",
            '\n': 'n',
            '\r': 'r',
            '\u2028': 'u2028',
            '\u2029': 'u2029'
        ));
    $_: const-set('POSITIVE_INFINITY', 999999);
    $_: const-set('NEGATIVE_INFINITY', -999999);
    $_: const-set('MAX_SAFE_INTEGER', (pow(2, 53) - 1));
    $_: const-set('HALF_MAX_LIST_LENGTH', 999999);
    $_: const-set('MAX_LIST_LENGTH', 999999);

}

@include initialize();



@function __base-compare-ascending($value, $other) {
    @if $value > $other {
        @return 1;
    }

    @if $value < $other {
        @return -1;
    }

    @return 0;
}

@function __base-index-of($list, $value, $from-index: 1) {
    $length: length($list);
    $index: $from-index;

    @while $index <= $length {
        @if (nth($list, $index) == $value) {
            @return $index;
        }

        $index: $index + 1;
    }

    @return -1;
}

@function __base-sort-by() { /* TODO */ }

@function __base-to-string($value) {
    @if (type-of($value) == 'string') {
        @return $value;
    }

    @return if($value == null, '', $value + '');
}

@function __char-at-callback($string) {
    // ... 
}

@function __chars-index($string, $chars, $direction) {
    $index: 1;
    $length: str-length($string);
    $direction-map: ('right': -1, 'left': 1);
    $increment: map-get($direction-map, $direction);

    @while str-index($chars, __char-at($string, $index))
        and $index <= $length {
        $index: $index + $increment;
    }

    @return $index;
}

@function __chars-left-index($string, $chars) {
    @return __chars-index($string, $chars, $direction: left);
}

@function __chars-right-index($string, $chars) {
    @return __chars-index($string, $chars, $direction: right);
}

@function __compare-ascending($map, $other) {
    // TODO
}

@function __compare-multiple-ascending($map, $other) {
    // TODO
}

@function __escape-html-char($char) {
    @return const-get('html-escapes' $char);
}

@function __escape-string-char($char) {
    @return '\\#{const-get('string-escapes' $char)}';
}

@function __index-of-nan($list, $from-index, $from-right) {
    // TODO
}

@function __is-index($value, $length: null) {
    $value: __parse-float($value);
    
    @return $value > 0
        and $value % 1 == 0
        and ($length == null or $value <= $length);
}

@function __is-map-like($value) {
    @return $value and (type-of($value) == map or type-of($value) == list);
}

@function __is-space($char-code) {
    // TODO - find the rest of the space characters
    @return $char-code == ' ';
}

@function __replace-holders($list, $placeholder) {
    // TODO
}

@function __sorted-uniq($list, $iteratee: null) {
    $seen: null;
    $index: 1;
    $length: length($list);
    $res-index: 1;
    $result: ();

    @while ($index <= $length) {
        $value: nth($list, $index);
        $computed: if($iteratee, call($iteratee, $value, $index, $list), $value);

        @if not ($seen == $computed) {
            $seen: $computed;
            $result: append($result, $value);
        }

        $res-index: $res-index + 1;
        $index: $index + 1;
    }

    @return $result;
}

@function __trimmed-left-index($string) {
    $index: 1;
    $length: str-length($string);

    @while ($index <= $length) and (__is-space(__char-at($string, $index))) {
        $index: $index + 1;
    }

    @return $index;
}

@function __trimmed-right-index($string) {
    $index: str-length($string);

    @while ($index > 0) and (__is-space(__char-at($string, $index))) {
        $index: $index - 1;
    }

    @return $index;
}

@function __unescape-html-char($char) {
    @return const-get('html-unescapes' $char);
}

// SASSDASH
// ========

@function SassdashWrapper($value, $chain-all: false, $actions: ()) {
    @return (
        __actions__: $actions,
        __chain__: if($chain-all, true, false),
        __wrapped__: $value
    );
}

@function __sassdash($value) {
    @if (__is-map-like($value) and type-of($value) != list) {
        @if (instanceof($value, SassdashWrapper)) {
            @return $value;
        }
    }

    @return new(SassdashWrapper, (
        value: $value
    ));
}

@function LazyWrapper($value) {
    @return (
        actions: null,
        dir: 1,
        drop-count: 0,
        filtered: false,
        iteratees: null,
        take-count: const-get('POSITIVE_INFINITY'),
        views: null,
        wrapped: $value
    );
}

@function __lazy-clone() {
    // todo
}

@function __lazy-reverse() {
    // todo
}

@function __lazy-value() {
    $list: __call(value, this(), this('wrapped'));

    @if not (__is-list($list)) {
        @return __base-wrapper-value($list, this('actions'));
    }

    $dir: this('dir');
    $is-right: $dir < 0;
    $length: length($list);
    $view: __get-view(0, $length, this('views'));
    $start: get($view, 'start');
    $end: get($view, 'end');
    $drop-count: this('drop-count');
    $take-count: __native-min($end - $start, this('take-count') - $drop-count);
    $index: if($is-right, $end, $start - 1);
    $iteratees: this('iteratees');
    $iter-length: if($iteratees, length($iteratees), 0);
    $result-index: 0;
    $result: ();

    @while ($length > 0 and $result-index < $take-count and not $break-outer) {
        $continue-outer: false;
        $index: $index + $dir;

        $iter-index: 1;
        $value: nth($list, $index);

        @while ($iter-index < $iter-length and not ($continue-outer or $break-outer)) {
            $data: nth($iteratees, $iter-index);
            $iteratee: get($data, 'iteratee');
            $computed: call($iteratee, $value, $index, $list);
            $type: get($data, 'type');

            @if ($type == const-get('LAZY_MAP_FLAG')) {
                $value: $computed;
            } @else if not ($computed) {
                @if ($type == const-get('LAZY_FILTER_FLAG')) {
                    $continue-outer: true;
                } @else {
                    $break-outer: true;
                }
            }

            $iter-index: $iter-index + 1;
        }
        @if not ($continue-outer or $break-outer) {
            @if ($drop-count and $drop-count > 0) {
                $drop-count: $drop-count - 1;
            } @else {
                $result: set($result, $result-index, $value);
            }
        }

        $length: $length - 1;
    }

    @return if($is-right, __list-reverse($result), $result);
    // todo test
}


@function MapCache() {
    @return (
        __data__: ()
    );
}

@function __map-delete($this, $key) {
    $data: get($this, __data__);

    @return set($this, map-delete($data, $key));
}

@function __map-get($this, $key) {
    @return get($this, __data__ $key);
}

@function __map-has($this, $key) {
    $data: get($this, __data__);

    @return map-has-key($data, $key);
}

@function __map-set($this, $key, $value) {
    @return set($this, __data__ $key, $value);
}

@function SetCache($values: ()) {
    @return (
        data: (
            number: (),
            set: new(Set)
        ),
        values: $values
    );
}

@function __cache-index-of($this, $value) {
    $type: type-of($value);
    $data: get($this, data);
    $result: if($type == number, get($data, $type $value), method(get($data, set), has, $value));

    @return if($result, 0, -1);
}

@function __cache-push($this, $value) {
    $data: get($this, data);
    $type: type-of($value);

    @if ($type == number) {
        $data: set($data, $type $value, true);
    } @else {
        // data.set.add(value);
        $data: set($data, set, method(get($data, set), add, $value));
    }
}

@function __args-to-map($args) {
    // todo
}

@function __list-copy($list, $other: ()) {
    $index: 1;
    $length: length($list);
    $other-length: length($other);
    $result: ();

    @while ($index <= $length) {
        $result: append($result, nth($list, $index));

        $index: $index + 1;
    }

    @while ($other-length >= $index) {
        $result: append($result, nth($other, $index));

        $index: $index + 1;
    }

    @return $result;
}

@function __list-each($list, $iteratee) {
    $index: 1;
    $length: length($list);
    $break: false;
    $result-list: ();

    @while ($index <= $length) and not $break {
        $item: call($iteratee, nth($list, $index), $index, $list);

        @if (call($iteratee, nth($list, $index), $index, $list) == false) {
            $break: true;
        } @else {
            $result-list: append($result-list, $item);
        }

        $index: $index + 1;
    }

    @return $result-list;
}

@function __list-each-right($list, $iteratee) {
    $list: __list-reverse($list);
    $result-list: __list-each($list, $iteratee);
    $result-list: __list-reverse($result-list);

    @return $result-list;
}

@function __list-every($list, $predicate) {
    $index: 1;
    $length: length($list);

    @while ($index <= $length) {
        @if (not call($predicate, nth($list, $index), $index, $list)) {
            @return false;
        }

        $index: $index + 1;
    }

    @return true;
}

@function __list-filter($list, $predicate) {
    $index: 1;
    $length: length($list);
    $result-list: ();

    @while ($index <= $length) {
        $value: nth($list, $index);

        @if (__call($predicate, null, $value, $index, $list)) {
            $result-list: append($result-list, $value);
        }

        $index: $index + 1;
    }

    @return $result-list;
}

// TODO remove - for testing only
@function is-even($val, $args...) {
    @return $val % 2 == 0;
}
@function double($val, $args...) {
    @return 2 * $val;
}

@function __list-map($list, $iteratee) {
    $index: 1;
    $length: length($list);
    $result-list: ();

    @while ($index <= $length) {
        $value: nth($list, $index);

        $result-list: append($result-list, __call($iteratee, null, $value, $index, $list));

        $index: $index + 1;
    }

    @return $result-list;
}

@function __list-max($list) {
    $index: 1;
    $length: length($list);
    $result: const-get(NEGATIVE_INFINITY);

    // TODO use Hugo's comparison for strings
    @while ($index <= $length) {
        $value: nth($list, $index);
        @if ($value > $result) {
            $result: $value;
        }

        $index: $index + 1;
    }

    @return $result;
}

@function __list-min($list) {
    $index: 1;
    $length: length($list);
    $result: const-get(POSITIVE_INFINITY);

    // TODO use Hugo's comparison for strings
    @while ($index <= $length) {
        $value: nth($list, $index);
        @if ($value < $result) {
            $result: $value;
        }

        $index: $index + 1;
    }

    @return $result;
}

@function __list-reduce($list, $iteratee, $accumulator: null, $init-from-list: true) {
    $index: 1;
    $length: length($list);

    @if ($init-from-list and ($length > 0)) {
        $accumulator: nth($list, $index);
        $index: $index + 1;
    }

    @while ($index <= $length) {
        $value: nth($list, $index);
        $accumulator: call($iteratee, $accumulator, $value, $index, $list);

        $index: $index + 1;
    }

    @return $accumulator;
}

@function __list-reduce-right($list, $iteratee, $accumulator: null, $init-from-list: true) {
    $list: __list-reverse($list);

    @return __list-reduce($list, $iteratee, $accumulator, $init-from-list);
}

@function __list-some($list, $predicate) {
    $index: 1;
    $length: length($list);

    @while ($index <= $length) {
        $value: nth($list, $index);

        @if (call($predicate, $value, $index, $list)) {
            @return true;
        }

        $index: $index + 1;
    }

    @return false;
}

@function __assign-defaults($map-value, $source-value) {
    @return if($map-value == null, $source-value, $map-value);
}

@function __assign-own-defaults() {
    // todo
}

@function __base-assign($map, $source, $customizer: false) {
    $index: 1;
    $props: map-keys($source);
    $length: length($props);

    @while ($index <= $length) {
        $key: nth($props, $index);

        @if ($customizer) {
            $value: get($map, $key);
            $result: call($customizer, $value, get($source, $key), $key, $map, $source);

            @if ($result == if($result, not $result == $value, $value))
                or ($value == null and not map-has-key($map, $key))
            {
                $map: set($map, $key, $result);
            }
        } @else {
            $map: set($map, $key, get($source, $key));
        }

        $index: $index + 1;
    }

    @return $map;
}

@function __base-at($collection, $props) {
    $index: 1;
    $length: length($collection);
    $is-list: type-of($collection) == list;
    $props-length: length($props);
    $result: ();

    @debug $props;

    @while ($index <= $props-length) {
        $key: nth($props, $index);

        @if ($is-list) {
            $key: __parse-float($key);
            $result: append($result, if(__is-index($key, $length), nth($collection, $key), null));
        } @else {
            $result: append($result, get($collection, $key));
        }

        $index: $index + 1;
    }

    @return $result;
}

@function __base-bind-all() {
    // todo
}

@function __base-callback($function: __identity, $this-arg: $__undefined__, $arg-count: null) {
    $type: if(function-exists($function), 'function', type-of($function));

    @if ($type == 'function') {
        @return if(not __is-undefined($this-arg) and __is-bindable($function),
            __bind-callback($function, $this-arg, $arg-count),
            $function);
    }

    @if ($function == null) {
        @return __identity;
    }

    @return if($type == 'map',
        __base-matches($function, __is-falsey($arg-count)),
        __base-property(if(__is-truthy($arg-count), __base-to-string($function), $function)));
}

@function __base-clone($value, $is-deep: false, $customizer: null, $key: null, $object: null) {
    // todo

    // Sass does not copy by reference, so returning same value is safe
    @return $value;
}

@function __base-create() {
    // todo
}

@function __base-delay() {
    // not being implemented
}

@function __base-difference($list, $values) {
    $length: if(type-of($list) == list, length($list), 0);
    $result: ();

    @if ($length == 0) {
        @return $result;
    }

    $index: 1;
    $index-of: __base-index-of; // getIndexOf()
    $is-common: ($index-of == __base-index-of);
    $cache: if($is-common and length($values) >= 200, __create-cache($values), false);
    $values-length: length($values);

    @if ($cache) {
        $index-of: __cache-index-of;
        $is-common: false;
        $values: $cache;
    }

    @while ($index <= $length) {
        $continue-outer: false;
        $value: nth($list, $index);

        @if ($is-common) {
            $values-index: $values-length;

            @while ($values-index > 0 and not $continue-outer) {
                @if (nth($values, $values-index) == $value) {
                    $continue-outer: true;
                } @else {
                    $values-index: $values-index - 1;
                }
            }

            @if (not $continue-outer) {
                $result: append($result, $value);
            }
        } @else if (call($index-of, $values, $value) < 0) {
            $result: append($result, $value);
        }

        $index: $index + 1;
    }

    @return $result;
}

// @debug __base-difference((1 2 3), (5 2 10));

@function __base-each($collection, $iteratee) {
    $length: if($collection, length($collection), 0);

    @if not (__is-list($collection)) {
        @return __base-for-own($collection, $iteratee);
    }

    $index: 1;
    $iterable: __to-map($collection);

    $break: false;
    @while ($index <= $length and not $break) {
        $iteration: __call($iteratee, null, get($iterable, $index), $index, $iterable);

        @if ($iteration == false) {
            $break: true;
        } @else {
            $iterable: set($iterable, $index, $iteration);
        }

        $index: $index + 1;
    }

    $collection: if(type-of($collection) == list, map-values($iterable), $iterable);

    @return $collection;
}

// @debug __base-each((1, 3, 55), double);
// @debug __base-each((foo: 1, bar: 3, baz: 55), double);

@function __base-each-right($collection, $iteratee) {
    $collection: __list-reverse($collection);

    $reversed-result: __base-each($collection, $iteratee);

    @return __list-reverse($collection);
}

@function __base-every-iteratee($value, $index, $collection) {
    $predicate: scope-get(predicate);

    $result: if(call($predicate, $value, $index, $collection), true, false);

    $_: scope-set(result, $result);

    @return null;
}
@function __base-every($collection, $predicate) {
    $_: scope-set(result, true);
    $_: scope-set(predicate, $predicate);

    $_: __base-each($collection, __base-every-iteratee);

    $result: scope-get(result);
    $_: scope-end;

    @return if($result, true, false);
}

@function __base-filter-iteratee($value, $index, $collection) {
    $result: scope-get(result);
    $predicate: scope-get(predicate);

    @if (call($predicate, $value, $index, $collection)) {
        $_: scope-set(result, append($result, $value));
    }

    @return null;
}
@function __base-filter($collection, $predicate) {
    $_: scope-set(result, ());
    $_: scope-set(predicate, $predicate);

    $_: __base-each($collection, __base-filter-iteratee);

    $result: scope-get(result);
    $_: scope-end;

    @return $result;
}

@function __base-find-iteratee($value, $key, $collection) {
    $predicate: scope(predicate);
    $return-key: scope(return-key);

    @if __call($predicate, null, $value, $key, $collection) {
        $_: scope(result, if($return-key, $key, $value));

        @return false;
    }

    @return true;
}
@function __base-find($collection, $predicate, $each-function: __base-each, $return-key: false) {
    $result: null;

    $_: scope-start();
        $_: scope(result, null);
        $_: scope(predicate, $predicate);
        $_: scope(return-key, $return-key);

        $iteratee: scoped-function(__base-find-iteratee);

        $_: call($each-function, $collection, $iteratee);

        $result: scope(result);
    $_: scope-end();

    @return $result;
}

// @debug __base-find((1 2 3 4 5), is-even);

@function __base-flatten($list, $is-deep: false, $is-strict: false, $from-index: 1) {
    $index: $from-index;
    $length: length($list);
    $result-index: 1;
    $result: ();

    @while ($index <= $length) {
        $value: nth($list, $index);

        @if __is-map-like($value)
            and __is-length(length($value))
            and (__is-list($value) or __is-arguments($value))
        {
            @if ($is-deep) {
                $value: __base-flatten($value, $is-deep, $is-strict);
            }

            $value-index: 1;
            $value-length: length($value);

            @while ($value-index <= $value-length) {
                $result: append($result, nth($value, $value-index));

                $value-index: $value-index + 1;
            }
        // } @else if (not $is-strict) {
        } @else {
            $result: append($result, $value);
        }

        $index: $index + 1;
    }

    @return $result;
}

// @function __base-for($map, $iteratee, $keys-function) {
//     $index: 1;
//     $iterable: __to-map($map);
//     $props: call($keys-function, $iterable);
//     $length: length($props);
//     $result-map: ();

//     $break: false;

//     @while ($index <= $length and not $break) {
//         $key: nth($props, $index);
//         $iteration: call($iteratee, get($iterable, $key), $key, $iterable);

//         @if ($iteration == false) {
//             $break: true;
//         } @else {
//             $result-map: set($result-map, $key, $iteration);
//         }

//         $index: $index + 1;
//     }

//     @return $result-map;
// }

@function __base-for-right($map, $iteratee, $keys-function) {
    $map: __list-reverse($map);

    $result: __base-for($map, $iteratee, $keys-function);

    @return __list-reverse($result);
}

@function __base-for-in($map, $iteratee) {
    @return __base-for($map, $iteratee, __keys-in);
}

// @function __base-for-own($map, $iteratee) {
//     @return __base-for($map, $iteratee, __keys);
// }

@function __base-for-own-right($map, $iteratee) {
    @return __base-for-right($map, $iteratee, __keys);
}

@function __base-functions($map, $props) {
    $index: 1;
    $length: length($props);
    $result: ();

    @while ($index <= $length) {
        $key: nth($props, $index);

        @if (function-exists(get($map, $key))) {
            $result: append($result, $key);
        }

        $index: $index + 1;
    }

    @return $result;
}

@function __base-invoke-iteratee($value, $index, $collection) {
    $function: scope-get(method-name);
    $args: scope-get(args);

    @return call($function, $value, $index, $collection, $args...);
}
@function __base-invoke($collection, $method-name, $args...) {
    $index: 1;
    $is-function: function-exists($method-name);
    $length: if($collection, length($collection), 0);

    $_: scope-set(method-name, $method-name);
    $_: scope-set(args, $args);
    
    $result: __base-each($collection, __base-invoke-iteratee);

    $_: scope-end();

    @return $result;
}

@function __base-is-equal($value, $other, $customizer: null, $is-where: null, $stack-a: null, $stack-b: null) {
    @return $value == $other;
}

@function __base-is-equal-deep($value, $other, $customizer: null, $is-where: null, $stack-a: null, $stack-b: null) {
    @return $value == $other;
}

@function __base-is-match($map, $props, $values, $strict-compare-flags: (), $customizer: false) {
    $length: length($props);
    $result: null;

    @if ($map == null) {
        @return if($length == 0 or $length == null, false, true);
    }

    $index: 1;
    $no-customizer: if($customizer, false, true);

    @while ($index <= $length) {
        @if if(($no-customizer and length($strict-compare-flags) > 0 and nth($strict-compare-flags, $index)),
                (not nth($values, $index) == get($map, nth($props, $index))),
                (not map-has-key($map, nth($props, $index)))
            ) {
            @return false;
        }

        $index: $index + 1;
    }

    $index: 1;

    @while ($index <= $length) {
        $key: nth($props, $index);

        @if ($no-customizer and length($strict-compare-flags) > 0 and nth($strict-compare-flags, $index)) {
            $result: map-has-key($map, $key);
        } @else {
            $map-value: get($map, $key);
            $src-value: get($values, $index);

            $result: if($customizer, call($customizer, $map-value, $src-value, $key), null);

            @if ($result == null) {
                $result: call(__base-is-equal, $src-value, $map-value, $customizer, true);
            }
        }

        @if (not $result) {
            @return false;
        }

        $index: $index + 1;
    }

    @return true;
}

// @debug __base-is-match((foo: bar, baz: 42), (baz), (43));

@function __base-map($collection, $iteratee) {
    $result: ();

    $result: append($result, __base-each($collection, $iteratee));

    @return $result;
}

// @debug __base-map((foo: 1, bar: 3, baz: 55), double);

@function __base-matches-function-1($map) {
    $value: this(value);
    $key: this(key);

    @return ($map != null)
        and (map-has-key($map, $key))
        and ($value == get($map, $key));
}
@function __base-matches-function-2($map) {
    @return __base-is-match(
        this('map'),
        this('props'),
        this('values'),
        this('strict-compare-flags'));
}
@function __base-matches($source, $is-cloned: false) {
    $props: map-keys($source);
    $length: length($props);

    $_: scope-start();

    @if ($length == 1) {
        $key: nth($props, 1);
        $value: get($source, $key);

        $_: scope(key, $key);
        $_: scope(value, $value);

        @if (__is-strict-comparable($value)) {
            $result: scoped-function(__base-matches-function-1);

            $_: scope-end();

            @return $result;
        }
    }

    @if ($is-cloned) {
        $source: __base-clone($source, true);
    }

    $values: (); // list
    $strict-compare-flags: (); // list

    @while ($length > 0) {
        $value: get($source, nth($props, $length));
        $values: set($values, $length, $value);
        $strict-compare-flags: set($strict-compare-flags, $length, __is-strict-comparable($value));

        $length: $length - 1;
    }

    $values: __to-list($values);
    $strict-compare-flags: __to-list($strict-compare-flags);

    $_: scope(props, $props);
    $_: scope(values, $values);
    $_: scope(strict-compare-flags, $strict-compare-flags);

    $result: scoped-function(__base-matches-function-2);

    $_: scope-end();

    @return $result;
}

@function __base-merge-iteratee($src-value, $key, $source) {
    $map: scope-get(map);
    $source: scope-get(source);
    $customizer: scope-get(customizer);
    $stack-a: scope-get(stack-a);
    $stack-b: scope-get(stack-b);
    $is-src-list: scope-get(is-src-list);

    $is-list: __is-list-like($src-value);
    $is-map: __is-plain-map($src-value);
    $value: get($map, $key);

    @if not ($is-list or $is-map) {
        $result: if($customizer, call($customizer, $value, $src-value, $key, $map, $source), null);
        $is-common: ($result == null);

        @if ($is-common) {
            $result: $src-value;
        }

        @if ($is-src-list or not $result == null)
            and ($is-common or not $result == $value)
        {
            $map: set($map, $key, $result);
        }

        @return $map;
    }

    $stack-a: if(length($stack-a), $stack-a, ());
    $stack-b: if(length($stack-b), $stack-b, ());

    $length: length($stack-a);

    @while ($length > 0) {
        @if (nth($stack-a, $length) == $src-value) {
            $map: set($map, $key, nth($stack-b, $length));

            @return $map;
        }

        $result: if($customizer, call($customizer, $value, $src-value, $key, $map, $source), null);
        $is-common: ($result == null);

        @if ($is-common) {
            $result: if($is-list,
                if(__is-list($value), $value, ()),
                if(__is-plain-map($value), $value, ()));
        }

        $stack-a: append($stack-a, $src-value);
        $stack-b: append($stack-b, $result);

        @if ($is-common) {
            $map: set($map, $key, __base-merge($result, $src-value, $customizer, $stack-a, $stack-b));
        } @else if not ($result == $value) {
            $map: set($map, $key, $result);
        }

        $length: $length - 1;
    }

    @return $map;
}
@function __base-merge($map, $source, $customizer: null, $stack-a: null, $stack-b: null) {
    $is-src-list: __is-list-like($source);
    $result: ();

    $_: scope-set(map, $map);
    $_: scope-set(source, $source);
    $_: scope-set(customizer, $customizer);
    $_: scope-set(stack-a, $stack-a);
    $_: scope-set(stack-b, $stack-b);
    $_: scope-set(is-src-list, $is-src-list);

    $merge-function: if($is-src-list, __list-each, __base-for-own);

    $result: call($merge-function, $source, __base-merge-iteratee);

    $_: scope-end();

    @return $result;
}

// @debug __base-merge((baz: butt), (foo: bar, baz: quo));


@function __base-property-function($map: null, $args...) {
    $key: this(key);

    @return if($map == null, null, get($map, $key));
}
@function __base-property($key) {
    $_: scope-start();
    $_: scope(key, $key);

    $result: scoped-function(__base-property-function);

    $_: scope-end();

    @return $result;
}

// $yoname: __base-property('name');
// $yomap: (foo: bar, name: billy, baz: quo);

// @debug __call($yoname, null, $yomap);

@function __base-pull-at($list, $indexes) {
    // not implementing - mutates list
}

@function __base-random($min, $max) {
    @return $min + floor(random() * ($max - $min + 1));
}

// @debug __base-random(3, 10);

@function __base-reduce-iteratee($value, $index, $collection) {
    $collection: scope-get(collection);
    $iteratee: scope-get(iteratee);
    $accumulator: scope-get(accumulator);
    $init-from-collection: scope-get(init-from-collection);
    $each-function: scope-get(each-function);

    @if ($init-from-collection) {
        $init-from-collection: false;
        $accumulator: $value;
    } @else {
        $accumulator: call($iteratee, $accumulator, $value, $index, $collection);
    }

    $_: scope-set(collection, $collection);
    $_: scope-set(iteratee, $iteratee);
    $_: scope-set(accumulator, $accumulator);
    $_: scope-set(init-from-collection, $init-from-collection);
    $_: scope-set(each-function, $each-function);

    @return null;
}
@function __base-reduce($collection, $iteratee, $accumulator, $init-from-collection, $each-function) {
    $_: scope-set(collection, $collection);
    $_: scope-set(iteratee, $iteratee);
    $_: scope-set(accumulator, $accumulator);
    $_: scope-set(init-from-collection, $init-from-collection);
    $_: scope-set(each-function, $each-function);

    $_: call($each-function, $collection, __base-reduce-iteratee);

    $accumulator: scope-get(accumulator);

    @return $accumulator;
}

@function __base-set-data($function, $data) {
    $_: static-set('__meta-map__', $function, $data);

    @return $function;
}

@function __base-slice($list, $start: 1, $end: length($list)) {
    $index: 1;
    $length: length($list);

    @if ($start < 0) {
        $start: if(-$start > $length, 0, ($length + $start));
    }

    $end: if($end > $length, $length, if($end, $end, 0));

    @if ($end < 0) {
        $end: $end + $length;
    }

    $length: if($start > $end, 0, ($end - $start));

    $result: ();

    @while ($index <= $length) {
        $result: append($result, nth($list, ($index + $start)));

        $index: $index + 1;
    }

    @return $result;
}

// @debug __base-slice((1 2 3), 1); // 2 3
// @debug __base-slice((1 2 3), 4); // ()
// @debug __base-slice((1 2 3), -1); // 3
// @debug __base-slice((1 2 3), -3); // 1 2 3
// @debug __base-slice((1 2 3 4 5 6 7 8), 2, 5);

@function __base-some-iteratee($value, $index, $collection) {
    $predicate: scope-get(predicate);
    $result: scope-get(result);

    $result: call($predicate, $value, $index, $collection);

    $_: scope-set(result, $result);

    @return if($result, false, true);
}
@function __base-some($collection, $predicate) {
    $result: false;

    $_: scope-set(predicate, $predicate);
    $_: scope-set(result, $result);

    $_: __base-each($collection, __base-some-iteratee);

    $result: scope-get(result);

    $_: scope-end();

    @return if($result, true, false);
}

// @debug __base-some((1 3 5 7 9), is-even);
// @debug __base-some((2 3 5 7 9), is-even);

@function __base-uniq($list, $iteratee: null) {
    $index: 1;
    $index-of: __get-index-of();
    $length: length($list);
    $is-common: ($index-of == '__base-index-of');
    $is-large: ($is-common and $length >= 200);
    $seen: if($is-large, __create-cache(), false);
    $result: ();

    @if ($seen) {
        $index-of: '__cache-index-of';
        $is-common: false;
    } @else {
        $is-large: false;
        $seen: if($iteratee, (), $result);
    }

    @while ($index <= $length) {
        $continue-outer: false;
        $value: nth($list, $index);
        $computed: if($iteratee, call($iteratee, $value, $index, $list), $value);

        @if ($is-common) {
            $seen-index: length($seen);

            @while ($seen-index > 0 and not $continue-outer) {
                @if (nth($seen, $seen-index) == $computed) {
                    $continue-outer: true;
                } @else {
                    $seen-index: $seen-index - 1;
                }
            }

            @if (not $continue-outer) {
                @if ($iteratee) {
                    $seen: append($seen, $computed);
                }

                $result: append($result, $value);
                $seen: $result;
            }
        } @else if (call($index-of, $seen, $computed) < 0) {
            @if ($iteratee or $is-large) {
                $seen: append($seen, $computed);
            }

            $result: append($result, $value);
            $seen: $result;
        }

        $index: $index + 1;
    }

    @return $result;
}

// @function flr($val, $idx, $lis) {
//     @return floor($val);
// }
// @debug __base-uniq((1 2 1 3 1 4 2.4), flr);

@function __base-values($map, $props) {
    $index: 1;
    $length: length($props);
    $result: ();

    @while ($index <= $length) {
        $result: append($result, get($map, nth($props, $index)));

        $index: $index + 1;
    }

    @return $result;
}

@function __values($map) {
    @return __base-values($map, map-keys($map));
}

@function __base-wrapper-value($value, $actions) {
    // todo
    $result: $value;

    @if (instanceof($result, LazyWrapper)) {
        // todo
    }

    $index: 1;
    $length: length($actions);

    @while ($index <= $length) {
        $args: ($result,);
        $action: nth($actions, $index);

        $args: append($args, get($action, args));
        $result: call(get($action, func), get($action, this-arg), $args...);

        $index: $index + 1;
    }

    @return $result;
}

@function __binary-index($list, $value, $ret-highest) {
    $low: 0;
    $high: if($list, length($list), $low);

    @if (type-of($value) == number and $high <= const-get(HALF_MAX_LIST_LENGTH)) {
        @while ($low < $high) {
            $mid: floor(($low + $high) / 2);
            $computed: nth($list, $mid);

            @if (if($ret-highest, ($computed <= $value), ($computed < $value))) {
                $low: $mid + 1;
            } @else {
                $high: $mid;
            }
        }

        @return $high;
    }

    @return __binary-index-by($list, $value, __identity, $ret-highest);
}

@function __binary-index-by($list, $value, $iteratee, $ret-highest) {
    $value: call($iteratee, $value);

    $low: 0;
    $high: if($list, length($list), 0);
    $val-is-undefined: ($value == null);

    @while ($low < $high) {
        $mid: floor(($low + $high) / 2);
        $computed: call($iteratee, nth($list, $mid));

        @if ($val-is-undefined) {
            $set-low: ($ret-highest > 0 or not ($computed == null));
        } @else {
            $set-low: if($ret-highest > 0, ($computed <= $value), ($computed < $value));
        }

        @if ($set-low) {
            $low: $mid + 1;
        } @else {
            $high: $mid;
        }
    }

    @return call(native-min, $high, const-get(MAX_LIST_INDEX));
}

@function __bind-callback-1($value) {
    $function: scope(function);
    $this-arg: scope(this-arg);

    @return __call($function, $this-arg, $value);
}
@function __bind-callback-3($value, $index, $collection) {
    $function: scope(function);
    $this-arg: scope(this-arg);

    @return __call($function, $this-arg, $value, $index, $collection);
}
@function __bind-callback-4($accumulator, $value, $index, $collection) {
    $function: scope(function);
    $this-arg: scope(this-arg);

    @return __call($function, $this-arg, $accumulator, $value, $index, $collection);
}
@function __bind-callback-5($value, $other, $key, $map, $source) {
    $function: scope(function);
    $this-arg: scope(this-arg);

    @return __call($function, $this-arg, $value, $other, $key, $map, $source);
}
@function __bind-callback-any($arguments...) {
    $function: scope(function);
    $this-arg: scope(this-arg);

    @return __call($function, $this-arg, $arguments...);
}
@function __bind-callback($function, $this-arg: null, $arg-count: null) {
    @if (not function-exists($function)) {
        @return __identity;
    }

    @if ($this-arg == null) {
        @return $function;
    }

    $_: scope-start();
    $_: scope-set(function, $function);
    $_: scope-set(this-arg, $this-arg);

    $arg-count-case: (
        1: __bind-callback-1,
        3: __bind-callback-3,
        4: __bind-callback-4,
        5: __bind-callback-5
    );

    @if ($arg-count > 5) {
        @return __bind-callback-any;
    }

    $result: scoped-function(get($arg-count-case, $arg-count), $this-arg);

    $_: scope-end();

    @return $result;
}

@function __buffer-clone() {
    // not implemented
}

@function __compose-args($args, $partials, $holders) {
    $holders-length: length($holders);
    $args-index: 1;
    $args-length: __native-max(length($args) - $holders-length, 0);
    $left-index: 1;
    $left-length: length($partials);
    $result: ();

    @while ($left-index <= $left-length) {
        $result: set($result, $left-index, nth($partials, $left-index));

        $left-index: $left-index + 1;
    }
    @while ($args-index <= $holders-length) {
        $result: set($result, nth($holders, $args-index), nth($args, $args-index));

        $args-index: $args-index + 1;
    }
    @while ($args-length > 0) {
        $result: set($result, $left-index, nth($args, $args-index));

        $left-index: $left-index + 1;
        $args-index: $args-index + 1;
        $args-length: $args-length - 1;
    }

    @return $result;
}

@function __compose-args-right() {
    // TODO
}

    // function composeArgsRight(args, partials, holders) {
    //   var holdersIndex = -1,
    //       holdersLength = holders.length,
    //       argsIndex = -1,
    //       argsLength = nativeMax(args.length - holdersLength, 0),
    //       rightIndex = -1,
    //       rightLength = partials.length,
    //       result = Array(argsLength + rightLength);

    //   while (++argsIndex < argsLength) {
    //     result[argsIndex] = args[argsIndex];
    //   }
    //   var pad = argsIndex;
    //   while (++rightIndex < rightLength) {
    //     result[pad + rightIndex] = partials[rightIndex];
    //   }
    //   while (++holdersIndex < holdersLength) {
    //     result[pad + holders[holdersIndex]] = args[argsIndex++];
    //   }
    //   return result;
    // }

@function __create-aggregator-function-iteratee($value, $key, $collection) {
    $result: scope(result);
    $setter: scope(setter);
    $iteratee: scope(iteratee);

    $result: call($setter, $result, $value, call($iteratee, $value, $key, $collection), $collection);

    @debug $result;

    $_: scope(result, $result);

    @return true;
}
@function __create-aggregator-function($collection, $iteratee, $this-arg: null) {
    $setter: scope(setter);
    $initializer: scope(initializer);

    $iteratee: __get-callback($iteratee, $this-arg, 3);
    $_: scope(iteratee, $iteratee);

    $result: if($initializer, call($initializer), ());

    @if (__is-list($collection)) {
        $index: 1;
        $length: length($collection);

        @while ($index <= $length) {
            $value: nth($collection, $index);
            $result: call($setter, $result, $value, call($iteratee, $value, $index, $collection), $collection);

            $index: $index + 1;
        }
    } @else {
        $_: scope(result, $result);

        $_: __base-each($collection, __create-aggregator-function-iteratee);

        $result: scope(result);
    }

    @return $result;
}
@function __create-aggregator($setter, $initializer: null) {
    $_: scope-start();
        $_: scope(setter, $setter);
        $_: scope(initializer, $initializer);

        $function: scoped-function(__create-aggregator-function);
    $_: scope-end();

    @return $function;
}

    // function createAggregator(setter, initializer) {
    //   return function(collection, iteratee, thisArg) {
    //     iteratee = getCallback(iteratee, thisArg, 3);

    //     var result = initializer ? initializer() : {};
    //     if (isArray(collection)) {
    //       var index = -1,
    //           length = collection.length;

    //       while (++index < length) {
    //         var value = collection[index];
    //         setter(result, value, iteratee(value, index, collection), collection);
    //       }
    //     } else {
    //       baseEach(collection, function(value, key, collection) {
    //         setter(result, value, iteratee(value, key, collection), collection);
    //       });
    //     }
    //     return result;
    //   };
    // }

@function __create-assigner() {
    // todo
}

@function __create-bind-wrapper($function, $this-arg) {
    // todo
}

@function __create-cache($values) {
    @return new(SetCache($values));
}

@function __create-compounder() {
    // todo
}

@function __create-ctor-wrapper() {}

@function __create-extremum() {}

@function __create-hybrid-wrapper() {}

@function __create-pad($string, $length, $chars: ' ') {
    $str-length: str-length($string);

    @if ($str-length >= $length) or not (__native-is-finite($length)) {
        @return '';
    }

    $pad-length: $length - $str-length;
    $chars: $chars + '';

    @return __base-slice(__repeat($chars, ceil($pad-length / str-length($chars))), 1, $pad-length);
}

// @debug __create-pad('abcd', 14);

@function __create-partial-wrapper() {}

@function __create-wrapper() {}

@function __equal-lists($list, $other, $equal-func, $customizer, $is-where, $stack-a, $stack-b) {
    $index: 1;
    $list-length: length($list);
    $other-length: length($other);
    $result: true;

    @if not ($list-length == $other-length)
        and not ($is-where and ($other-length > $list-length))
    {
        @return false;
    }

    @while ($result and ($index < $list-length)) {
        $list-value: nth($list, $index);
        $other-value: nth($other, $index);

        $result: null;

        @if ($customizer) {
            $result: if($is-where,
                call($customizer, $other-value, $list-value, $index),
                call($customizer, $list-value, $other-value, $index));
        }

        @if (__is-undefined($result)) {
            @if ($is-where) {
                $other-index: $other-length;

                $break: false;
                @while ($other-index > 0 and not $break) {
                    $other-value: nth($other, $other-index);
                    $result: if(if($list-value, $list-value == $other-value, false),
                        true,
                        call($equal-func, $list-value, $other-value, $customizer, $is-where, $stack-a, $stack-b));

                    @if ($result) {
                        $break: true;
                    }

                    $other-index: $other-index - 1;
                }
            } @else {
                $result: if(if($list-value, $list-value == $other-value, false),
                    true,
                    call($equal-func, $list-value, $other-value, $customizer, $is-where, $stack-a, $stack-b));
            }
        }

        $index: $index + 1;
    }

    @return if($result, true, false);
}

@function __equal-by-tag() {}

@function __equal-maps($map, $other, $equal-func: false, $customizer: false, $is-where: false, $stack-a: null, $stack-b: null) {
    $map-props: map-keys($map);
    $map-length: length($map-props);
    $other-props: map-keys($other);
    $other-length: length($other-props);

    @if ($map-length != $other-length) and not ($is-where) {
        @return false;
    }

    $has-ctor: false;
    $index: 1;

    @while ($index <= $map-length) {
        $key: nth($map-props, $index);
        $result: map-has-key($other, $key);

        @if ($result) {
            $map-value: get($map, $key);
            $other-value: get($other, $key);

            $result: $__undefined__;

            @if ($customizer) {
                $result: if($is-where,
                    call($customizer, $other-value, $map-value, $key),
                    call($customizer, $map-value, $other-value, $key));
            }

            @if (is-undefined($result)) {
                $result: if($map-value, ($map-value == $other-value), false);
                $result: if($result, $result, call($equal-func, $map-value, $other-value, $customizer, $is-where, $stack-a, $stack-b));
            }
        }

        @if not ($result) {
            @return false;
        }

        $has-ctor: if($has-ctor, true, ($key == '_constructor'));

        $index: $index + 1;
    }

    @if not ($has-ctor) {
        // todo
    }

    @return true;
}

@function __extremum-by-iteratee($value, $index, $collection) {
    $collection: scope(collection);
    $iteratee: scope(iteratee);
    $is-min: scope(is-min);
    $ex-value: scope(ex-value);
    $computed: scope(computed);
    $result: scope(result);

    $current: call($iteratee, $value, $index, $collection);
    
    @if (if($is-min, $current < $computed, $current > $computed))
        or ($current == $ex-value and $current == $result)
    {
        $_: scope(computed, $current);
        $_: scope(result, $value);
    }

    @return true;
}
@function __extremum-by($collection, $iteratee, $is-min: false) {
    $ex-value: if($is-min, const-get('POSITIVE_INFINITY'), const-get('NEGATIVE_INFINITY'));
    $computed: $ex-value;
    $result: $computed;

    $_: scope-start();
        $_: scope(collection, $collection);
        $_: scope(iteratee, $iteratee);
        $_: scope(is-min, $is-min);
        $_: scope(ex-value, $ex-value);
        $_: scope(computed, $computed);
        $_: scope(result, $result);

        $_: __base-each($collection, __extremum-by-iteratee);

        $result: scope(result);
    $_: scope-end();

    @return $result;
}

// @debug __extremum-by((1 3 4 5 6 9 2 4 3), __identity, true);

@function __get-callback($function: __identity, $this-arg: null, $arg-count: null) {
    $result: __callback;

    $result: if($result == __callback, __base-callback, $result);

    @return if($arg-count, call($result, $function, $this-arg, $arg-count), $result);
}

@function __get-data($function) {
    @if not static-get('__meta-map__') {
        @return __noop();
    }

    @return static-get('__meta-map__' $function);
}

@function __get-index-of($collection: null, $target: $__undefined__, $from-index: $__undefined__) {
    $result: __base-index-of;

    @return if($collection, call($result, $collection, $target, $from-index), $result);
}

@function __get-view($start, $end, $transforms) {
    $index: 1;
    $length: if($transforms, length($transforms), 0);

    @while ($index <= $length) {
        $data: nth($transforms, $index);
        $size: get($data, size);
        $type: get($data, type);

        @if ($type == 'drop') {
            $start: $start + $size;
        } @else if ($type == 'drop-right') {
            $end: $end - $size;
        } @else if ($type == 'take') {
            $end: __native-min($end, $start + $size);
        } @else if ($type == 'take-right') {
            $start: __native-max($start, $end - $size);
        }

        $index: $index + 1;
    }

    @return (
        'start': $start,
        'end': $end
    );
}

@function __init-clone-list($list) {
    $length: length($list);
    $result: ();

    @return $result;
}

@function __init-clone-map($map) {
    $ctor: get($map, '_constructor');

    @if not (function-exists($ctor) and __is-ctor($ctor)) {
        $ctor: 'Object';
    }

    @return new($ctor);
}

// @function Dog() {
//     @return (
//         legs: 4,
//         sound: 'bark'
//     );
// }
// $dog: new(Dog);
// @debug $dog;
// @debug __init-clone-map($dog);

@function __init-clone-by-tag() {}

@function x__is-list-like($value) {
    // _helpers
}
@function __is-bindable($function) {
    // Can't check for this(); there's no toString in Sass for functions
    @return function-exists($function);
}

@function __is-iteratee-call($value, $index, $map) {
    @if not (__is-map-like($map)) {
        @return false;
    }

    $type: type-of($index);

    @if ($type == 'number') {
        $length: length($map);
        $prereq: (__is-length($length) and __is-index($index, $length));
    } @else {
        $prereq: ($type == 'string');
    }

    @return if($prereq, get($map, $index) == $value, false);
}

@function x__is-length() {
    // _helpers
}

@function x__is-strict-comparable() {
    // _helpers
}

@function __merge-data() {}

@function __pick-by-list($map, $props) {
    $type: type-of($map);
    $map: __to-map($map);

    $index: 1;
    $length: length($props);
    $result: ();

    @while ($index <= $length) {
        $key: nth($props, $index);

        @if (map-has-key($map, $key)) {
            $result: set($result, $key, get($map, $key));
        }

        $index: $index + 1;
    }

    @return if($type == 'list', __to-list($result), $result);
}

// @debug __pick-by-list((2 4 6 8 10 12 14), (4 5 6));
// @debug __pick-by-list((a: 1, b: 2, c: 3, d: 4, e: 5), (a, c, e));

@function __pick-by-callback-iteratee($value, $key, $map) {
    $result: scope(result);
    $predicate: scope(predicate);

    @if (call($predicate, $value, $key, $map)) {
        $_: scope(result, set($result, $key, $value));
    }

    @return true;
}
@function __pick-by-callback($map, $predicate) {
    $result: ();

    $_: scope-start();
        $_: scope(map, $map);
        $_: scope(predicate, $predicate);
        $_: scope(result, $result);

        $_: __base-for-in($map, __pick-by-callback-iteratee);

        $result: scope(result);
    $_: scope-end();

    @return $result;
}

// @debug __pick-by-callback((a: 1, b: 2, c: 3, d: 4, e: 5), is-even);

@function __reorder($list, $indexes) {
    $list-length: length($list);
    $length: __native-min(length($indexes), $list-length);
    $old-list: __list-copy($list);

    $list: __to-map($list);

    @while ($length > 0) {
        $index: nth($indexes, $length);

        $list: set($list, $length, if(__is-index($index, $list-length), nth($old-list, $index), $__undefined__));

        $length: $length - 1;
    }

    @return __to-list($list);
}

@function __set-data($key, $value) {
    // No need to support hot loop detection at the moment
    @return __base-set-data($key, $value);
}

@function __shim-is-plain-map() {
    // not implemented
}

@function __shim-keys() {
    // not implemented
}

@function __to-iterable($value) {
    @if ($value == null) {
        @return ();
    }

    @if not (__is-length(length($value))) {
        @return __values($value);
    }

    @if (__is-string($value)) {
        @return __to-map(__string-split($value, ''));
    }

    @return if(__is-map($value), $value, __to-map($value));
}

// @debug __to-iterable(null);
// @debug __to-iterable('abcde');
// @debug __to-iterable((foo, bar, baz, quo));
// @debug __to-iterable((foo: bar, baz: quo));

@function x__to-map($value) {
    // _helpers
}

@function __to-string($value) {
    @if (type-of($value) == 'string') {
        @return $value;
    }

    @if ($value == null) {
        @return '';
    }

    @return inspect($value);
}

// @debug __to-string('hello');
// @debug __to-string(hello);
// @debug __to-string(12345);
// @debug __to-string((foo: bar));
// @debug __to-string(null);

@function __chunk($list, $size: null, $guard: null) {
    @if (if($guard, __is-iteratee-call($list, $size, $guard), ($size == null))) {
        $size: 1;
    } @else {
        $size: __native-max(if($size == 0, 1, $size), 1);
    }

    $index: 1;
    $length: if($list, length($list), 0);
    $result-index: 1; // not-used
    $result: ();

    @while ($index <= $length) {
        $result: append($result, __base-slice($list, $index, $index + $size - 1));

        $index: $index + $size;
        $result-index: $result-index + 1; // not used
    }

    @return $result;
}

// @debug __chunk((a b c d), 2);
// @debug __chunk((a b c d), 3);

@function __compact($list) {
    $index: 1;
    $length: if($list, length($list), 0);
    $result: ();

    @while ($index <= $length) {
        $value: nth($list, $index);

        @if not (__is-falsey($value)) {
            $result: append($result, $value);
        }

        $index: $index + 1;
    }

    @return $result;
}

// @debug __compact((0 1 false 2 '' 3));

@function __difference($arguments...) {
    $index: 1;
    $length: length($arguments);
    $value: null;

    $break: false;
    @while ($index <= $length and not $break) {
        $value: nth($arguments, $index);

        @if (__is-list($value)) or (__is-arguments($value)) {
            $break: true;
        } @else {
            $index: $index + 1;
        }
    }
    @return __base-difference($value, __base-flatten($arguments, false, true, $index + 1));
}

// @debug __difference((1 2 3), (5 2 10), (1 90 91));

@function __drop($list, $n: null, $guard: false) {
    $length: if($list, length($list), 0);

    @if ($length == 0) {
        @return ();
    }

    @if (if($guard, __is-iteratee-call($list, $n, $guard), ($n == null))) {
        $n: 1;
    }

    @return __base-slice($list, if($n < 0, 0, min($n, length($list))));
}

// @debug __drop((1 2 3));
// @debug __drop((1 2 3), 2);
// @debug __drop((1 2 3), 5);
// @debug __drop((1 2 3), 0);

@function __drop-right($list, $n: null, $guard: false) {
    $length: if($list, length($list), 0);

    @if ($length == 0) {
        @return ();
    }

    @if (if($guard, __is-iteratee-call($list, $n, $guard), ($n == null))) {
        $n: 1;
    }

    $n: $length - if(type-of($n) == 'number', $n, if(__is-falsey($n), 0, 1));

    @return __base-slice($list, 0, if($n < 0, 0, $n));
}

// @debug __drop-right((1 2 3 4 5));
// @debug __drop-right((1 2 3 4 5), 2);

@function __drop-right-while($list, $predicate: __identity, $this-arg: null) {
    $length: if($list, length($list), 0);

    @if ($length == 0) {
        @return ();
    }

    $predicate: __get-callback($predicate, $this-arg, 3);

    @while ($length > 0 and call($predicate, nth($list, $length), $length, $list)) {
        $length: $length - 1;
    }

    @return __base-slice($list, 0, $length);
}

// @debug __drop-right-while((1 2 3 4 5 6 7 8 10 12 14), is-even);


@function __drop-while($list, $predicate: __identity, $this-arg: null) {
    $length: if($list, length($list), 0);

    @if ($length == 0) {
        @return ();
    }

    $index: 1;

    $predicate: __get-callback($predicate, $this-arg, 3);

    @while ($index <= $length and call($predicate, nth($list, $index), $index, $list)) {
        $index: $index + 1;
    }

    @return __base-slice($list, $index - 1);
}

// @debug __drop-while((2 4 6 8 10 12 13 14 15 16), is-even);


@function __find-index($list, $predicate: __identity, $this-arg: null) {
    $index: 1;
    $length: if($list, length($list), 0);

    $predicate: __get-callback($predicate, $this-arg, 3);

    @while ($index <= $length) {
        @if (__call($predicate, $this-arg, nth($list, $index), $index, $list)) {
            @return $index;
        }

        $index: $index + 1;
    }

    @return -1;
}

// @debug __find-index((1 3 5 7 2 9), is-even);
// @debug __find-index((1 3 5 7 3 9), is-even);

@function __find-last-index($list, $predicate: __identity, $this-arg: null) {
    $length: if($list, length($list), 0);

    $predicate: __get-callback($predicate, $this-arg, 3);

    @while ($length > 0) {
        @if (call($predicate, nth($list, $length), $length, $list)) {
            @return $length;
        }

        $length: $length - 1;
    }

    @return -1;
}

// @debug __find-last-index((1 2 3 5 7 9 4 3), is-even);

@function __first($list) {
    @return if($list, nth($list, 1), $__undefined__);
}

// @debug __first((2 4 6 8));
// @debug __first(null);

@function __flatten($list, $is-deep: false, $guard: null) {
    $length: if($list, length($list), 0);

    @if ($guard and __is-iteratee-call($list, $is-deep, $guard)) {
        $is-deep: false;
    }

    @return if($length > 0, __base-flatten($list, $is-deep), ());
}

// @debug __flatten((1 (2 3) (4 (5 6)) (7 (8 (9 10 100))))); // single level flatten
// @debug __flatten((1 (2 3) (4 (5 6)) (7 (8 (9 10 100)))), true); // deep flatten

@function __flatten-deep($list) {
    $length: if($list, length($list), 0);

    @return if($length > 0, __base-flatten($list, true), ());
}

// @debug __flatten-deep((1 (2 3) (4 (5 6)) (7 (8 (9 10 100))))); // deep flatten

@function __index-of($list, $value, $from-index: 1) {
    $length: if($list, length($list), 0);

    @if ($length == 0) {
        @return -1;
    }

    @if (type-of($from-index) == 'number') {
        $from-index: if($from-index < 0, __native-max($length + $from-index, 0), $from-index);
    } @else if not (__is-falsey($from-index)) {
        $index: __binary-index($list, $value);
        $other: nth($list, $index);

        @return if($value == $other, $index, -1);
    }

    @return __base-index-of($list, $value, $from-index);
}

// @debug __index-of((10 20 30 40 50), 10);

@function __initial($list) {
    @return __drop-right($list, 1);
}

// @debug __initial((1 2 3));

@function __intersection($arguments...) {
    $args: ();
    $args-index: 1;
    $args-length: length($arguments);
    $caches: ();
    $index-of: __get-index-of();
    $is-common: $index-of == '__base-index-of';

    @while ($args-index <= $args-length) {
        $value: nth($arguments, $args-index);

        @if (__is-list($value) or __is-arguments($value)) {
            $args: append($args, $value);

            @if ($is-common and length($value) >= 120) {
                $caches: append($caches, __create-cache(if($args-index, $value, false)));
            } @else {
                $caches: append($caches, false);
            }
        }

        $args-index: $args-index + 1;
    }

    $args-length: length($args);

    $list: nth($args, 1);
    $index: 1;
    $length: if($list, length($list), 0);
    $result: ();
    $seen: nth($caches, 1);

    $continue-outer: false;
    @while ($index <= $length) {
        $continue-outer: false;
        $value: nth($list, $index);

        @if (if($seen, __cache-index-of($seen, $value), __index-of($result, $value)) < 0) {
            $args-index: $args-length;

            @while ($args-index > 0 and not $continue-outer) {
                $cache: nth($caches, $args-index);

                @debug $value, __index-of($result, $value), __index-of(nth($args, $args-index), $value);

                @if (if($cache,
                        __cache-index-of($cache, $value),
                        __index-of(nth($args, $args-index), $value))
                    < 0)
                {
                    $continue-outer: true;
                }

                @if not ($continue-outer) {
                    @if ($seen) {
                        $seen: append($seen, $value);
                    }

                    $result: append($result, $value);

                    $args-index: $args-index - 1;
                }
            }
        }

        $index: $index + 1;
    }

    @return __base-uniq($result); // todo: fix
}

// @debug __intersection((1 2 3), (2 3 5), (3 5 7));

@function __last($list) {
    $length: if($list, length($list), 0);

    @return if(not __is-falsey($length), nth($list, $length), $__undefined__);
}

// @debug __last((1 3 439523 9123 9));

@function __last-index-of($list, $value, $from-index: length($list)) {
    $length: if($list, length($list), 0);

    @if (__is-falsey($length)) {
        @return -1;
    }

    $index: $length;

    @if (type-of($from-index) == 'number') {
        $index: if($from-index < 0, __native-max($length + $from-index, 0), __native-min($from-index, $length - 1)) + 1;
    } @else if not (__is-falsey($from-index)) {
        $index: __binary-index($list, $avlue, true) - 1;

        $other: nth($list, $index);

        @return if($value == other, $index, -1);
    }

    @while ($index > 0) {
        @if (nth($list, $index) == $value) {
            @return $index;
        }

        $index: $index - 1;
    }

    @return -1;
}

// @debug __last-index-of((12 23 34 45 56 1 2 3 4 5 6 7 23 39 9), 23);

@function __pull($arguments...) {
    $list: nth($arguments, 1);

    @if not ($list and length($list)) {
        @return $list;
    }

    $index: 1;
    $index-of: __get-index-of();
    $length: length($arguments);

    @while ($index <= $length) {
        $from-index: 1;
        $value: nth($arguments, $index);

        @while (__index-of($list, $value, $from-index) > -1) {
            $from-index: __index-of($list, $value, $from-index);

            $list: __splice($list, $from-index, 1);
        }

        $index: $index + 1;
    }

    @return $list;
}

// @debug __pull((1 2 3 1 2 3), 2, 3);

@function __pull-at($arguments...) {
    $list: nth($arguments, 1);

    // TODO - implement base-pull-at!!
    @return __base-pull-at(if($list, $list, ()), __base-flatten($arguments, false, false, 1));
}

// @debug __pull-at((5 10 15 20), 2, 4);

@function __remove($list, $predicate: __identity, $this-arg: null) {
    $index: 1;
    $length: if($list, length($list), 0);
    $result: ();

    $predicate: __get-callback($predicate, $this-arg, 3);

    @while ($index <= $length) {
        $value: nth($list, $index);

        @if (call($predicate, $value, $index, $list)) {
            $result: append($result, $value);
            $list: __splice($list, $index, 1);

            $index: $index - 1;
            $length: $length - 1;
        }

        $index: $index + 1;
    }

    @return $result;

    // todo: handle mutation
}

// @debug __remove((1 2 3 4 5 6), is-even);

@function __rest($list) {
    @return __drop($list, 1);
}

// @debug __rest((1 2 3));

@function __slice($list, $start: 1, $end: length($list)) {
    $length: if($list, length($list), 0);

    @if (__is-falsey($length)) {
        @return ();
    }

    @if ($end and type-of($end) == 'number' and __is-iteratee-call($list, $start, $end)) {
        $start: 1;
        $end: $length;
    }

    @return __base-slice($list, $start, $end);
}

// @debug __slice((1 2 3), -1);

@function __sorted-index($list, $value, $iteratee: __identity, $this-arg: null) {
    $function: __get-callback($iteratee);

    @return if($function == __base-callback and $iteratee == null,
        __binary-index($list, $value),
        __binary-index($list, $value, call($function, $iteratee, $this-arg, 1)));

    // todo fix binary-index
}

// @debug __sorted-index((4 4 5 5 6 6), 5); // 3

@function __sorted-last-index($list, $value, $iteratee: __identity, $this-arg: null) {
    $function: __get-callback($iteratee);

    @return if($function == __base-callback and $iteratee == null,
        __binary-index($list, $value),
        __binary-index($list, $value, call($function, $iteratee, $this-arg, 1), true));
}

@function __take($list, $n: 1, $guard: null) {
    $length: if($list, length($list), 0);

    @if (__is-falsey($length)) {
        @return ();
    }

    @if (if($guard, __is-iteratee-call($list, $n, $guard), $n == null)) {
        $n: 1;
    }

    @return __base-slice($list, 0, if($n < 0, 0, $n));

}

// @debug __take((1 2 3), 5);

@function __take-right($list, $n: 1, $guard: null) {
    $length: if($list, length($list), 0);

    @if (__is-falsey($length)) {
        @return ();
    }

    @if (if($guard, __is-iteratee-call($list, $n, $guard), $n == null)) {
        $n: 1;
    }

    $n: $length - if(type-of($n) == 'number', $n, if(__is-truthy($n), 1, 0));

    @return __base-slice($list, if($n < 0, 0, $n));
}

// @debug __take-right((10 20 30 40 50), 3);

@function __take-right-while($list, $predicate: __identity, $this-arg: null) {
    $length: if($list, length($list), 0);

    @if (__is-falsey($length)) {
        @return ();
    }

    $predicate: __get-callback($predicate, $this-arg, 3);

    @while ($length > 0 and call($predicate, nth($list, $length), $length, $list)) {
        $length: $length - 1;
    }

    @return __base-slice($list, $length);
}


// @debug __take-right-while((1 2 3 4 5 6 8 10 12), is-even);

@function __take-while($list, $predicate: __identity, $this-arg: null) {
    $length: if($list, length($list), 0);

    @if (__is-falsey($length)) {
        @return ();
    }

    $index: 1;
    $predicate: __get-callback($predicate, $this-arg, 3);

    @while ($index <= $length and call($predicate, nth($list, $index), $index, $list)) {
        $index: $index + 1;
    }

    @return __base-slice($list, 0, $index - 1);
}

// @debug __take-while((2 4 6 8 9 10 12 14 15), is-even);

@function __union($arguments...) {
    @return __base-uniq(__base-flatten($arguments, false, true));
}

// @debug __union((1 2 3), (5 2 1 4), (2 1));

@function __uniq($list, $is-sorted: false, $iteratee: null, $this-arg: null) {
    $length: if($list, length($list), 0);

    @if (__is-falsey($length)) {
        @return ();
    }

    // Juggle arguments
    @if (type-of($is-sorted) != 'bool' and $is-sorted != null) {
        $this-arg: $iteratee;
        $iteratee: if(__is-iteratee-call($list, $is-sorted, $this-arg), null, $is-sorted);
        $is-sorted: false;
    }

    $function: __get-callback();

    @if not ($function == __base-callback and $iteratee == null) {
        $iteratee: call($function, $iteratee, $this-arg, 3);
    }

    @return if($is-sorted and __get-index-of() == __base-index-of,
        __sorted-uniq($list, $iteratee),
        __base-uniq($list, $iteratee));
}

// @debug __uniq((1 2 3 1 4 1 3));

@function __unzip($list) {
    $index: 1;
    $length: if($list, if(length($list) > 0, __list-max(__list-map($list, __get-length)), 0), 0);
    $result: ();

    @while ($index <= $length) {
        $result: append($result, __list-map($list, __base-property($index)));

        $index: $index + 1;
    }

    @return $result;
}

// @debug __unzip(((fred, 30, true), (barney, 40, false)));
// todo fix null == false

@function __without($list, $args...) {
    @return __base-difference($list, $args);
}

// @debug __without((1 2 3 4 5 0 1 4 29 0 1), 0, 1);

@function __xor($arguments...) {
    $index: 1;
    $length: length($arguments);
    $result: ();

    @while ($index <= $length) {
        $list: nth($arguments, $index);

        @if (__is-list($list) or __is-arguments($list)) {
            $result: if($result,
                join(__base-difference($result, $list), __base-difference($list, $result)),
                $list);
        }

        $index: $index + 1;
    }

    @return if(__is-truthy($result), __base-uniq($result), ());
}

// @debug __xor((1 2 3), (5 2 1 4));
// @debug __xor((1 2 5), (2 3 5), (3 4 5));

@function __zip($arguments...) {
    $length: length($arguments);
    $list: ();

    @while ($length > 0) {
        $list: set($list, $length, nth($arguments, $length));

        $length: $length - 1;
    }

    @return __unzip(__to-list($list));
}

// @debug __zip((fred barney), (30 40), (true false));
// todo: see about reversed order

@function __zip-object($props, $values: ()) {
    $index: 1;
    $length: if($props, length($props), 0);
    $result: ();

    @if ($length > 0 and not $values and not __is-list(nth($props, 1))) {
        $values: ();
    }

    @while ($index <= $length) {
        $key: nth($props, $index);

        @if ($values) {
            $result: set($result, $key, nth($values, $index));
        } @else if ($key) {
            $result: set($result, nth($key, 1), nth($key, 2));
        }

        $index: $index + 1;
    }

    @return $result;
}

// @debug __zip-object((fred barney), (30 40));

@function __chain($value) {
    $result: __sassdash($value);

    $result: set($result, '__chain__', true);

    @return $result;
}

// @debug __chain(45);


@function __tap($value, $interceptor, $this-arg: null) {
    $value: __call($interceptor, $this-arg, $value);

    @return $value;

    // TODO mutation
}

// @debug __tap(42, double);

@function __thru($value, $interceptor, $this-arg: null) {
    @return __call($interceptor, $this-arg, $value);
}

@function __wrapper-chain() {
    @return __chain(this());
}

@function __wrapper-reverse-function($value) {
    @return __list-reverse($value);
}
@function __wrapper-reverse() {
    $value: this('__wrapped__');

    @if (instanceof($value, LazyWrapper)) {
        @return new(SassdashWrapper, __list-reverse($value));
    }

    @return __thru($value, __wrapper-reverse-function, this());
}

// $_: scope-start();
// $_: scope('__wrapped__', (1 2 3 4 5));

// @debug __wrapper-reverse();

@function __wrapper-to-string() {
    @return __call(value, this()) + '';
}

// $_: scope-start();
// $_: scope(value, foo-value);
// $_: scope(foo, 42);
// @function foo-value() {
//     @return this(foo);
// }

// @debug type-of(__wrapper-to-string());

@function __at($arguments...) {
    $collection: nth($arguments, 1);
    $length: if($collection, length($collection), 0);

    @if (__is-length($length)) {
        $collection: __to-iterable($collection);
    }

    @return __base-at($collection, __base-flatten($arguments, false, false, 2));
}

// @debug __at((a b c d e f g), 1, 3, 5);

@function __includes($collection, $target, $from-index: 1) {
    $length: if($collection, length($collection), 0);

    @if not(__is-length($length)) {
        $collection: __values($collection);
        $length: length($collection);
    }

    @if (__is-falsey($length)) {
        @return false;
    }

    @if (type-of($from-index) == 'number') {
        $from-index: if($from-index < 0, __native-max($length + $from-index, 0), $from-index);
    } @else {
        $from-index: 0;
    }

    @return if(type-of($collection) == 'string' or not __is-list($collection) and __is-string($collection),
        ($from-index < $length and __index-of($collection, $target, $from-index) > 1),
        (__get-index-of($collection, $target, $from-index) > -1));
}

// @debug __includes((a b c d e f g), d, 4);

@function __count-by-iteratee($result, $value, $key, $args...) {
    $result: if(map-has-key($result, $key), set($result, $key, get($result, $key) + 1), set($result, $key, 1));

    @return $result;
}
@function __count-by($arguments...) {
    $function: __create-aggregator(__count-by-iteratee);

    @return __call($function, null, $arguments...);
}
// todo

// @debug __count-by((1 2 3 4 5 6 7 9 11 13 15 17), is-even);

@function __every($collection, $predicate: __identity, $this-arg: $__undefined__) {
    $function: if(__is-list($collection), __list-every, __base-every);

    @if (not function-exists($predicate) or not __is-undefined($this-arg)) {
        $predicate: __get-callback($predicate, $this-arg, 3);
    }

    @return call($function, $collection, $predicate);
}

// @debug __every((true 1 null 'yes'));
// @debug __every((2 4 6 8 10), is-even);

@function __filter($collection, $predicate: __identity, $this-arg: null) {
    @debug 'here';
    $function: if(__is-list($collection), __list-filter, __base-filter);

    $predicate: __get-callback($predicate, $this-arg, 3);

    @debug $predicate;

    @return __call($function, $this-arg, $collection, $predicate);
}

// @debug __filter((1 2 3 4 5 6 6 1239), is-even);


@function __callback($function: __identity, $this-arg: null, $guard: null) {
    @if ($guard and __is-iteratee-call($function, $this-arg, $guard)) {
        $this-arg: null;
    }

    @return __base-callback($function, $this-arg);
}

// $_: scope-start();
// $_: scope(poop, 12341234);

// $poop: __callback('poop', this());

// $_: scope-end();
// @debug $poop;
// @debug __call($poop, null, (poop: 78788));


// @debug __filter(((a: 123, bam: true), (a: 234, bam: false), (a: 345, bam: true)), 'bam');

@function __find($collection, $predicate: __identity, $this-arg: null) {
    @if (__is-list($collection)) {
        $index: __find-index($collection, $predicate, $this-arg);

        @return if($index > -1, nth($collection, $index), $__undefined__);
    }

    $predicate: __get-callback($predicate, $this-arg, 3);

    @return __base-find($collection, $predicate, __base-each);
}

// @debug __find((123, 233, 137, 138, 592, 3939), is-even);
// @debug __find(((a: 123, bam: false), (a: 234, bam: false), (a: 345, bam: true)), 'bam');

@function __find-last($collection, $predicate: __identity, $this-arg: null) {
    $predicate: __get-callback($predicate, $this-arg, 3);

    @return __base-find($collection, $predicate, __base-each-right);
}

// @debug __find-last((123, 233, 137, 138, 592, 3939), is-even);
// @debug __find-last(((a: 123, bam: true), (a: 234, bam: true), (a: 345, bam: false)), 'bam');

@function __find-where($collection, $source) {
    @return __find($collection, __matches($source));
}

@function __matches($source) {
    @return __base-matches($source, true);
}

@debug __find-where(((a: 123, bam: true), (a: 234, bam: true), (a: 345, bam: false)), (bam: true));





