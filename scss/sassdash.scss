

@import 'utilities/_static';
@import 'utilities/_helpers';
@import 'utilities/_parse_float';

@mixin initialize() {
    $void: const-set('html-escapes', (
            '&': '&amp;',
            '<': '&lt;',
            '>': '&gt;',
            '"': '&quot;',
            "'": '&#39;',
            '`': '&#96;'
        ));
    $void: const-set('html-unescapes', (
            '&amp;': '&',
            '&lt;': '<',
            '&gt;': '>',
            '&quot;': '"',
            '&#39;': "'",
            '&#96;': '`'
        ));
    $void: const-set('string-escapes', (
            '\\': '\\',
            "'": "'",
            '\n': 'n',
            '\r': 'r',
            '\u2028': 'u2028',
            '\u2029': 'u2029'
        ));
    $void: const-set('POSITIVE_INFINITY', 999999);
    $void: const-set('NEGATIVE_INFINITY', -999999);
    $void: const-set('MAX_SAFE_INTEGER', (pow(2, 53) - 1));
}

@include initialize();



@function __base-compare-ascending($value, $other) {
    @if $value > $other {
        @return 1;
    }

    @if $value < $other {
        @return -1;
    }

    @return 0;
}

@function __base-index-of($list, $value, $from-index: 1) {
    $length: length($list);
    $index: $from-index;

    @while $index <= $length {
        @if (nth($list, $index) == $value) {
            @return $index;
        }

        $index: $index + 1;
    }

    @return -1;
}

@function __base-sort-by() { /* TODO */ }

@function __char-at-callback($string) {
    // ... 
}

@function __chars-index($string, $chars, $direction) {
    $index: 1;
    $length: str-length($string);
    $direction-map: ('right': -1, 'left': 1);
    $increment: map-get($direction-map, $direction);

    @while str-index($chars, __char-at($string, $index))
        and $index <= $length {
        $index: $index + $increment;
    }

    @return $index;
}

@function __chars-left-index($string, $chars) {
    @return __chars-index($string, $chars, $direction: left);
}

@function __chars-right-index($string, $chars) {
    @return __chars-index($string, $chars, $direction: right);
}

@function __compare-ascending($map, $other) {
    // TODO
}

@function __compare-multiple-ascending($map, $other) {
    // TODO
}

@function __escape-html-char($char) {
    @return const-get('html-escapes' $char);
}

@function __escape-string-char($char) {
    @return '\\#{const-get('string-escapes' $char)}';
}

@function __index-of-nan($list, $from-index, $from-right) {
    // TODO
}

@function __is-index($value, $length: null) {
    $value: __parse-float($value);
    
    @return $value > 0
        and $value % 1 == 0
        and ($length == null or $value <= $length);
}

@function __is-map-like($value) {
    @return $value and (type-of($value) == map);
}

@function __is-space($char-code) {
    // TODO - find the rest of the space characters
    @return $char-code == ' ';
}

@function __replace-holders($list, $placeholder) {
    // TODO
}

@function __sorted-uniq($list, $iteratee: null) {
    $seen: null;
    $index: 1;
    $length: length($list);
    $res-index: 1;
    $result: ();

    @while ($index <= $length) {
        $value: nth($list, $index);
        $computed: if($iteratee, call($iteratee, $value, $index, $list), $value);

        @if not ($seen == $computed) {
            $seen: $computed;
            $result: append($result, $value);
        }

        $res-index: $res-index + 1;
        $index: $index + 1;
    }

    @return $result;
}

@function __trimmed-left-index($string) {
    $index: 1;
    $length: str-length($string);

    @while ($index <= $length) and (__is-space(__char-at($string, $index))) {
        $index: $index + 1;
    }

    @return $index;
}

@function __trimmed-right-index($string) {
    $index: str-length($string);

    @while ($index > 0) and (__is-space(__char-at($string, $index))) {
        $index: $index - 1;
    }

    @return $index;
}

@function __unescape-html-char($char) {
    @return const-get('html-unescapes' $char);
}

// SASSDASH
// ========

@function __sassdash($value) {
    @if (__is-map-like($value) && not type-of($value) == list) {
        @if (instanceof($value, 'SassdashWrapper')) {
            @return $value;
        }
    }

    @return new('SassdashWrapper', (
        value: $value
    ));
}

@function SassdashWrapper($value, $chain-all: false, $actions: ()) {
    @return (
        __actions__: $actions,
        __chain__: if($chain-all, true, false),
        __wrapped__: $value
    );
}

@function LazyWrapper($value) {
    @return (
        actions: null,
        dir: 1,
        drop-count: 0,
        filtered: false,
        iteratees: null,
        take-count: const-get('POSITIVE_INFINITY'),
        views: null,
        wrapped: $value
    );
}

@function __lazy-clone() {
    // todo
}

@function __lazy-reverse() {
    // todo
}

@function __lazy-value() {
    // todo
}

@function MapCache() {
    @return (
        __data__: ()
    );
}

@function __map-delete($this, $key) {
    $data: get($this, __data__);

    @return set($this, map-delete($data, $key));
}

@function __map-get($this, $key) {
    @return get($this, __data__ $key);
}

@function __map-has($this, $key) {
    $data: get($this, __data__);

    @return map-has-key($data, $key);
}

@function __map-set($this, $key, $value) {
    @return set($this, __data__ $key, $value);
}

@function SetCache($values: ()) {
    @return (
        data: (
            number: (),
            set: new(Set)
        ),
        values: $values
    );
}

@function __cache-index-of($this, $value) {
    $type: type-of($value);
    $data: get($this, data);
    $result: if($type == number, get($data, $type $value), method(get($data, set), has, $value));

    @return if($result, 0, -1);
}

@function __cache-push($this, $value) {
    $data: get($this, data);
    $type: type-of($value);

    @if ($type == number) {
        $data: set($data, $type $value, true);
    } @else {
        // data.set.add(value);
        $data: set($data, set, method(get($data, set), add, $value));
    }
}

@function __args-to-map($args) {
    // todo
}

@function __list-copy($list, $other: ()) {
    $index: 1;
    $length: length($list);
    $other-length: length($other);
    $result: ();

    @while ($index <= $length) {
        $result: append($result, nth($list, $index));

        $index: $index + 1;
    }

    @while ($other-length >= $index) {
        $result: append($result, nth($other, $index));

        $index: $index + 1;
    }

    @return $result;
}

@function __list-each($list, $iteratee) {
    $index: 1;
    $length: length($list);
    $break: false;
    $result-list: ();

    @while ($index <= $length) and not $break {
        $item: call($iteratee, nth($list, $index), $index, $list);

        @if (call($iteratee, nth($list, $index), $index, $list) == false) {
            $break: true;
        } @else {
            $result-list: append($result-list, $item);
        }

        $index: $index + 1;
    }

    @return $result-list;
}

@function __list-each-right($list, $iteratee) {
    $list: __list-reverse($list);
    $result-list: __list-each($list, $iteratee);
    $result-list: __list-reverse($result-list);

    @return $result-list;
}

@function __list-every($list, $predicate) {
    $index: 1;
    $length: length($list);

    @while ($index <= $length) {
        @if (not call($predicate, nth($list, $index), $index, $list)) {
            @return false;
        }

        $index: $index + 1;
    }

    @return true;
}

@function __list-filter($list, $predicate) {
    $index: 1;
    $length: length($list);
    $result-list: ();

    @while ($index <= $length) {
        $value: nth($list, $index);

        @if (call($predicate, $value, $index, $list)) {
            $result-list: append($result-list, $value);
        }

        $index: $index + 1;
    }

    @return $result-list;
}

// TODO remove - for testing only
@function is-even($val, $idx, $list) {
    @return $val % 2 == 0;
}

@function __list-map($list, $iteratee) {
    $index: 1;
    $length: length($list);
    $result-list: ();

    @while ($index <= $length) {
        $value: nth($list, $index);

        $result-list: append($result-list, call($iteratee, $value, $index, $list));

        $index: $index + 1;
    }

    @return $result-list;
}

@function __list-max($list) {
    $index: 1;
    $length: length($list);
    $result: const-get(NEGATIVE_INFINITY);

    // TODO use Hugo's comparison for strings
    @while ($index <= $length) {
        $value: nth($list, $index);
        @if ($value > $result) {
            $result: $value;
        }

        $index: $index + 1;
    }

    @return $result;
}

@function __list-min($list) {
    $index: 1;
    $length: length($list);
    $result: const-get(POSITIVE_INFINITY);

    // TODO use Hugo's comparison for strings
    @while ($index <= $length) {
        $value: nth($list, $index);
        @if ($value < $result) {
            $result: $value;
        }

        $index: $index + 1;
    }

    @return $result;
}

@function __list-reduce($list, $iteratee, $accumulator: null, $init-from-list: true) {
    $index: 1;
    $length: length($list);

    @if ($init-from-list and ($length > 0)) {
        $accumulator: nth($list, $index);
        $index: $index + 1;
    }

    @while ($index <= $length) {
        $value: nth($list, $index);
        $accumulator: call($iteratee, $accumulator, $value, $index, $list);

        $index: $index + 1;
    }

    @return $accumulator;
}

@function __list-reduce-right($list, $iteratee, $accumulator: null, $init-from-list: true) {
    $list: __list-reverse($list);

    @return __list-reduce($list, $iteratee, $accumulator, $init-from-list);
}

@function __list-some($list, $predicate) {
    $index: 1;
    $length: length($list);

    @while ($index <= $length) {
        $value: nth($list, $index);

        @if (call($predicate, $value, $index, $list)) {
            @return true;
        }

        $index: $index + 1;
    }

    @return false;
}

@function __assign-defaults($map-value, $source-value) {
    @return if($map-value == null, $source-value, $map-value);
}

@function __assign-own-defaults() {
    // todo
}

@function __base-assign($map, $source, $customizer: false) {
    $index: 1;
    $props: map-keys($source);
    $length: length($props);

    @while ($index <= $length) {
        $key: nth($props, $index);

        @if ($customizer) {
            $value: get($map, $key);
            $result: call($customizer, $value, get($source, $key), $key, $map, $source);

            @if ($result == if($result, not $result == $value, $value))
                or ($value == null and not map-has-key($map, $key))
            {
                $map: set($map, $key, $result);
            }
        } @else {
            $map: set($map, $key, get($source, $key));
        }

        $index: $index + 1;
    }

    @return $map;
}

@function __base-at($collection, $props) {
    $index: 1;
    $length: length($collection);
    $is-list: type-of($collection) == list;
    $props-length: length($props);
    $result: ();

    @while ($index <= $props-length) {
        $key: nth($props, $index);

        @if ($is-list) {
            $key: __parse-float($key);
            $result: append($result, if(__is-index($key, $length), nth($collection, $key), null));
        } @else {
            $result: append($result, get($collection, $key));
        }

        $index: $index + 1;
    }

    @return $result;
}

@function __base-bind-all() {
    // todo
}

@function __base-callback() {
    // todo
}

@function __base-clone() {
    // todo
}

@function __base-create() {
    // todo
}

@function __base-delay() {
    // not being implemented
}

@function __base-difference($list, $values) {
    $length: if(type-of($list) == list, length($list), 0);
    $result: ();

    @if ($length == 0) {
        @return $result;
    }

    $index: 1;
    $index-of: __base-index-of; // getIndexOf()
    $is-common: ($index-of == __base-index-of);
    $cache: if($is-common and length($values) >= 200, __create-cache($values), false);
    $values-length: length($values);

    @if ($cache) {
        $index-of: __cache-index-of;
        $is-common: false;
        $values: $cache;
    }

    @while ($index <= $length) {
        $continue-outer: false;
        $value: nth($list, $index);

        @if ($is-common) {
            $values-index: $values-length;

            @while ($values-index > 0 and not $continue-outer) {
                @if (nth($values, $values-index) == $value) {
                    $continue-outer: true;
                } @else {
                    $values-index: $values-index - 1;
                }
            }

            @if (not $continue-outer) {
                $result: append($result, $value);
            }
        } @else if (call($index-of, $values, $value) < 0) {
            $result: append($result, $value);
        }

        $index: $index + 1;
    }

    @return $result;
}

@function __base-each($collection, $iteratee) {
    $length: if($collection, length($collection), 0);

    @if (not type-of($collection) == list) {
        @return __base-for-own($collection, $iteratee);
    }

    $index: 1;
    $iterable: __to-map($collection);

    $break: false;

    @while ($index <= $length and not $break) {
        $iteration: call($iteratee, get($iterable, $index), $index, $iterable);

        @if ($iteration == false) {
            $break: true;
        } @else {
            $iterable: set($iterable, $index, $iteration);
        }

        $index: $index + 1;
    }

    $collection: $iterable;

    @return $collection;
}

@function __base-each-right($collection, $iteratee) {
    $collection: __list-reverse($collection);

    $reversed-result: _base-each($collection, $iteratee);

    @return __list-reverse($collection);
}

@function __base-every-iteratee($value, $index, $collection) {
    $predicate: scope-get(predicate);

    $result: if(call($predicate, $value, $index, $collection), true, false);

    $void: scope-set(result, $result);

    @return null;
}
@function __base-every($collection, $predicate) {
    $void: scope-set(result, true);
    $void: scope-set(predicate, $predicate);

    $void: __base-each($collection, __base-every-iteratee);

    $result: scope-get(result);
    $void: scope-end;

    @return if($result, true, false);
}

@function __base-filter-iteratee($value, $index, $collection) {
    $result: scope-get(result);
    $predicate: scope-get(predicate);

    @if (call($predicate, $value, $index, $collection)) {
        $void: scope-set(result, append($result, $value));
    }

    @return null;
}
@function __base-filter($collection, $predicate) {
    $void: scope-set(result, ());
    $void: scope-set(predicate, $predicate);

    $void: __base-each($collection, __base-filter-iteratee);

    $result: scope-get(result);
    $void: scope-end;

    @return $result;
}

@function __base-find-iteratee($value, $key, $collection) {
    $predicate: scope-get(predicate);
    $return-key: scope-get(return-key);

    @if call($predicate, $value, $key, $collection) {
        $void: scope-set(result, if($return-key, $key, $value));

        @return false;
    }

    @return null;
}
@function __base-find($collection, $predicate, $each-function: __base-each, $return-key: false) {
    $void: scope-set(result, null);
    $void: scope-set(predicate, $predicate);
    $void: scope-set(return-key, $return-key);

    $void: call($each-function, $collection, __base-find-iteratee);

    $result: scope-get(result);
    $void: scope-end;

    @return $result;
}





