
@function __before-callback($arguments...) {
    $n: __this('n');
    $function: __this('function');
    $result: null;

    $n: $n - 1;
    $_: __this(n, $n);

    @if ($n > 0) {
        $result: __call($function, __this(), $arguments...);
    } @else {
        $_: __this('function', null);
    }

    @return $result;
}
@function __before($n, $function) {
    @if not (__function-exists($function)) {
        @if (__function-exists($n)) {
            $temp: $n;
            $n: $function;
            $function: $temp;
        } @else {
            @error 'FUNC_ERROR_TEXT';
        }
    }

    $_: __scope(('function': $function, 'n': $n));

    $after-callback: __bind(__before-callback);

    $_: __scope(false);  

    @return $after-callback;
}

/// 
/// Creates a function that invokes `func`, with the `this` binding and arguments
/// of the created function, while it is called less than `n` times. Subsequent
/// calls to the created function return the result of the last `func` invocation.
/// @static
/// @memberOf _
/// @category Function
/// @param {number} n The number of calls at which `func` is no longer invoked.
/// @param {Function} func The function to restrict.
/// @returns {Function} Returns the new restricted function.
/// @example
/// jQuery('#add').on('click', _before(5, addContactToList));
/// // => allows adding up to 4 contacts to the list
/// 
@function _before($args...) { @return call(__before, $args...); }
