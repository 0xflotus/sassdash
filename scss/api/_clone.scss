

@function __base-clone($value, $is-deep: false, $customizer: null, $key: null, $map: null) {
    // todo

    // Sass does not copy by reference, so returning same value is safe
    @return $value;
}

@function __clone($value, $is-deep: null, $customizer: null, $this-arg: null) {
    @if (type-of($is-deep) != 'bool' and $is-deep != null) {
        $this-arg: $customizer;
        $customizer: if(__is-iteratee-call($value, $is-deep, $this-arg), null, $is-deep);
        $is-deep: false;
    }

    $customizer: if(__function-exists($customizer), __bind-callback($customizer, $this-arg, 1), false);

    @return __base-clone($value, $is-deep, $customizer);
}

@function __clone-deep($value, $customizer: null, $this-arg: null) {
    $customizer: if(__function-exists($customizer), __bind-callback($customizer, $this-arg, 1), false);

    @return __base-clone($value, true, $customizer);
}

/// 
/// Creates a clone of `value`. If `isDeep` is `true` nested objects are cloned,
/// otherwise they are assigned by reference. If `customizer` is provided it is
/// invoked to produce the cloned values. If `customizer` returns `undefined`
/// cloning is handled by the method instead. The `customizer` is bound to
/// `thisArg` and invoked with two argument; (value (, index|key, object)).
/// **Note:** This method is loosely based on the structured clone algorithm.
/// The enumerable properties of `arguments` objects and objects created by
/// constructors other than `Object` are cloned to plain `Object` objects. An
/// empty object is returned for uncloneable values such as functions, DOM nodes,
/// Maps, Sets, and WeakMaps. See the [HTML5 specification](http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm)
/// for more details.
///
/// 
/// @group Lang
/// @param {*} value The value to clone.
/// @param {boolean} (isDeep) Specify a deep clone.
/// @param {Function} (customizer) The function to customize cloning values.
/// @param {*} (thisArg) The `this` binding of `customizer`.
/// @returns {*} Returns the cloned value.
/// @example
/// var users = [
///   { 'user': 'barney' },
///   { 'user': 'fred' }
/// ];
/// var shallow = _clone(users);
/// shallow(0) === users(0);
/// // => true
/// var deep = _clone(users, true);
/// deep(0) === users(0);
/// // => false
/// // using a customizer callback
/// var el = _clone(document.body, function(value) {
///   if (_is-element(value)) {
///     return value.cloneNode(false);
///   }
/// });
/// el === document.body
/// // => false
/// el.nodeName
/// // => BODY
/// el.childNodes.length;
/// // => 0
/// 
@function _clone($args...) { @return call(__clone, $args...); }

/// 
/// Creates a deep clone of `value`. If `customizer` is provided it is invoked
/// to produce the cloned values. If `customizer` returns `undefined` cloning
/// is handled by the method instead. The `customizer` is bound to `thisArg`
/// and invoked with two argument; (value (, index|key, object)).
/// **Note:** This method is loosely based on the structured clone algorithm.
/// The enumerable properties of `arguments` objects and objects created by
/// constructors other than `Object` are cloned to plain `Object` objects. An
/// empty object is returned for uncloneable values such as functions, DOM nodes,
/// Maps, Sets, and WeakMaps. See the [HTML5 specification](http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm)
/// for more details.
///
/// 
/// @group Lang
/// @param {*} value The value to deep clone.
/// @param {Function} (customizer) The function to customize cloning values.
/// @param {*} (thisArg) The `this` binding of `customizer`.
/// @returns {*} Returns the deep cloned value.
/// @example
/// var users = [
///   { 'user': 'barney' },
///   { 'user': 'fred' }
/// ];
/// var deep = _clone-deep(users);
/// deep(0) === users(0);
/// // => false
/// // using a customizer callback
/// var el = _clone-deep(document.body, function(value) {
///   if (_is-element(value)) {
///     return value.cloneNode(true);
///   }
/// });
/// el === document.body
/// // => false
/// el.nodeName
/// // => BODY
/// el.childNodes.length;
/// // => 20
/// 
@function _clone-deep($args...) { @return call(__clone-deep, $args...); }