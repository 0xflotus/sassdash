


@function __base-filter-iteratee($value, $index, $collection) {
    $result: __this('result');
    $predicate: __this('predicate');

    $iteration: __exec($predicate, $value, $index, $collection);

    @if __is-truthy($iteration) {
        $_: __this('result', append($result, $value));
    }

    @return null;
}
@function __base-filter($collection, $predicate) {
    $_: __scope(('result': (), 'predicate': $predicate));
    $_: __base-each($collection, __base-filter-iteratee);
    $result: __this('result');
    $_: __scope(false);

    @return $result;
}

@function __list-filter($list, $predicate) {
    $index: 1;
    $length: length($list);
    $result: ();

    @while ($index <= $length) {
        $value: nth($list, $index);

        $iteration: __exec($predicate, $value, $index, $list);

        @if (__is-truthy($iteration)) {
            $result: append($result, $value);
        }

        $index: $index + 1;
    }

    @return $result;
}

@function __filter($collection, $predicate: __identity, $this-arg: null) {
    $function: if(__is-list($collection), __list-filter, __base-filter);

    $predicate: __get-callback($predicate, $this-arg, 3);

    @return __call($function, $this-arg, $collection, $predicate);
}
/// 
/// Iterates over elements of `collection`, returning an array of all elements
/// `predicate` returns truthy for. The predicate is bound to `thisArg` and
/// invoked with three arguments; (value, index|key, collection).
/// If a property name is provided for `predicate` the created `_.property`
/// style callback returns the property value of the given element.
/// If a value is also provided for `thisArg` the created `_.matchesProperty`
/// style callback returns `true` for elements that have a matching property
/// value, else `false`.
/// If an object is provided for `predicate` the created `_.matches` style
/// callback returns `true` for elements that have the properties of the given
/// object, else `false`.
/// @static
/// @memberOf _
/// @alias select
/// @category Collection
/// @param {Array|Object|string} collection The collection to iterate over.
/// @param {Function|Object|string} [predicate=_.identity] The function invoked
///  per iteration.
/// @param {*} [thisArg] The `this` binding of `predicate`.
/// @returns {Array} Returns the new filtered array.
/// @example
/// _.filter([4, 5, 6], function(n) {
///   return n % 2 == 0;
/// });
/// // => [4, 6]
/// var users = [
///   { 'user': 'barney', 'age': 36, 'active': true },
///   { 'user': 'fred',   'age': 40, 'active': false }
/// ];
/// // using the `_.matches` callback shorthand
/// _.pluck(_.filter(users, { 'age': 36, 'active': true }), 'user');
/// // => ['barney']
/// // using the `_.matchesProperty` callback shorthand
/// _.pluck(_.filter(users, 'active', false), 'user');
/// // => ['fred']
/// // using the `_.property` callback shorthand
/// _.pluck(_.filter(users, 'active'), 'user');
/// // => ['barney']
/// 
@function _filter($args...) { @return call(__filter, $args...); }

@function _select($args...) { @return call(__filter, $args...); }

