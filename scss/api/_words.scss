

@function __words($string, $args...) {
    $string: __base-to-string($string);

    $result: ();

    $temp: '';

    $lowercase-letters: 'abcdefghijklmnopqrstuvwxyz';
    $uppercase-letters: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890 ';

    @for $index from 1 through str-length($string) {
        $letter: __char-at($string, $index);
        $letter-prev: __char-at($string, $index - 1);
        $letter-next: __char-at($string, $index + 1);

        @if not (str-index($lowercase-letters, $letter))
            and not (
                str-index($uppercase-letters, $letter-prev)
                and str-index($uppercase-letters, $letter-next)
            ) {
            @if (str-length($temp) > 0) {
                $result: append($result, $temp);
                $temp: '';
            }

            @if (str-index($uppercase-letters, $letter) and $letter != ' ') {
                $temp: $temp + $letter;
            }
        } @else {
            $temp: $temp + $letter;
        }
    }

    @if (str-length($temp) > 0) {
        $result: append($result, $temp);
    }

    @return $result;
}

/// 
/// Splits `string` into an array of its words.
/// ///
/// 
/// @group String
/// @param {string} $string [''] - The string to inspect.
/// @param {RegExp|string} (pattern) The pattern to match words.
/// @param {Object} (guard) Enables use as a callback for functions like `_map`.
/// @returns {Array} Returns the words of `string`.
/// @example scss
/// /// _words('fred, barney, & pebbles');
/// // => ('fred', 'barney', 'pebbles')
/// /// _words('fred, barney, & pebbles', /(^, )+/g);
/// // => ('fred', 'barney', '&', 'pebbles')
/// 
@function _words($args...) { @return call(__words, $args...); }
