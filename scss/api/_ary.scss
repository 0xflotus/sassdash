
@function __ary-function($args...) {
    $function: __this('function');
    $n: __this('n');

    $args: __take($args, $n);

    @return __exec($function, $args...);
}
@function __ary($function, $n: 1, $guard: null) {
    @if not __is-function($function) {
        @return __noop;
    }

    $n: if($n >= 0, $n, 0);

    $_: __scope(('function': $function, 'n': $n));

    $ary-function: __bind(__ary-function);

    $_: __scope(false);

    @return $ary-function;
}

///
/// Creates a function that accepts up to `$n` arguments ignoring any
/// additional arguments.
///
///
/// 
/// @group Function
/// @param {Function} func The function to cap arguments for.
/// @param {number} (n=func.length) The arity cap.
/// @param- {Object} (guard) Enables use as a callback for functions like `_map`.
/// @returns {Function} Returns the new function.
/// @example
///
/// _map(('6', '8', '10'), _ary(parseInt, 1));
/// // => (6, 8, 10)
///
@function _ary($args...) { @return call(__ary, $args...); }
