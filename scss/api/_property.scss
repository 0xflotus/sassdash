

@function __base-property-function($map: null, $args...) {
    $key: __this('key');
    $map: __to-map($map);

    @return if($map == null, null, get($map, $key));
}
@function __base-property($key) {
    $_: __scope(('key': $key));

    $base-property-function: __bind(__base-property-function);

    $_: __scope(false);

    @return $base-property-function;
}

@function __property($key) {
    @return __base-property($key);
}

@function __property-of-function($key, $args...) {
    $map: __this('map');

    @return if($map == null, null, get($map, $key));
}
@function __property-of($map) {
    $_: __scope(('map', $map));
    $property-of-function: __bind(__property-of-function);
    $_: __scope(false);

    @return $property-of-function;
}

/// 
/// Creates a function which returns the property value of `key` on a given object.
/// @static
/// @memberOf _
/// @category Utility
/// @param {string} key The key of the property to get.
/// @returns {Function} Returns the new function.
/// @example
/// var users = [
///   { 'user': 'fred' },
///   { 'user': 'barney' }
/// ];
/// var getName = _.property('user');
/// _.map(users, getName);
/// // => ['fred', barney']
/// _.pluck(_.sortBy(users, getName), 'user');
/// // => ['barney', 'fred']
/// 
@function _property($args...) { @return call(__property, $args...); }

/// 
/// The inverse of `_.property`; this method creates a function which returns
/// the property value of a given key on `object`.
/// @static
/// @memberOf _
/// @category Utility
/// @param {Object} object The object to inspect.
/// @returns {Function} Returns the new function.
/// @example
/// var object = { 'a': 3, 'b': 1, 'c': 2 };
/// _.map(['a', 'c'], _.propertyOf(object));
/// // => [3, 2]
/// _.sortBy(['a', 'b', 'c'], _.propertyOf(object));
/// // => ['b', 'c', 'a']
/// 
@function _property-of($args...) { @return call(__property-of, $args...); }