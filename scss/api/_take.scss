

@function __take($list, $n: 1, $guard: null) {
    $length: if($list, length($list), 0);

    @if __is-falsey($length) {
        @return ();
    }

    @if if($guard, __is-iteratee-call($list, $n, $guard), $n == null) {
        $n: 1;
    }

    $n: if(__is-number($n), $n, if(__is-truthy($n), 1, 0));

    @return __base-slice($list, 0, if($n < 0, 0, $n));
}

@function __take-right($list, $n: 1, $guard: null) {
    $length: if($list, length($list), 0);

    @if __is-falsey($length) {
        @return ();
    }

    @if if($guard, __is-iteratee-call($list, $n, $guard), $n == null) {
        $n: 1;
    }

    $n: $length - if(__is-number($n), $n, if(__is-truthy($n), 1, 0));

    @return __base-slice($list, if($n < 0, 0, $n));
}

@function __take-right-while($list, $predicate: __identity, $this-arg: null) {
    $length: if($list, length($list), 0);

    @if __is-falsey($length) {
        @return ();
    }

    $predicate: __get-callback($predicate, $this-arg, 3);

    
    @while $length > 0
        and __is-truthy(__exec($predicate, nth($list, $length), $length, $list))
    {
        $length: $length - 1;
    }

    @return __base-slice($list, $length);
}


@function __take-while($list, $predicate: __identity, $this-arg: null) {
    $length: if($list, length($list), 0);

    @if __is-falsey($length) {
        @return ();
    }

    $index: 1;
    $predicate: __get-callback($predicate, $this-arg, 3);

    @while $index <= $length
        and __is-truthy(__exec($predicate, nth($list, $index), $index, $list))
    {
        $index: $index + 1;
    }

    @return __base-slice($list, 0, $index - 1);
}


/**
 * Creates a slice of `array` with `n` elements taken from the beginning.
 *
 * @static
 * @memberOf _
 * @category Array
 * @param {Array} array The array to query.
 * @param {number} [n=1] The number of elements to take.
 * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
 * @returns {Array} Returns the slice of `array`.
 * @example
 *
 * _.take([1, 2, 3]);
 * // => [1]
 *
 * _.take([1, 2, 3], 2);
 * // => [1, 2]
 *
 * _.take([1, 2, 3], 5);
 * // => [1, 2, 3]
 *
 * _.take([1, 2, 3], 0);
 * // => []
 */
@function _take($args...) { @return call(__take, $args...); }

/**
 * Creates a slice of `array` with `n` elements taken from the end.
 *
 * @static
 * @memberOf _
 * @category Array
 * @param {Array} array The array to query.
 * @param {number} [n=1] The number of elements to take.
 * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
 * @returns {Array} Returns the slice of `array`.
 * @example
 *
 * _.takeRight([1, 2, 3]);
 * // => [3]
 *
 * _.takeRight([1, 2, 3], 2);
 * // => [2, 3]
 *
 * _.takeRight([1, 2, 3], 5);
 * // => [1, 2, 3]
 *
 * _.takeRight([1, 2, 3], 0);
 * // => []
 */
@function _take-right($args...) { @return call(__take-right, $args...); }

/**
 * Creates a slice of `array` with elements taken from the end. Elements are
 * taken until `predicate` returns falsey. The predicate is bound to `thisArg`
 * and invoked with three arguments; (value, index, array).
 *
 * If a property name is provided for `predicate` the created `_.property`
 * style callback returns the property value of the given element.
 *
 * If a value is also provided for `thisArg` the created `_.matchesProperty`
 * style callback returns `true` for elements that have a matching property
 * value, else `false`.
 *
 * If an object is provided for `predicate` the created `_.matches` style
 * callback returns `true` for elements that have the properties of the given
 * object, else `false`.
 *
 * @static
 * @memberOf _
 * @category Array
 * @param {Array} array The array to query.
 * @param {Function|Object|string} [predicate=_.identity] The function invoked
 *  per iteration.
 * @param {*} [thisArg] The `this` binding of `predicate`.
 * @returns {Array} Returns the slice of `array`.
 * @example
 *
 * _.takeRightWhile([1, 2, 3], function(n) {
 *   return n > 1;
 * });
 * // => [2, 3]
 *
 * var users = [
 *   { 'user': 'barney',  'active': true },
 *   { 'user': 'fred',    'active': false },
 *   { 'user': 'pebbles', 'active': false }
 * ];
 *
 * // using the `_.matches` callback shorthand
 * _.pluck(_.takeRightWhile(users, { 'user': 'pebbles', 'active': false }), 'user');
 * // => ['pebbles']
 *
 * // using the `_.matchesProperty` callback shorthand
 * _.pluck(_.takeRightWhile(users, 'active', false), 'user');
 * // => ['fred', 'pebbles']
 *
 * // using the `_.property` callback shorthand
 * _.pluck(_.takeRightWhile(users, 'active'), 'user');
 * // => []
 */
@function _take-right-while($args...) { @return call(__take-right-while, $args...); }

/**
 * Creates a slice of `array` with elements taken from the beginning. Elements
 * are taken until `predicate` returns falsey. The predicate is bound to
 * `thisArg` and invoked with three arguments; (value, index, array).
 *
 * If a property name is provided for `predicate` the created `_.property`
 * style callback returns the property value of the given element.
 *
 * If a value is also provided for `thisArg` the created `_.matchesProperty`
 * style callback returns `true` for elements that have a matching property
 * value, else `false`.
 *
 * If an object is provided for `predicate` the created `_.matches` style
 * callback returns `true` for elements that have the properties of the given
 * object, else `false`.
 *
 * @static
 * @memberOf _
 * @category Array
 * @param {Array} array The array to query.
 * @param {Function|Object|string} [predicate=_.identity] The function invoked
 *  per iteration.
 * @param {*} [thisArg] The `this` binding of `predicate`.
 * @returns {Array} Returns the slice of `array`.
 * @example
 *
 * _.takeWhile([1, 2, 3], function(n) {
 *   return n < 3;
 * });
 * // => [1, 2]
 *
 * var users = [
 *   { 'user': 'barney',  'active': false },
 *   { 'user': 'fred',    'active': false},
 *   { 'user': 'pebbles', 'active': true }
 * ];
 *
 * // using the `_.matches` callback shorthand
 * _.pluck(_.takeWhile(users, { 'user': 'barney', 'active': false }), 'user');
 * // => ['barney']
 *
 * // using the `_.matchesProperty` callback shorthand
 * _.pluck(_.takeWhile(users, 'active', false), 'user');
 * // => ['barney', 'fred']
 *
 * // using the `_.property` callback shorthand
 * _.pluck(_.takeWhile(users, 'active'), 'user');
 * // => []
 */
@function _take-while($args...) { @return call(__take-while, $args...); }
