

@function __base-find-iteratee($value, $key, $collection) {
    $predicate: __this('predicate');
    $return-key: __this('return-key');

    $iteration: __exec($predicate, $value, $key, $collection);

    @if __is-truthy($iteration) {
        $_: __this('result', if($return-key, $key, $value));

        @return false;
    }

    @return true;
}

@function __base-find($collection, $predicate, $each-function: __base-each, $return-key: false) {
    $result: null;

    $_: __scope(('result': null, 'predicate': $predicate, 'return-key': $return-key));
    $iteratee: __bind(__base-find-iteratee);

    $_: __exec($each-function, $collection, $iteratee);

    $result: __this('result');
    $_: __scope(false);

    @return $result;
}

@function __find($collection, $predicate: __identity, $this-arg: null) {
    @if __is-string($collection) {
        $collection: __to-list($collection);
    }

    @if __is-list($collection) {
        $index: __find-index($collection, $predicate, $this-arg);

        @return if($index > -1, nth($collection, $index), $__undefined__);
    }

    $predicate: __get-callback($predicate, $this-arg, 3);

    @return __base-find($collection, $predicate, __base-each);
}

@function __find-last($collection, $predicate: __identity, $this-arg: null) {
    @if __is-string($collection) {
        $collection: __to-list($collection);
    }

    @if __is-list($collection) {
        $index: __find-last-index($collection, $predicate, $this-arg);

        @return if($index > -1, nth($collection, $index), $__undefined__);
    }

    $predicate: __get-callback($predicate, $this-arg, 3);

    @return __base-find($collection, $predicate, __base-each-right);
}

@function __find-where($collection, $source) {
    @return __find($collection, __matches($source));
}

@function __find-index($list, $predicate: __identity, $this-arg: null) {
    $index: 1;
    $length: if($list, length($list), 0);

    $predicate: __get-callback($predicate, $this-arg, 3);

    @while ($index <= $length) {
        $iteration: __call($predicate, $this-arg, nth($list, $index), $index, $list);

        @if __is-truthy($iteration) {
            @return $index;
        }

        $index: $index + 1;
    }

    @return -1;
}

@function __find-last-index($list, $predicate: __identity, $this-arg: null) {
    $length: if($list, length($list), 0);

    $predicate: __get-callback($predicate, $this-arg, 3);

    @while ($length > 0) {
        @if __call($predicate, $this-arg, nth($list, $length), $length, $list) {
            @return $length;
        }

        $length: $length - 1;
    }

    @return -1;
}

@function __find-key($map, $predicate: __identity, $this-arg: null) {
    $predicate: __get-callback($predicate, $this-arg, 3);

    @return __base-find($map, $predicate, __base-for-own, true);
}

@function __find-last-key($map, $predicate: __identity, $this-arg: null) {
    $predicate: __get-callback($predicate, $this-arg, 3);

    @return __base-find($map, $predicate, __base-for-own-right, true);
}

/// 
/// Iterates over elements of `collection`, returning the first element
/// `predicate` returns truthy for. The predicate is bound to `thisArg` and
/// invoked with three arguments; (value, index|key, collection).
/// If a property name is provided for `predicate` the created `_.property`
/// style callback returns the property value of the given element.
/// If a value is also provided for `thisArg` the created `_.matchesProperty`
/// style callback returns `true` for elements that have a matching property
/// value, else `false`.
/// If an object is provided for `predicate` the created `_.matches` style
/// callback returns `true` for elements that have the properties of the given
/// object, else `false`.
/// @static
/// @memberOf _
/// @alias detect
/// @category Collection
/// @param {Array|Object|string} collection The collection to search.
/// @param {Function|Object|string} [predicate=_.identity] The function invoked
///  per iteration.
/// @param {*} [thisArg] The `this` binding of `predicate`.
/// @returns {*} Returns the matched element, else `undefined`.
/// @example
/// var users = [
///   { 'user': 'barney',  'age': 36, 'active': true },
///   { 'user': 'fred',    'age': 40, 'active': false },
///   { 'user': 'pebbles', 'age': 1,  'active': true }
/// ];
/// _.result(_.find(users, function(chr) {
///   return chr.age < 40;
/// }), 'user');
/// // => 'barney'
/// // using the `_.matches` callback shorthand
/// _.result(_.find(users, { 'age': 1, 'active': true }), 'user');
/// // => 'pebbles'
/// // using the `_.matchesProperty` callback shorthand
/// _.result(_.find(users, 'active', false), 'user');
/// // => 'fred'
/// // using the `_.property` callback shorthand
/// _.result(_.find(users, 'active'), 'user');
/// // => 'barney'
/// 
@function _find($args...) { @return call(__find, $args...); }

@function _detect($args...) { @return call(__find, $args...); }


/// 
/// This method is like `_.find` except that it returns the index of the first
/// element `predicate` returns truthy for, instead of the element itself.
/// If a property name is provided for `predicate` the created `_.property`
/// style callback returns the property value of the given element.
/// If a value is also provided for `thisArg` the created `_.matchesProperty`
/// style callback returns `true` for elements that have a matching property
/// value, else `false`.
/// If an object is provided for `predicate` the created `_.matches` style
/// callback returns `true` for elements that have the properties of the given
/// object, else `false`.
/// @static
/// @memberOf _
/// @category Array
/// @param {Array} array The array to search.
/// @param {Function|Object|string} [predicate=_.identity] The function invoked
///  per iteration.
/// @param {*} [thisArg] The `this` binding of `predicate`.
/// @returns {number} Returns the index of the found element, else `-1`.
/// @example
/// var users = [
///   { 'user': 'barney',  'active': false },
///   { 'user': 'fred',    'active': false },
///   { 'user': 'pebbles', 'active': true }
/// ];
/// _.findIndex(users, function(chr) {
///   return chr.user == 'barney';
/// });
/// // => 0
/// // using the `_.matches` callback shorthand
/// _.findIndex(users, { 'user': 'fred', 'active': false });
/// // => 1
/// // using the `_.matchesProperty` callback shorthand
/// _.findIndex(users, 'active', false);
/// // => 0
/// // using the `_.property` callback shorthand
/// _.findIndex(users, 'active');
/// // => 2
/// 
@function _find-index($args...) { @return call(__find-index, $args...); }

/// 
/// This method is like `_.findIndex` except that it returns the key of the
/// first element `predicate` returns truthy for, instead of the element itself.
/// If a property name is provided for `predicate` the created `_.property`
/// style callback returns the property value of the given element.
/// If a value is also provided for `thisArg` the created `_.matchesProperty`
/// style callback returns `true` for elements that have a matching property
/// value, else `false`.
/// If an object is provided for `predicate` the created `_.matches` style
/// callback returns `true` for elements that have the properties of the given
/// object, else `false`.
/// @static
/// @memberOf _
/// @category Object
/// @param {Object} object The object to search.
/// @param {Function|Object|string} [predicate=_.identity] The function invoked
///  per iteration.
/// @param {*} [thisArg] The `this` binding of `predicate`.
/// @returns {string|undefined} Returns the key of the matched element, else `undefined`.
/// @example
/// var users = {
///   'barney':  { 'age': 36, 'active': true },
///   'fred':    { 'age': 40, 'active': false },
///   'pebbles': { 'age': 1,  'active': true }
/// };
/// _.findKey(users, function(chr) {
///   return chr.age < 40;
/// });
/// // => 'barney' (iteration order is not guaranteed)
/// // using the `_.matches` callback shorthand
/// _.findKey(users, { 'age': 1, 'active': true });
/// // => 'pebbles'
/// // using the `_.matchesProperty` callback shorthand
/// _.findKey(users, 'active', false);
/// // => 'fred'
/// // using the `_.property` callback shorthand
/// _.findKey(users, 'active');
/// // => 'barney'
/// 
@function _find-key($args...) { @return call(__find-key, $args...); }

/// 
/// This method is like `_.find` except that it iterates over elements of
/// `collection` from right to left.
/// @static
/// @memberOf _
/// @category Collection
/// @param {Array|Object|string} collection The collection to search.
/// @param {Function|Object|string} [predicate=_.identity] The function invoked
///  per iteration.
/// @param {*} [thisArg] The `this` binding of `predicate`.
/// @returns {*} Returns the matched element, else `undefined`.
/// @example
/// _.findLast([1, 2, 3, 4], function(n) {
///   return n % 2 == 1;
/// });
/// // => 3
/// 
@function _find-last($args...) { @return call(__find-last, $args...); }

/// 
/// This method is like `_.findIndex` except that it iterates over elements
/// of `collection` from right to left.
/// If a property name is provided for `predicate` the created `_.property`
/// style callback returns the property value of the given element.
/// If a value is also provided for `thisArg` the created `_.matchesProperty`
/// style callback returns `true` for elements that have a matching property
/// value, else `false`.
/// If an object is provided for `predicate` the created `_.matches` style
/// callback returns `true` for elements that have the properties of the given
/// object, else `false`.
/// @static
/// @memberOf _
/// @category Array
/// @param {Array} array The array to search.
/// @param {Function|Object|string} [predicate=_.identity] The function invoked
///  per iteration.
/// @param {*} [thisArg] The `this` binding of `predicate`.
/// @returns {number} Returns the index of the found element, else `-1`.
/// @example
/// var users = [
///   { 'user': 'barney',  'active': true },
///   { 'user': 'fred',    'active': false },
///   { 'user': 'pebbles', 'active': false }
/// ];
/// _.findLastIndex(users, function(chr) {
///   return chr.user == 'pebbles';
/// });
/// // => 2
/// // using the `_.matches` callback shorthand
/// _.findLastIndex(users, { 'user': 'barney', 'active': true });
/// // => 0
/// // using the `_.matchesProperty` callback shorthand
/// _.findLastIndex(users, 'active', false);
/// // => 1
/// // using the `_.property` callback shorthand
/// _.findLastIndex(users, 'active');
/// // => 0
/// 
@function _find-last-index($args...) { @return call(__find-last-index, $args...); }

/// 
/// This method is like `_.findKey` except that it iterates over elements of
/// a collection in the opposite order.
/// If a property name is provided for `predicate` the created `_.property`
/// style callback returns the property value of the given element.
/// If a value is also provided for `thisArg` the created `_.matchesProperty`
/// style callback returns `true` for elements that have a matching property
/// value, else `false`.
/// If an object is provided for `predicate` the created `_.matches` style
/// callback returns `true` for elements that have the properties of the given
/// object, else `false`.
/// @static
/// @memberOf _
/// @category Object
/// @param {Object} object The object to search.
/// @param {Function|Object|string} [predicate=_.identity] The function invoked
///  per iteration.
/// @param {*} [thisArg] The `this` binding of `predicate`.
/// @returns {string|undefined} Returns the key of the matched element, else `undefined`.
/// @example
/// var users = {
///   'barney':  { 'age': 36, 'active': true },
///   'fred':    { 'age': 40, 'active': false },
///   'pebbles': { 'age': 1,  'active': true }
/// };
/// _.findLastKey(users, function(chr) {
///   return chr.age < 40;
/// });
/// // => returns `pebbles` assuming `_.findKey` returns `barney`
/// // using the `_.matches` callback shorthand
/// _.findLastKey(users, { 'age': 36, 'active': true });
/// // => 'barney'
/// // using the `_.matchesProperty` callback shorthand
/// _.findLastKey(users, 'active', false);
/// // => 'fred'
/// // using the `_.property` callback shorthand
/// _.findLastKey(users, 'active');
/// // => 'pebbles'
/// 
@function _find-last-key($args...) { @return call(__find-last-key, $args...); }

/// 
/// Performs a deep comparison between each element in `collection` and the
/// source object, returning the first element that has equivalent property
/// values.
/// **Note:** This method supports comparing arrays, booleans, `Date` objects,
/// numbers, `Object` objects, regexes, and strings. Objects are compared by
/// their own, not inherited, enumerable properties. For comparing a single
/// own or inherited property value see `_.matchesProperty`.
/// @static
/// @memberOf _
/// @category Collection
/// @param {Array|Object|string} collection The collection to search.
/// @param {Object} source The object of property values to match.
/// @returns {*} Returns the matched element, else `undefined`.
/// @example
/// var users = [
///   { 'user': 'barney', 'age': 36, 'active': true },
///   { 'user': 'fred',   'age': 40, 'active': false }
/// ];
/// _.result(_.findWhere(users, { 'age': 36, 'active': true }), 'user');
/// // => 'barney'
/// _.result(_.findWhere(users, { 'age': 40, 'active': false }), 'user');
/// // => 'fred'
/// 
@function _find-where($args...) { @return call(__find-where, $args...); }