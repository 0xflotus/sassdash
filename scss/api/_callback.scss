

@function __get-callback($function: __identity, $this-arg: null, $arg-count: null) {
    @return if($arg-count, __call(__base-callback, null, $function, $this-arg, $arg-count), __base-callback);
}

@function __bind-callback-1($value) {
    $function: __this('function');
    $this-arg: __this('this-arg');

    @return __call($function, $this-arg, $value);
}
@function __bind-callback-3($value, $index, $collection) {
    $function: __this('function');
    $this-arg: __this('this-arg');

    @return __call($function, $this-arg, $value, $index, $collection);
}
@function __bind-callback-4($accumulator, $value, $index, $collection) {
    $function: __this('function');
    $this-arg: __this('this-arg');

    @return __call($function, $this-arg, $accumulator, $value, $index, $collection);
}
@function __bind-callback-5($value, $other, $key, $map, $source) {
    $function: __this('function');
    $this-arg: __this('this-arg');

    @return __call($function, $this-arg, $value, $other, $key, $map, $source);
}
@function __bind-callback-any($arguments...) {
    $function: __this('function');
    $this-arg: __this('this-arg');

    @return __call($function, $this-arg, $arguments...);
}
@function __bind-callback($function, $this-arg: null, $arg-count: null) {
    @if (not __function-exists($function)) {
        @return __identity;
    }

    @if ($this-arg == null) {
        @return $function;
    }

    $_: __scope(('function': $function, 'this-arg': $this-arg));

    $arg-count-case: (
        1: __bind-callback-1,
        3: __bind-callback-3,
        4: __bind-callback-4,
        5: __bind-callback-5
    );

    @if ($arg-count > 5) {
        @return __bind-callback-any;
    }

    $result: __bind(__get($arg-count-case, $arg-count), $this-arg);

    $_: __scope(false);

    @return $result;
}

@function __base-callback-shifted($value, $args...) {
    $function: __this('function');
    $this-arg: __this('this-arg');
    $arguments: __this('arguments');

    @return __call($function, $this-arg, $value, $arguments...);
}
@function __base-callback($function: __identity, $this-arg: $__undefined__, $arg-count: null) {
    $type: if(__function-exists($function), 'function', type-of($function));

    @if ($function == null) {
        @return __identity;
    }

    @if $type == 'list' {
        $arguments: _drop($function, 1);
        $function: nth($function, 1);
        $_: __scope(('function': $function, 'this-arg': $this-arg, 'arguments': $arguments));

        $base-callback-shifted: __bind(__base-callback-shifted);

        $_: __scope(false);

        @return $base-callback-shifted;
    }

    @if __is-native($function) {
        @return __ary($function, 1);
    }

    @if $type == 'function' {
        @return if(not __is-undefined($this-arg) and __is-function($function),
            __bind-callback($function, $this-arg, $arg-count),
            $function);
    }

    @return if($type == 'map',
        __base-matches($function, __is-falsey($arg-count)),
        __base-property($function));
}

@function __callback($function: __identity, $this-arg: null, $guard: null) {
    @if ($guard and __is-iteratee-call($function, $this-arg, $guard)) {
        $this-arg: null;
    }

    @return __base-callback($function, $this-arg);
}

/// 
/// Creates a function that invokes `$function` with the `this` binding of `thisArg`
/// and arguments of the created function. If `$function` is a property name the
/// created callback returns the property value for a given element. If `$function`
/// is an object the created callback returns `true` for elements that contain
/// the equivalent object properties, otherwise it returns `false`.
///
/// 
/// @alias iteratee
/// @group Utility
/// @param {*} (func=_.identity) The value to convert to a callback.
/// @param {*} (thisArg) The `this` binding of `$function`.
/// @param- {Object} (guard) Enables use as a callback for functions like `_map`.
/// @returns {Function} Returns the callback.
/// @example
/// var users = [
///   { 'user': 'barney', 'age': 36 },
///   { 'user': 'fred',   'age': 40 }
/// ];
/// // wrap to create custom callback shorthands
/// _.callback = _wrap(_.callback, function(callback, func, thisArg) {
///   var match = /^(.+?)__((gl)t)(.+)$/.exec(func);
///   if (!match) {
///     return callback(func, thisArg);
///   }
///   return function(object) {
///     return match(2) == 'gt'
///       ? object[match(1)] > match(3)
///       : object[match(1)] < match(3);
///   };
/// });
/// _filter(users, 'age__gt36');
/// // => ({ 'user': 'fred', 'age': 40 })
/// 
@function _callback($args...) { @return call(__callback, $args...); }

@function _iteratee($args...) { @return call(__callback, $args...); }

