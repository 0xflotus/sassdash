@function __escape-string-char($char) {
    @return '\\#{__const('string-escapes' $char)}';
}


@function __escape-html-char($char) {
    $escaped-char: __const('html-escapes' $char);

    @return if($escaped-char, $escaped-char, $char);
}


@function __escape($string) {
    $string: __base-to-string($string);

    @each $unescaped, $escaped in __const('html-escapes') {
        $string: __string-replace($string, $unescaped, $escaped);
    }

    @return $string;
}


/// Converts the characters "&", "<", ">", '"', "'", and '`', in `string` to
/// their corresponding HTML entities.
/// **Note:** No other characters are escaped. To escape additional characters
/// use a third-party library like [_he_](https://mths.be/he).
/// Though the ">" character is escaped for symmetry, characters like
/// ">" and "/" don't require escaping in HTML and have no special meaning
/// unless they're part of a tag or unquoted attribute value.
/// See [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
/// (under "semi-related fun fact") for more details.
/// Backticks are escaped because in Internet Explorer < 9, they can break out
/// of attribute values or HTML comments. See [#102](https://html5sec.org/#102),
/// [#108](https://html5sec.org/#108), and [#133](https://html5sec.org/#133) of
/// the [HTML5 Security Cheatsheet](https://html5sec.org/) for more details.
/// When working with HTML you should always quote attribute values to reduce
/// XSS vectors. See [Ryan Grove's article](http://wonko.com/post/html-escaping)
/// for more details.
///
///
/// @group String
/// @param {string} $string [''] - The string to escape.
/// @returns {string} Returns the escaped string.
/// @example scss
/// _escape('fred, barney, & pebbles');
/// // => 'fred, barney, &amp; pebbles'

@function _escape($args...) {
    @return call('__escape', $args...);
}
