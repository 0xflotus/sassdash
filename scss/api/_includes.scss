

@function __includes($collection, $target: null, $from-index: 1) {
    @if __is-string($collection) {
        @if not __is-number($from-index)
            or -$from-index >= str-length($collection)
        {
            $from-index: 0;
        } @else if $from-index < 0 {
            $from-index: str-length($collection) + $from-index;
        }


        $collection: str-slice($collection, $from-index);

        @return if(str-index($collection, __to-string($target)), true, false);
    }

    $collection: __to-list($collection);

    $length: if($collection, length($collection), 0);

    @if not __is-length($length) {
        $collection: __values($collection);
        $length: length($collection);
    }

    @if __is-falsey($length) {
        @return false;
    }

    @if __is-number($from-index) {
        $from-index: if($from-index <= 0,
            __native-max($length + $from-index, 1),
            $from-index);
    } @else {
        $from-index: 1;
    }

    @return __get-index-of($collection, $target, $from-index) > -1;
}

/**
 * Checks if `value` is in `collection` using `SameValueZero` for equality
 * comparisons. If `fromIndex` is negative, it is used as the offset from
 * the end of `collection`.
 *
 * **Note:** `SameValueZero` comparisons are like strict equality comparisons,
 * e.g. `===`, except that `NaN` matches `NaN`. See the
 * [ES spec](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-samevaluezero)
 * for more details.
 *
 * @static
 * @memberOf _
 * @alias contains, include
 * @category Collection
 * @param {Array|Object|string} collection The collection to search.
 * @param {*} target The value to search for.
 * @param {number} [fromIndex=0] The index to search from.
 * @returns {boolean} Returns `true` if a matching element is found, else `false`.
 * @example
 *
 * _.includes([1, 2, 3], 1);
 * // => true
 *
 * _.includes([1, 2, 3], 1, 2);
 * // => false
 *
 * _.includes({ 'user': 'fred', 'age': 40 }, 'fred');
 * // => true
 *
 * _.includes('pebbles', 'eb');
 * // => true
 */
@function _includes($args...) { @return call(__includes, $args...); }
