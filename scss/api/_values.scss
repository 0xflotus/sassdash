

@function __base-values($map, $props) {
    $index: 1;
    $length: length($props);
    $result: ();

    @while ($index <= $length) {
        $result: append($result, __get($map, nth($props, $index)));

        $index: $index + 1;
    }

    @return $result;
}

@function __values($map) {
    @return __base-values($map, __keys($map));
}

@function __values-in($map) {
    @return __base-values($map, __keys-in($map));
}

/// 
/// Creates an array of the own enumerable property values of `object`.
/// **Note:** Non-object values are coerced to objects.
///
/// 
/// @group Object
/// @param {Object} object The object to query.
/// @returns {Array} Returns the array of property values.
/// @example scss
/// function Foo() {
///   this.a = 1;
///   this.b = 2;
/// }
/// Foo.prototype.c = 3;
/// _values(new Foo);
/// // => (1, 2) (iteration order is not guaranteed)
/// _values('hi');
/// // => ('h', 'i')
/// 
@function _values($args...) { @return call(__values, $args...); }

/// 
/// Creates an array of the own and inherited enumerable property values
/// of `object`.
/// **Note:** Non-object values are coerced to objects.
///
/// 
/// @group Object
/// @param {Object} object The object to query.
/// @returns {Array} Returns the array of property values.
/// @example scss
/// function Foo() {
///   this.a = 1;
///   this.b = 2;
/// }
/// Foo.prototype.c = 3;
/// _values-in(new Foo);
/// // => (1, 2, 3) (iteration order is not guaranteed)
/// 
@function _values-in($args...) { @return call(__values-in, $args...); }