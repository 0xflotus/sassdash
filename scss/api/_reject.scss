
@function __reject-iteratee($value, $index, $collection) {
    $predicate: __this('predicate');

    @return __is-falsey(__exec($predicate, $value, $index, $collection));
}
@function __reject($collection, $predicate: __identity, $this-arg: null) {
    $function: if(__is-list($collection), __list-filter, __base-filter);

    $predicate: __get-callback($predicate, $this-arg, 3);

    $_: __scope(('predicate': $predicate));

    $result: __exec($function, $collection, __reject-iteratee);

    $_: __scope(false);

    @return $result;
}

/// 
/// The opposite of `_.filter`; this method returns the elements of `collection`
/// that `predicate` does/// not** return truthy for.
/// If a property name is provided for `predicate` the created `_.property`
/// style callback returns the property value of the given element.
/// If a value is also provided for `thisArg` the created `_.matchesProperty`
/// style callback returns `true` for elements that have a matching property
/// value, else `false`.
/// If an object is provided for `predicate` the created `_.matches` style
/// callback returns `true` for elements that have the properties of the given
/// object, else `false`.
/// @static
/// @memberOf _
/// @category Collection
/// @param {Array|Object|string} collection The collection to iterate over.
/// @param {Function|Object|string} [predicate=_.identity] The function invoked
///  per iteration.
/// @param {*} [thisArg] The `this` binding of `predicate`.
/// @returns {Array} Returns the new filtered array.
/// @example
/// _.reject([1, 2, 3, 4], function(n) {
///   return n % 2 == 0;
/// });
/// // => [1, 3]
/// var users = [
///   { 'user': 'barney', 'age': 36, 'active': false },
///   { 'user': 'fred',   'age': 40, 'active': true }
/// ];
/// // using the `_.matches` callback shorthand
/// _.pluck(_.reject(users, { 'age': 40, 'active': true }), 'user');
/// // => ['barney']
/// // using the `_.matchesProperty` callback shorthand
/// _.pluck(_.reject(users, 'active', false), 'user');
/// // => ['fred']
/// // using the `_.property` callback shorthand
/// _.pluck(_.reject(users, 'active'), 'user');
/// // => ['barney']
/// 
@function _reject($args...) { @return call(__reject, $args...); }
