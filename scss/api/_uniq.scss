


@function __base-uniq($list, $iteratee: __identity, $guard: null) {
    $result: ();

    $iteratee: if(__is-iteratee-call($list, $iteratee, $guard), __identity, $iteratee);

    @each $item in $list {
        $iteration: __exec($iteratee, $item);
        $result: map-merge($result, ($iteration: $item));
    }

    @return map-values($result);
}

@function __uniq($list, $iteratee: __identity, $this-arg: null) {
    $length: if($list, length($list), 0);

    @if __is-falsey($length) {
        @return ();
    }

    @if __is-iteratee-call($list, $iteratee, $this-arg) {
        $iteratee: __identity;
        $this-arg: null;
    }

    $iteratee: __get-callback($iteratee, $this-arg, 3);

    @return __base-uniq($list, $iteratee);
}

/**
 * Creates a duplicate-value-free version of an array using `SameValueZero`
 * for equality comparisons. Providing `true` for `isSorted` performs a faster
 * search algorithm for sorted arrays. If an iteratee function is provided it
 * is invoked for each value in the array to generate the criterion by which
 * uniqueness is computed. The `iteratee` is bound to `thisArg` and invoked
 * with three arguments; (value, index, array).
 *
 * If a property name is provided for `predicate` the created `_.property`
 * style callback returns the property value of the given element.
 *
 * If a value is also provided for `thisArg` the created `_.matchesProperty`
 * style callback returns `true` for elements that have a matching property
 * value, else `false`.
 *
 * If an object is provided for `predicate` the created `_.matches` style
 * callback returns `true` for elements that have the properties of the given
 * object, else `false`.
 *
 * **Note:** `SameValueZero` comparisons are like strict equality comparisons,
 * e.g. `===`, except that `NaN` matches `NaN`. See the
 * [ES spec](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-samevaluezero)
 * for more details.
 *
 * @static
 * @memberOf _
 * @alias unique
 * @category Array
 * @param {Array} array The array to inspect.
 * @param {boolean} [isSorted] Specify the array is sorted.
 * @param {Function|Object|string} [iteratee] The function invoked per iteration.
 * @param {*} [thisArg] The `this` binding of `iteratee`.
 * @returns {Array} Returns the new duplicate-value-free array.
 * @example
 *
 * _.uniq([1, 2, 1]);
 * // => [1, 2]
 *
 * // using `isSorted`
 * _.uniq([1, 1, 2], true);
 * // => [1, 2]
 *
 * // using an iteratee function
 * _.uniq([1, 2.5, 1.5, 2], function(n) {
 *   return this.floor(n);
 * }, Math);
 * // => [1, 2.5]
 *
 * // using the `_.property` callback shorthand
 * _.uniq([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
 * // => [{ 'x': 1 }, { 'x': 2 }]
 */
@function _uniq($args...) { @return call(__uniq, $args...); }

@function _unique($args...) { @return call(__uniq, $args...); }

