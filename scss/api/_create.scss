@function __base-create($constructor, $args...) {
    @if not (__function-exists($constructor)) {
        @return ();
    }

    @return __new($constructor, $args...);
}


@function __create($prototype, $properties, $guard: null) {
    $result: __base-create($prototype);

    @if ($guard and __is-iteratee-call($prototype, $properties, $guard)) {
        $properties: null;
    }

    @return if($properties, __base-copy($properties, $result, __keys($properties)), $result);
}


/// Creates a map that inherits from the given `prototype` object. If a
/// `properties` object is provided its own enumerable properties are assigned
/// to the created object.
///
///
/// @group Map
/// @param {Map} prototype The object to inherit from.
/// @param {Map} (properties) The properties to assign to the object.
/// @param {Map} (guard) Enables use as a callback for functions like `_map`.
/// @returns {Object} Returns the new object.
/// @example scss
/// function Shape() {
///   this.x = 0;
///   this.y = 0;
/// }
/// function Circle() {
///   Shape.call(this);
/// }
/// Circle.prototype = _create(Shape.prototype, {
///   'constructor': Circle
/// });
/// $circle: new Circle;
/// circle instanceof Circle;
/// // => true
/// circle instanceof Shape;
/// // => true

@function _create($args...) {
    @return call('__create', $args...);
}