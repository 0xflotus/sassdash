


@function __omit($map, $predicate, $this-arg: null, $args...) {
    @if $map == null {
        @return ();
    }

    $map: __to-map($map);

    @if not __function-exists($predicate) {
        $props: __base-flatten(($map, $predicate, $this-arg), false, false, 1);

        @return __pick-by-list($map, __base-difference(__keys-in($map), $props));
    }

    $predicate: __bind-callback($predicate, $this-arg, 3);

    $result: __pick-by-callback($map, __negate($predicate));

    @return $result;
}

/// 
/// The opposite of `_pick`; this method creates an object composed of the
/// own and inherited enumerable properties of `object` that are not omitted.
/// Property names may be specified as individual arguments or as lists of
/// property names. If `predicate` is provided it is invoked for each property
/// of `object` omitting the properties `predicate` returns truthy for. The
/// predicate is bound to `$this-arg` and invoked with three arguments;
/// (value, key, object).
///
/// 
/// @group Map
/// @param {Map} object The source object.
/// @param {Function|...(string|string[])} (predicate) The function invoked per
///  iteration or property names to omit, specified as individual property
///  names or lists of property names.
/// @param {*} ($this-arg) The `this` binding of `predicate`.
/// @returns {Object} Returns the new object.
/// @example scss
/// $object: { 'user': 'fred', 'age': 40 };
/// _omit(object, 'age');
/// // => { 'user': 'fred' }
/// _omit(object, _isNumber);
/// // => { 'user': 'fred' }
/// 
@function _omit($args...) { @return call(__omit, $args...); }
